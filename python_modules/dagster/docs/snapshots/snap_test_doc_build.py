# -*- coding: utf-8 -*-
# snapshottest: v1 - https://goo.gl/zC4yUc
from __future__ import unicode_literals

from snapshottest import Snapshot


snapshots = Snapshot()

snapshots['test_build_all_docs 1'] = [
    (
        [
            '.'
        ],
        [
            'doctrees',
            'html'
        ],
        [
        ]
    ),
    (
        [
            '.',
            'doctrees'
        ],
        [
            'apidocs',
            'guides',
            'intro_tutorial'
        ],
        [
        ]
    ),
    (
        [
            '.',
            'doctrees',
            'apidocs'
        ],
        [
        ],
        [
        ]
    ),
    (
        [
            '.',
            'doctrees',
            'guides'
        ],
        [
        ],
        [
        ]
    ),
    (
        [
            '.',
            'doctrees',
            'intro_tutorial'
        ],
        [
        ],
        [
        ]
    ),
    (
        [
            '.',
            'html'
        ],
        [
            '_images',
            '_sources',
            '_static',
            'apidocs',
            'guides',
            'intro_tutorial'
        ],
        [
            '.buildinfo',
            'contributing.html',
            'genindex.html',
            'index.html',
            'installation.html',
            'principles.html',
            'py-modindex.html',
            'search.html'
        ]
    ),
    (
        [
            '.',
            'html',
            '_images'
        ],
        [
        ],
        [
        ]
    ),
    (
        [
            '.',
            'html',
            '_sources'
        ],
        [
            'apidocs',
            'guides',
            'intro_tutorial'
        ],
        [
            'contributing.rst.txt',
            'index.rst.txt',
            'installation.rst.txt',
            'principles.rst.txt'
        ]
    ),
    (
        [
            '.',
            'html',
            '_sources',
            'apidocs'
        ],
        [
        ],
        [
            'decorators.rst.txt',
            'definitions.rst.txt',
            'errors.rst.txt',
            'execution.rst.txt',
            'types.rst.txt',
            'utilities.rst.txt'
        ]
    ),
    (
        [
            '.',
            'html',
            '_sources',
            'guides'
        ],
        [
        ],
        [
            '028_to_030_new_concepts.md.txt',
            '028_to_030_upgrade_guide.md.txt'
        ]
    ),
    (
        [
            '.',
            'html',
            '_sources',
            'intro_tutorial'
        ],
        [
        ],
        [
            'actual_dag.rst.txt',
            'config.rst.txt',
            'configuration_schemas.rst.txt',
            'execution_context.rst.txt',
            'expectations.rst.txt',
            'hello_dag.rst.txt',
            'hello_world.rst.txt',
            'inputs.rst.txt',
            'multiple_outputs.rst.txt',
            'pipeline_cli_execution.rst.txt',
            'repos.rst.txt',
            'resources.rst.txt',
            'reusable_solids.rst.txt',
            'types.rst.txt',
            'unittesting.rst.txt'
        ]
    ),
    (
        [
            '.',
            'html',
            '_static'
        ],
        [
        ],
        [
            'alabaster.css',
            'basic.css',
            'custom.css',
            'doctools.js',
            'documentation_options.js',
            'jquery-3.2.1.js',
            'jquery.js',
            'pygments.css',
            'searchtools.js',
            'underscore-1.3.1.js',
            'underscore.js',
            'websupport.js'
        ]
    ),
    (
        [
            '.',
            'html',
            'apidocs'
        ],
        [
        ],
        [
            'decorators.html',
            'definitions.html',
            'errors.html',
            'execution.html',
            'types.html',
            'utilities.html'
        ]
    ),
    (
        [
            '.',
            'html',
            'guides'
        ],
        [
        ],
        [
            '028_to_030_new_concepts.html',
            '028_to_030_upgrade_guide.html'
        ]
    ),
    (
        [
            '.',
            'html',
            'intro_tutorial'
        ],
        [
        ],
        [
            'actual_dag.html',
            'config.html',
            'configuration_schemas.html',
            'execution_context.html',
            'expectations.html',
            'hello_dag.html',
            'hello_world.html',
            'inputs.html',
            'multiple_outputs.html',
            'pipeline_cli_execution.html',
            'repos.html',
            'resources.html',
            'reusable_solids.html',
            'types.html',
            'unittesting.html'
        ]
    )
]

snapshots['test_build_all_docs 2'] = '''# Sphinx build info version 1
# This file hashes the configuration used when building these files. When it is not found, a full rebuild will be done.
config: 60669317f959338d907c02d78b4de87c
tags: 645f666f9bcd5a90fca523b33c5a78b7
'''

snapshots['test_build_all_docs 3'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Contributing &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="./" src="_static/documentation_options.js"></script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Hello, World" href="intro_tutorial/hello_world.html" />
    <link rel="prev" title="Installation" href="installation.html" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="contributing">
<h1>Contributing<a class="headerlink" href="#contributing" title="Permalink to this headline">¶</a></h1>
<p>If you are planning to contribute to dagster, you will need to set up a local
development environment.</p>
<div class="section" id="local-development-setup">
<h2>Local development setup<a class="headerlink" href="#local-development-setup" title="Permalink to this headline">¶</a></h2>
<ol class="arabic simple">
<li>Install Python 3.6.</li>
</ol>
<blockquote>
<div><ul class="simple">
<li>You can’t use Python 3.7+ yet because of <a class="reference external" href="https://github.com/apache/arrow/issues/1125">https://github.com/apache/arrow/issues/1125</a></li>
</ul>
</div></blockquote>
<ol class="arabic simple" start="2">
<li>Create and activate a virtualenv</li>
</ol>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> python3 -m venv dagsterenv
<span class="gp">$</span> <span class="nb">source</span> dagsterenv/bin/activate
</pre></div>
</div>
<ol class="arabic simple" start="3">
<li>Install dagster locally and install dev tools</li>
</ol>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> git clone git@github.com:dagster-io/dagster.git
<span class="gp">$</span> <span class="nb">cd</span> dagster/python_modules
<span class="gp">$</span> pip install -e ./dagit
<span class="gp">$</span> pip install -e ./dagster
<span class="gp">$</span> pip install -r ./dagster/dev-requirements.txt
</pre></div>
</div>
<ol class="arabic simple" start="4">
<li>Install dagit webapp dependencies</li>
</ol>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> dagster/python_modules/dagit/dagit/webapp
<span class="gp">$</span> yarn install
</pre></div>
</div>
<ol class="arabic simple" start="5">
<li>Run tests</li>
</ol>
<p>We use tox to manage test environments for python.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> dagster/python_modules/dagster
<span class="gp">$</span> tox
<span class="gp">$</span> <span class="nb">cd</span> dagster/python_modules/dagit
<span class="gp">$</span> tox
</pre></div>
</div>
<p>To run JavaScript tests for the dagit frontend, you can run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> dagster/python_modules/dagit/dagit/webapp
<span class="gp">$</span> yarn <span class="nb">test</span>
</pre></div>
</div>
<p>In webapp development it’s handy to run <code class="docutils literal notranslate"><span class="pre">yarn</span> <span class="pre">run</span> <span class="pre">jest</span> <span class="pre">--watch</span></code> to have an
interactive test runner.</p>
<p>Some webapp tests use snapshots–auto-generated results to which the test
render tree is compared. Those tests are supposed to break when you change
something.</p>
<p>Check that the change is sensible and run <code class="docutils literal notranslate"><span class="pre">yarn</span> <span class="pre">run</span> <span class="pre">jest</span> <span class="pre">-u</span></code> to update the
snapshot to the new result. You can also update snapshots interactively
when you are in <code class="docutils literal notranslate"><span class="pre">--watch</span></code> mode.</p>
<div class="section" id="running-dagit-webapp-in-development">
<h3>Running dagit webapp in development<a class="headerlink" href="#running-dagit-webapp-in-development" title="Permalink to this headline">¶</a></h3>
<p>For development, run the dagit GraphQL server on a different port than the
webapp, from any directory that contains a repository.yml file. For example:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> dagster/python_modules/dagster/dagster/dagster_examples
<span class="gp">$</span> dagit -p <span class="m">3333</span>
</pre></div>
</div>
<p>Run the local development (autoreloading, etc.) version of the webapp.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> dagster/python_modules/dagit/dagit/webapp
<span class="gp">$</span> <span class="nv">REACT_APP_GRAPHQL_URI</span><span class="o">=</span><span class="s2">&quot;http://localhost:3333/graphql&quot;</span> yarn start
</pre></div>
</div>
</div>
<div class="section" id="releasing">
<h3>Releasing<a class="headerlink" href="#releasing" title="Permalink to this headline">¶</a></h3>
<p>Projects are released using the Python script at <code class="docutils literal notranslate"><span class="pre">dagster/bin/publish.py</span></code>.</p>
</div>
<div class="section" id="developing-docs">
<h3>Developing docs<a class="headerlink" href="#developing-docs" title="Permalink to this headline">¶</a></h3>
<p>Running a live html version of the docs can expedite documentation development.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">cd</span> python_modules/dagster/docs
<span class="gp">$</span> make livehtml
</pre></div>
</div>
</div>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="index.html">Table Of Contents</a></h3>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="installation.html">Installation</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="index.html">Documentation overview</a><ul>
      <li>Previous: <a href="installation.html" title="previous chapter">Installation</a></li>
      <li>Next: <a href="intro_tutorial/hello_world.html" title="next chapter">Hello, World</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/contributing.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="_sources/contributing.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 4'] = '''

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Index &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="./" src="_static/documentation_options.js"></script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="#" />
    <link rel="search" title="Search" href="search.html" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            

<h1 id="index">Index</h1>

<div class="genindex-jumpbox">
 <a href="#A"><strong>A</strong></a>
 | <a href="#B"><strong>B</strong></a>
 | <a href="#C"><strong>C</strong></a>
 | <a href="#D"><strong>D</strong></a>
 | <a href="#E"><strong>E</strong></a>
 | <a href="#F"><strong>F</strong></a>
 | <a href="#G"><strong>G</strong></a>
 | <a href="#H"><strong>H</strong></a>
 | <a href="#I"><strong>I</strong></a>
 | <a href="#L"><strong>L</strong></a>
 | <a href="#M"><strong>M</strong></a>
 | <a href="#N"><strong>N</strong></a>
 | <a href="#O"><strong>O</strong></a>
 | <a href="#P"><strong>P</strong></a>
 | <a href="#R"><strong>R</strong></a>
 | <a href="#S"><strong>S</strong></a>
 | <a href="#T"><strong>T</strong></a>
 | <a href="#V"><strong>V</strong></a>
 
</div>
<h2 id="A">A</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/types.html#dagster.Any">Any (in module dagster)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/types.html#dagster.as_dagster_type">as_dagster_type() (in module dagster)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="B">B</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/types.html#dagster.Bool">Bool (in module dagster)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="C">C</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.PipelineContextDefinition.config_field">config_field (dagster.PipelineContextDefinition attribute)</a>

      <ul>
        <li><a href="apidocs/definitions.html#dagster.SolidDefinition.config_field">(dagster.SolidDefinition attribute)</a>
</li>
      </ul></li>
      <li><a href="apidocs/types.html#dagster.ConfigType">ConfigType (class in dagster)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/execution.html#dagster.PipelineExecutionResult.context">context (dagster.PipelineExecutionResult attribute)</a>

      <ul>
        <li><a href="apidocs/execution.html#dagster.SolidExecutionResult.context">(dagster.SolidExecutionResult attribute)</a>
</li>
      </ul></li>
      <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.context_definitions">context_definitions (dagster.PipelineDefinition attribute)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.PipelineContextDefinition.context_fn">context_fn (dagster.PipelineContextDefinition attribute)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="D">D</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/types.html#module-dagster">dagster (module)</a>
</li>
      <li><a href="apidocs/execution.html#dagster.SolidExecutionResult.dagster_error">dagster_error (dagster.SolidExecutionResult attribute)</a>
</li>
      <li><a href="apidocs/types.html#dagster.dagster_type">dagster_type() (in module dagster)</a>
</li>
      <li><a href="apidocs/errors.html#dagster.DagsterExpectationFailedError">DagsterExpectationFailedError</a>
</li>
      <li><a href="apidocs/errors.html#dagster.DagsterInvalidDefinitionError">DagsterInvalidDefinitionError</a>
</li>
      <li><a href="apidocs/errors.html#dagster.DagsterInvariantViolationError">DagsterInvariantViolationError</a>
</li>
      <li><a href="apidocs/errors.html#dagster.DagsterRuntimeCoercionError">DagsterRuntimeCoercionError</a>
</li>
      <li><a href="apidocs/errors.html#dagster.DagsterTypeError">DagsterTypeError</a>
</li>
      <li><a href="apidocs/errors.html#dagster.DagsterUserCodeExecutionError">DagsterUserCodeExecutionError</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.dependencies">dependencies (dagster.PipelineDefinition attribute)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.dependency_structure">dependency_structure (dagster.PipelineDefinition attribute)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.DependencyDefinition">DependencyDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.DependencyDefinition.description">description (dagster.DependencyDefinition attribute)</a>

      <ul>
        <li><a href="apidocs/definitions.html#dagster.ExpectationDefinition.description">(dagster.ExpectationDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.InputDefinition.description">(dagster.InputDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.OutputDefinition.description">(dagster.OutputDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.PipelineContextDefinition.description">(dagster.PipelineContextDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.description">(dagster.PipelineDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.SolidDefinition.description">(dagster.SolidDefinition attribute)</a>
</li>
      </ul></li>
      <li><a href="apidocs/types.html#dagster.Dict">Dict() (in module dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.display_name">display_name (dagster.PipelineDefinition attribute)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="E">E</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/execution.html#dagster.execute_pipeline">execute_pipeline() (in module dagster)</a>
</li>
      <li><a href="apidocs/execution.html#dagster.execute_pipeline_iterator">execute_pipeline_iterator() (in module dagster)</a>
</li>
      <li><a href="apidocs/utilities.html#dagster.execute_solid">execute_solid() (in module dagster)</a>
</li>
      <li><a href="apidocs/utilities.html#dagster.execute_solids">execute_solids() (in module dagster)</a>
</li>
      <li><a href="apidocs/execution.html#dagster.ExecutionContext">ExecutionContext (class in dagster)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/execution.html#dagster.ExecutionMetadata">ExecutionMetadata (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.ExpectationDefinition.expectation_fn">expectation_fn (dagster.ExpectationDefinition attribute)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.ExpectationDefinition">ExpectationDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.ExpectationResult">ExpectationResult (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.InputDefinition.expectations">expectations (dagster.InputDefinition attribute)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="F">F</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.Field">Field() (in module dagster)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/decorators.html#dagster.MultipleResults.from_dict">from_dict() (dagster.MultipleResults static method)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="G">G</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.RepositoryDefinition.get_all_pipelines">get_all_pipelines() (dagster.RepositoryDefinition method)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.RepositoryDefinition.get_pipeline">get_pipeline() (dagster.RepositoryDefinition method)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="H">H</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.has_solid">has_solid() (dagster.PipelineDefinition method)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="I">I</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.SolidDefinition.input_defs">input_defs (dagster.SolidDefinition attribute)</a>
</li>
      <li><a href="apidocs/types.html#dagster.input_schema">input_schema() (in module dagster)</a>
</li>
      <li><a href="apidocs/types.html#dagster.input_selector_schema">input_selector_schema() (in module dagster)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.InputDefinition">InputDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/types.html#dagster.Int">Int (in module dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.RepositoryDefinition.iterate_over_pipelines">iterate_over_pipelines() (dagster.RepositoryDefinition method)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="L">L</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/decorators.html#dagster.lambda_solid">lambda_solid() (in module dagster)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/types.html#dagster.List">List() (in module dagster)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="M">M</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.ExpectationResult.message">message (dagster.ExpectationResult attribute)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.SolidDefinition.metadata">metadata (dagster.SolidDefinition attribute)</a>
</li>
      <li><a href="apidocs/decorators.html#dagster.MultipleResults">MultipleResults (class in dagster)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="N">N</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.ExpectationDefinition.name">name (dagster.ExpectationDefinition attribute)</a>

      <ul>
        <li><a href="apidocs/definitions.html#dagster.InputDefinition.name">(dagster.InputDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.OutputDefinition.name">(dagster.OutputDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.name">(dagster.PipelineDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.RepositoryDefinition.name">(dagster.RepositoryDefinition attribute)</a>
</li>
        <li><a href="apidocs/definitions.html#dagster.SolidDefinition.name">(dagster.SolidDefinition attribute)</a>
</li>
      </ul></li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/types.html#dagster.NamedDict">NamedDict() (in module dagster)</a>
</li>
      <li><a href="apidocs/types.html#dagster.Nullable">Nullable() (in module dagster)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="O">O</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.DependencyDefinition.output">output (dagster.DependencyDefinition attribute)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.Result.output_name">output_name (dagster.Result attribute)</a>
</li>
      <li><a href="apidocs/types.html#dagster.output_schema">output_schema() (in module dagster)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/types.html#dagster.output_selector_schema">output_selector_schema() (in module dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.OutputDefinition">OutputDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.SolidDefinition.outputs_defs">outputs_defs (dagster.SolidDefinition attribute)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="P">P</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.PipelineContextDefinition.passthrough_context_definition">passthrough_context_definition() (dagster.PipelineContextDefinition static method)</a>
</li>
      <li><a href="apidocs/types.html#dagster.Path">Path (in module dagster)</a>
</li>
      <li><a href="apidocs/execution.html#dagster.PipelineExecutionResult.pipeline">pipeline (dagster.PipelineExecutionResult attribute)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.RepositoryDefinition.pipeline_dict">pipeline_dict (dagster.RepositoryDefinition attribute)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/errors.html#dagster.PipelineConfigEvaluationError">PipelineConfigEvaluationError</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.PipelineContextDefinition">PipelineContextDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.PipelineDefinition">PipelineDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/execution.html#dagster.PipelineExecutionResult">PipelineExecutionResult (class in dagster)</a>
</li>
      <li><a href="apidocs/types.html#dagster.PythonObjectType">PythonObjectType (class in dagster)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="R">R</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.RepositoryDefinition">RepositoryDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.ResourceDefinition">ResourceDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.Result">Result (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.ExpectationResult.result_context">result_context (dagster.ExpectationResult attribute)</a>
</li>
      <li><a href="apidocs/execution.html#dagster.PipelineExecutionResult.result_for_solid">result_for_solid() (dagster.PipelineExecutionResult method)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/execution.html#dagster.PipelineExecutionResult.result_list">result_list (dagster.PipelineExecutionResult attribute)</a>
</li>
      <li><a href="apidocs/decorators.html#dagster.MultipleResults.results">results (dagster.MultipleResults attribute)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.InputDefinition.runtime_type">runtime_type (dagster.InputDefinition attribute)</a>

      <ul>
        <li><a href="apidocs/definitions.html#dagster.OutputDefinition.runtime_type">(dagster.OutputDefinition attribute)</a>
</li>
      </ul></li>
      <li><a href="apidocs/types.html#dagster.RuntimeType">RuntimeType (class in dagster)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="S">S</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.DependencyDefinition.solid">solid (dagster.DependencyDefinition attribute)</a>

      <ul>
        <li><a href="apidocs/execution.html#dagster.SolidExecutionResult.solid">(dagster.SolidExecutionResult attribute)</a>
</li>
      </ul></li>
      <li><a href="apidocs/decorators.html#dagster.solid">solid() (in module dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.solid_named">solid_named() (dagster.PipelineDefinition method)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.SolidDefinition">SolidDefinition (class in dagster)</a>
</li>
      <li><a href="apidocs/execution.html#dagster.SolidExecutionResult">SolidExecutionResult (class in dagster)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.SolidInstance">SolidInstance (class in dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.PipelineDefinition.solids">solids (dagster.PipelineDefinition attribute)</a>, <a href="apidocs/definitions.html#dagster.PipelineDefinition.solids">[1]</a>
</li>
      <li><a href="apidocs/types.html#dagster.String">String (in module dagster)</a>
</li>
      <li><a href="apidocs/definitions.html#dagster.ExpectationResult.success">success (dagster.ExpectationResult attribute)</a>

      <ul>
        <li><a href="apidocs/execution.html#dagster.PipelineExecutionResult.success">(dagster.PipelineExecutionResult attribute)</a>
</li>
        <li><a href="apidocs/execution.html#dagster.SolidExecutionResult.success">(dagster.SolidExecutionResult attribute)</a>
</li>
      </ul></li>
  </ul></td>
</tr></table>

<h2 id="T">T</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.SolidDefinition.transform_fn">transform_fn (dagster.SolidDefinition attribute)</a>
</li>
  </ul></td>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/execution.html#dagster.SolidExecutionResult.transformed_value">transformed_value() (dagster.SolidExecutionResult method)</a>
</li>
      <li><a href="apidocs/execution.html#dagster.SolidExecutionResult.transformed_values">transformed_values (dagster.SolidExecutionResult attribute)</a>
</li>
  </ul></td>
</tr></table>

<h2 id="V">V</h2>
<table style="width: 100%" class="indextable genindextable"><tr>
  <td style="width: 33%; vertical-align: top;"><ul>
      <li><a href="apidocs/definitions.html#dagster.Result.value">value (dagster.Result attribute)</a>
</li>
  </ul></td>
</tr></table>



          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="index.html">Documentation overview</a><ul>
  </ul></li>
</ul>
</div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 5'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Intro Tutorial &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="./" src="_static/documentation_options.js"></script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Principles" href="principles.html" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <img alt="https://user-images.githubusercontent.com/28738937/44878798-b6e17e00-ac5c-11e8-8d25-2e47e5a53418.png" class="align-center" src="https://user-images.githubusercontent.com/28738937/44878798-b6e17e00-ac5c-11e8-8d25-2e47e5a53418.png" />
<p>Welcome to Dagster, an opinionated programming model for data pipelines.</p>
<div class="toctree-wrapper compound" id="documentation">
<ul>
<li class="toctree-l1"><a class="reference internal" href="principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="contributing.html">Contributing</a></li>
</ul>
</div>
<div class="section" id="intro-tutorial">
<h1>Intro Tutorial<a class="headerlink" href="#intro-tutorial" title="Permalink to this headline">¶</a></h1>
<div class="toctree-wrapper compound" id="id1">
<ul>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
</div>
</div>
<div class="section" id="api-reference">
<h1>API Reference<a class="headerlink" href="#api-reference" title="Permalink to this headline">¶</a></h1>
<div class="toctree-wrapper compound" id="id2">
<ul>
<li class="toctree-l1"><a class="reference internal" href="apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/utilities.html">Utilities</a></li>
</ul>
</div>
</div>
<div class="section" id="guides">
<h1>Guides<a class="headerlink" href="#guides" title="Permalink to this headline">¶</a></h1>
<div class="toctree-wrapper compound" id="id3">
<ul>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
</div>
</div>
<div class="section" id="indices-and-tables">
<h1>Indices and tables<a class="headerlink" href="#indices-and-tables" title="Permalink to this headline">¶</a></h1>
<ul class="simple">
<li><a class="reference internal" href="genindex.html"><span class="std std-ref">Index</span></a></li>
<li><a class="reference internal" href="py-modindex.html"><span class="std std-ref">Module Index</span></a></li>
<li><a class="reference internal" href="search.html"><span class="std std-ref">Search Page</span></a></li>
</ul>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="#">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="#">Documentation overview</a><ul>
      <li>Next: <a href="principles.html" title="next chapter">Principles</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/index.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="_sources/index.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 6'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Installation &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="./" src="_static/documentation_options.js"></script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Contributing" href="contributing.html" />
    <link rel="prev" title="Principles" href="principles.html" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="installation">
<h1>Installation<a class="headerlink" href="#installation" title="Permalink to this headline">¶</a></h1>
<p>Dagster is tested on Python 3.7.2, 3.6.6, 3.5.6, and 2.7.15. Python 3 is strongly
encouraged – if you can, you won’t regret making the switch!</p>
<div class="section" id="installing-python-pip-virtualenv-and-yarn">
<h2>Installing Python, pip, virtualenv, and yarn<a class="headerlink" href="#installing-python-pip-virtualenv-and-yarn" title="Permalink to this headline">¶</a></h2>
<p>To check that Python and the pip package manager are already installed, you can run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> python --version
<span class="gp">$</span> pip --version
</pre></div>
</div>
<p>If you’re running Python 3.3 or later, you already have the venv package for managing
virtualenvs. On Python 2.7, you can check whether you have the virtualenv tool installed by
running:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> virtualenv --version
</pre></div>
</div>
<p>If these tools aren’t present on your system, you can install them as follows:</p>
<p>On Ubuntu:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> sudo apt update
<span class="gp">$</span> sudo apt install python3-dev python3-pip
</pre></div>
</div>
<p>And on Python 2.7:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> sudo pip install -U virtualenv  <span class="c1"># system-wide install</span>
</pre></div>
</div>
<p>On OSX, using <a class="reference external" href="https://brew.sh/">Homebrew</a>:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> brew update
<span class="gp">$</span> brew install python  <span class="c1"># Python 3</span>
</pre></div>
</div>
<p>And on Python 2.7:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> sudo pip install -U virtualenv  <span class="c1"># system-wide install</span>
</pre></div>
</div>
<p>On Windows (Python 3):
- Install the <em>Microsoft Visual C++ 2015 Redistributable Update 3</em>. This comes with
<em>Visual Studio 2015</em> but can be installed separately as follows:</p>
<blockquote>
<div><ol class="arabic simple">
<li>Go to the Visual Studio downloads,</li>
<li>Select <em>Redistributables and Build Tools</em>,</li>
<li>Download and install the <em>Microsoft Visual C++ 2015 Redistributable Update 3</em>.</li>
</ol>
</div></blockquote>
<ul class="simple">
<li>Install the 64-bit Python 3 release for Windows (select <code class="docutils literal notranslate"><span class="pre">pip</span></code> as an optional feature).</li>
</ul>
<p>To use the dagit tool, you will also need to
<a class="reference external" href="https://yarnpkg.com/lang/en/docs/install/">install yarn</a>.</p>
</div>
<div class="section" id="creating-a-virtual-environment">
<h2>Creating a virtual environment<a class="headerlink" href="#creating-a-virtual-environment" title="Permalink to this headline">¶</a></h2>
<p>We strongly recommend installing dagster inside a Python virtualenv. If you are
running Anaconda, you should install dagster inside a Conda environment.</p>
<p>To create a virtual environment on Python 3, you can just run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> python3 -m venv /path/to/new/virtual/environment
</pre></div>
</div>
<p>This will create a new Python environment whose interpreter and libraries
are isolated from those installed in other virtual environments, and
(by default) any libraries installed in a “system” Python installed as part
of your operating system.</p>
<p>On Python 2, you can use a tool like
<a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/">virtualenvwrapper</a>
to manage your virtual environments, or just run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> virtualenv /path/to/new/virtual/environment
</pre></div>
</div>
<p>You’ll then need to ‘activate’ the virtualenvironment, in bash by
running:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">source</span> /path/to/new/virtual/environment/bin/activate
</pre></div>
</div>
<p>(For other shells, see the
<a class="reference external" href="https://docs.python.org/3/library/venv.html#creating-virtual-environments">venv documentation</a>.)</p>
<p>If you are using Anaconda, you can run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> conda create --name myenv
</pre></div>
</div>
<p>And then, on OSX or Ubuntu:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> <span class="nb">source</span> activate myenv
</pre></div>
</div>
<p>Or, on Windows:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> activate myenv
</pre></div>
</div>
</div>
<div class="section" id="installing-the-stable-version-from-pypi">
<h2>Installing the stable version from PyPI<a class="headerlink" href="#installing-the-stable-version-from-pypi" title="Permalink to this headline">¶</a></h2>
<p>To install dagster and dagit, run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> pip install dagster
<span class="gp">$</span> pip install dagit
</pre></div>
</div>
<p>This will install the latest stable version of both packages.</p>
</div>
<div class="section" id="installing-the-dev-version-from-source">
<h2>Installing the dev version from source<a class="headerlink" href="#installing-the-dev-version-from-source" title="Permalink to this headline">¶</a></h2>
<p>To install the development version of the software, first clone the project
from Github:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> git clone git@github.com:dagster-io/dagster.git
</pre></div>
</div>
<p>From the root of the repository, you can then run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> pip install -e python_packages/dagster <span class="o">&amp;&amp;</span> <span class="se">\\</span>
  <span class="nb">pushd</span> python_packages/dagit/webapp <span class="o">&amp;&amp;</span> <span class="se">\\</span>
  yarn install <span class="o">&amp;&amp;</span> <span class="se">\\</span>
  yarn build <span class="o">&amp;&amp;</span> <span class="se">\\</span>
  <span class="nb">popd</span> <span class="o">&amp;&amp;</span> <span class="se">\\</span>
  pip install -e python_packages/dagit
</pre></div>
</div>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="index.html">Table Of Contents</a></h3>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="principles.html">Principles</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="index.html">Documentation overview</a><ul>
      <li>Previous: <a href="principles.html" title="previous chapter">Principles</a></li>
      <li>Next: <a href="contributing.html" title="next chapter">Contributing</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/installation.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="_sources/installation.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 7'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Principles &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="./" src="_static/documentation_options.js"></script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Installation" href="installation.html" />
    <link rel="prev" title="Intro Tutorial" href="index.html" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="principles">
<h1>Principles<a class="headerlink" href="#principles" title="Permalink to this headline">¶</a></h1>
<p>Dagster is opinionated about how data pipelines should be built and structured. What do we think
is important?</p>
<div class="section" id="functional">
<h2>Functional<a class="headerlink" href="#functional" title="Permalink to this headline">¶</a></h2>
<p>Data pipelines should be expressed as DAGs (directed acyclic graphs) of functional, idempotent
computations. Individual nodes in the graph consume their inputs, perform some computation, and
yield outputs, either with no side effects or with clearly advertised side effects. Given the
same inputs and configuration, the computation should always produce the same output. If these
computations have external dependencies, these should be parametrizable, so that the computations
may execute in different environments.</p>
<blockquote>
<div><ul class="simple">
<li>See Maxime Beauchemin’s Medium article on <a class="reference external" href="https://bit.ly/2LxDgnr">Functional Data Engineering</a>
for an excellent overview of functional programing in batch computations.</li>
</ul>
</div></blockquote>
</div>
<div class="section" id="self-describing">
<h2>Self-describing<a class="headerlink" href="#self-describing" title="Permalink to this headline">¶</a></h2>
<p>Data pipelines should be self-describing, with rich metadata and types. Users should be able to
approach an unfamiliar pipeline and use tooling to inspect it and discover its structure,
capabilities, and requirements. Pipeline metadata should be co-located with the pipeline’s actual
code: documentation and code should be delivered as a single artifact.</p>
</div>
<div class="section" id="compute-agnostic">
<h2>Compute-agnostic<a class="headerlink" href="#compute-agnostic" title="Permalink to this headline">¶</a></h2>
<p>Heterogeneity in data pipelines is the norm, rather than the exception. Data pipelines are written
collaboratively by many people in different personas – data engineers, machine-learning engineers,
data scientists, analysts and so on – who have different needs and tools, and are particular about
those tools.</p>
<p>Dagster has opinions about best practices for structuring data pipelines. It has no opinions
about what libraries and engines should do actual compute. Dagster pipelines can be made up of
any Python computations, whether they use Pandas, Spark, or call out to SQL or any other DSL or
library deemed appropriate to the task.</p>
</div>
<div class="section" id="testable">
<h2>Testable<a class="headerlink" href="#testable" title="Permalink to this headline">¶</a></h2>
<p>Testing data pipelines is notoriously difficult. Because testing is so difficult, it is often never
done, or done poorly. Dagster pipelines are designed to be tested. Dagster provides explicit support
for pipeline authors to manage and maintain multiple execution environments – for example, unit
testing, integration testing, and production environments. Dagster can also execute arbitrary
subsets and nodes of pipelines, which is critical for testability (and useful in operational
contexts as well).</p>
</div>
<div class="section" id="verifiable-data-quality">
<h2>Verifiable data quality<a class="headerlink" href="#verifiable-data-quality" title="Permalink to this headline">¶</a></h2>
<p>Testing code is important in data pipelines, but it is not sufficient. Data quality tests – run
during every meaningful stage of computation in production – are critical to reduce the
maintenance burden of data pipelines. Pipeline authors generally do not have control over their
input data, and make many implicit assumptions about that data. Data formats can also change
over time. In order to control this entropy, Dagster encourages users to computationally verify
assumptions (known as expectations) about the data as part of the pipeline process. This way, when
those assumptions break, the breakage can be reported quickly, easily, and with rich metadata
and diagnostic information. These expectations can also serve as contracts between teams.</p>
<blockquote>
<div><ul class="simple">
<li>See <a class="reference external" href="https://bit.ly/2mxDS1R">https://bit.ly/2mxDS1R</a> for a primer on pipeline tests for data quality.</li>
</ul>
</div></blockquote>
</div>
<div class="section" id="gradual-optional-typing">
<h2>Gradual, optional typing<a class="headerlink" href="#gradual-optional-typing" title="Permalink to this headline">¶</a></h2>
<p>Dagster contains a type system to describe the values flowing through the pipeline and the
configuration of the pipeline. As pipelines mature, gradual typing lets nodes in a pipeline
know if they are properly arranged and configured prior to execution, and provides rich
documentation and runtime error checking.</p>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="index.html">Table Of Contents</a></h3>
<ul class="current">
<li class="toctree-l1 current"><a class="current reference internal" href="#">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="index.html">Documentation overview</a><ul>
      <li>Previous: <a href="index.html" title="previous chapter">Intro Tutorial</a></li>
      <li>Next: <a href="installation.html" title="next chapter">Installation</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/principles.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="_sources/principles.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 8'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Python Module Index &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="./" src="_static/documentation_options.js"></script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />

   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />


    <script type="text/javascript">
      DOCUMENTATION_OPTIONS.COLLAPSE_INDEX = true;
    </script>


  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            

   <h1>Python Module Index</h1>

   <div class="modindex-jumpbox">
   <a href="#cap-d"><strong>d</strong></a>
   </div>

   <table class="indextable modindextable">
     <tr class="pcap"><td></td><td>&#160;</td><td></td></tr>
     <tr class="cap" id="cap-d"><td></td><td>
       <strong>d</strong></td><td></td></tr>
     <tr>
       <td></td>
       <td>
       <a href="apidocs/types.html#module-dagster"><code class="xref">dagster</code></a></td><td>
       <em></em></td></tr>
   </table>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="index.html">Documentation overview</a><ul>
  </ul></li>
</ul>
</div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 9'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Search &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="./" src="_static/documentation_options.js"></script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <script type="text/javascript" src="_static/searchtools.js"></script>
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="#" />
  <script type="text/javascript">
    jQuery(function() { Search.loadIndex("searchindex.js"); });
  </script>
  
  <script type="text/javascript" id="searchindexloader"></script>
  
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />


  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <h1 id="search-documentation">Search</h1>
  <div id="fallback" class="admonition warning">
  <script type="text/javascript">$(\'#fallback\').hide();</script>
  <p>
    Please activate JavaScript to enable the search
    functionality.
  </p>
  </div>
  <p>
    From here you can search these documents. Enter your search
    words into the box below and click "search". Note that the search
    function will automatically search for all of the words. Pages
    containing fewer words won't appear in the result list.
  </p>
  <form action="" method="get">
    <input type="text" name="q" value="" />
    <input type="submit" value="search" />
    <span id="search-progress" style="padding-left: 10px"></span>
  </form>
  
  <div id="search-results">
  
  </div>

          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="index.html">Documentation overview</a><ul>
  </ul></li>
</ul>
</div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 10'] = '''Contributing
============

If you are planning to contribute to dagster, you will need to set up a local
development environment.

Local development setup
~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Install Python 3.6.
  * You can't use Python 3.7+ yet because of https://github.com/apache/arrow/issues/1125

2. Create and activate a virtualenv

.. code-block:: console

    $ python3 -m venv dagsterenv
    $ source dagsterenv/bin/activate

3. Install dagster locally and install dev tools

.. code-block:: console

    $ git clone git@github.com:dagster-io/dagster.git
    $ cd dagster/python_modules
    $ pip install -e ./dagit
    $ pip install -e ./dagster
    $ pip install -r ./dagster/dev-requirements.txt

4. Install dagit webapp dependencies

.. code-block:: console

    $ cd dagster/python_modules/dagit/dagit/webapp
    $ yarn install

5. Run tests

We use tox to manage test environments for python.

.. code-block:: console

    $ cd dagster/python_modules/dagster
    $ tox
    $ cd dagster/python_modules/dagit
    $ tox

To run JavaScript tests for the dagit frontend, you can run:

.. code-block:: console

    $ cd dagster/python_modules/dagit/dagit/webapp
    $ yarn test

In webapp development it's handy to run ``yarn run jest --watch`` to have an
interactive test runner.

Some webapp tests use snapshots--auto-generated results to which the test
render tree is compared. Those tests are supposed to break when you change
something.

Check that the change is sensible and run ``yarn run jest -u`` to update the
snapshot to the new result. You can also update snapshots interactively
when you are in ``--watch`` mode.

Running dagit webapp in development
-------------------------------------
For development, run the dagit GraphQL server on a different port than the
webapp, from any directory that contains a repository.yml file. For example:

.. code-block:: console

    $ cd dagster/python_modules/dagster/dagster/dagster_examples
    $ dagit -p 3333

Run the local development (autoreloading, etc.) version of the webapp.

.. code-block:: console

    $ cd dagster/python_modules/dagit/dagit/webapp
    $ REACT_APP_GRAPHQL_URI="http://localhost:3333/graphql" yarn start

Releasing
-----------
Projects are released using the Python script at ``dagster/bin/publish.py``.

Developing docs
---------------
Running a live html version of the docs can expedite documentation development.

.. code-block:: console

    $ cd python_modules/dagster/docs
    $ make livehtml
'''

snapshots['test_build_all_docs 11'] = '''.. image:: https://user-images.githubusercontent.com/28738937/44878798-b6e17e00-ac5c-11e8-8d25-2e47e5a53418.png
   :align: center


Welcome to Dagster, an opinionated programming model for data pipelines.

.. toctree::
  :maxdepth: 1
  :name: Documentation

  principles
  installation
  contributing

Intro Tutorial
==============
.. toctree::
  :maxdepth: 1
  :name: Intro Tutorial


  intro_tutorial/hello_world
  intro_tutorial/hello_dag
  intro_tutorial/actual_dag
  intro_tutorial/inputs
  intro_tutorial/config
  intro_tutorial/configuration_schemas
  intro_tutorial/execution_context
  intro_tutorial/resources
  intro_tutorial/repos
  intro_tutorial/pipeline_cli_execution
  intro_tutorial/types
  intro_tutorial/expectations
  intro_tutorial/multiple_outputs
  intro_tutorial/reusable_solids
  intro_tutorial/unittesting

API Reference
================

.. toctree::
  :maxdepth: 1
  :name: API Reference

  apidocs/definitions
  apidocs/decorators
  apidocs/execution
  apidocs/errors
  apidocs/types
  apidocs/utilities

Guides
================

.. toctree::
  :maxdepth: 1
  :name: Guides

  guides/028_to_030_new_concepts
  guides/028_to_030_upgrade_guide

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
'''

snapshots['test_build_all_docs 12'] = '''Installation
=======================

Dagster is tested on Python 3.7.2, 3.6.6, 3.5.6, and 2.7.15. Python 3 is strongly
encouraged -- if you can, you won't regret making the switch!

Installing Python, pip, virtualenv, and yarn
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To check that Python and the pip package manager are already installed, you can run:

.. code-block:: console

    $ python --version
    $ pip --version

If you're running Python 3.3 or later, you already have the venv package for managing
virtualenvs. On Python 2.7, you can check whether you have the virtualenv tool installed by
running:

.. code-block:: console

    $ virtualenv --version

If these tools aren't present on your system, you can install them as follows:

On Ubuntu:

.. code-block:: console

    $ sudo apt update
    $ sudo apt install python3-dev python3-pip

And on Python 2.7:

.. code-block:: console

    $ sudo pip install -U virtualenv  # system-wide install

On OSX, using `Homebrew <https://brew.sh/>`_:

.. code-block:: console

    $ brew update
    $ brew install python  # Python 3

And on Python 2.7:

.. code-block:: console

    $ sudo pip install -U virtualenv  # system-wide install

On Windows (Python 3):
- Install the *Microsoft Visual C++ 2015 Redistributable Update 3*. This comes with 
*Visual Studio 2015* but can be installed separately as follows:

  1. Go to the Visual Studio downloads,
  2. Select *Redistributables and Build Tools*,
  3. Download and install the *Microsoft Visual C++ 2015 Redistributable Update 3*.

- Install the 64-bit Python 3 release for Windows (select ``pip`` as an optional feature).

To use the dagit tool, you will also need to
`install yarn <https://yarnpkg.com/lang/en/docs/install/>`_.

Creating a virtual environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We strongly recommend installing dagster inside a Python virtualenv. If you are
running Anaconda, you should install dagster inside a Conda environment.

To create a virtual environment on Python 3, you can just run:

.. code-block:: console

    $ python3 -m venv /path/to/new/virtual/environment

This will create a new Python environment whose interpreter and libraries
are isolated from those installed in other virtual environments, and
(by default) any libraries installed in a “system” Python installed as part
of your operating system.

On Python 2, you can use a tool like
`virtualenvwrapper <https://virtualenvwrapper.readthedocs.io/en/latest/>`_
to manage your virtual environments, or just run:

.. code-block:: console

    $ virtualenv /path/to/new/virtual/environment

You'll then need to 'activate' the virtualenvironment, in bash by
running:

.. code-block:: console

    $ source /path/to/new/virtual/environment/bin/activate

(For other shells, see the
`venv documentation <https://docs.python.org/3/library/venv.html#creating-virtual-environments>`_.)

If you are using Anaconda, you can run:

.. code-block:: console

    $ conda create --name myenv

And then, on OSX or Ubuntu:

.. code-block:: console

    $ source activate myenv

Or, on Windows:

.. code-block:: console

    $ activate myenv

Installing the stable version from PyPI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To install dagster and dagit, run:

.. code-block:: console

    $ pip install dagster
    $ pip install dagit

This will install the latest stable version of both packages.

Installing the dev version from source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To install the development version of the software, first clone the project
from Github:

.. code-block:: console

    $ git clone git@github.com:dagster-io/dagster.git

From the root of the repository, you can then run:

.. code-block:: console

    $ pip install -e python_packages/dagster && \\
      pushd python_packages/dagit/webapp && \\
      yarn install && \\
      yarn build && \\
      popd && \\
      pip install -e python_packages/dagit
'''

snapshots['test_build_all_docs 13'] = '''Principles
-----------
Dagster is opinionated about how data pipelines should be built and structured. What do we think
is important?

Functional
^^^^^^^^^^
Data pipelines should be expressed as DAGs (directed acyclic graphs) of functional, idempotent
computations. Individual nodes in the graph consume their inputs, perform some computation, and
yield outputs, either with no side effects or with clearly advertised side effects. Given the
same inputs and configuration, the computation should always produce the same output. If these 
computations have external dependencies, these should be parametrizable, so that the computations
may execute in different environments.

   * See Maxime Beauchemin's Medium article on `Functional Data Engineering <https://bit.ly/2LxDgnr>`_
     for an excellent overview of functional programing in batch computations.

Self-describing
^^^^^^^^^^^^^^^
Data pipelines should be self-describing, with rich metadata and types. Users should be able to
approach an unfamiliar pipeline and use tooling to inspect it and discover its structure,
capabilities, and requirements. Pipeline metadata should be co-located with the pipeline's actual
code: documentation and code should be delivered as a single artifact.

Compute-agnostic
^^^^^^^^^^^^^^^^
Heterogeneity in data pipelines is the norm, rather than the exception. Data pipelines are written
collaboratively by many people in different personas -- data engineers, machine-learning engineers,
data scientists, analysts and so on -- who have different needs and tools, and are particular about
those tools.

Dagster has opinions about best practices for structuring data pipelines. It has no opinions
about what libraries and engines should do actual compute. Dagster pipelines can be made up of
any Python computations, whether they use Pandas, Spark, or call out to SQL or any other DSL or
library deemed appropriate to the task.

Testable
^^^^^^^^
Testing data pipelines is notoriously difficult. Because testing is so difficult, it is often never
done, or done poorly. Dagster pipelines are designed to be tested. Dagster provides explicit support
for pipeline authors to manage and maintain multiple execution environments -- for example, unit
testing, integration testing, and production environments. Dagster can also execute arbitrary
subsets and nodes of pipelines, which is critical for testability (and useful in operational
contexts as well).

Verifiable data quality
^^^^^^^^^^^^^^^^^^^^^^^
Testing code is important in data pipelines, but it is not sufficient. Data quality tests -- run
during every meaningful stage of computation in production -- are critical to reduce the
maintenance burden of data pipelines. Pipeline authors generally do not have control over their
input data, and make many implicit assumptions about that data. Data formats can also change
over time. In order to control this entropy, Dagster encourages users to computationally verify
assumptions (known as expectations) about the data as part of the pipeline process. This way, when
those assumptions break, the breakage can be reported quickly, easily, and with rich metadata
and diagnostic information. These expectations can also serve as contracts between teams.

   * See https://bit.ly/2mxDS1R for a primer on pipeline tests for data quality.

Gradual, optional typing
^^^^^^^^^^^^^^^^^^^^^^^^
Dagster contains a type system to describe the values flowing through the pipeline and the
configuration of the pipeline. As pipelines mature, gradual typing lets nodes in a pipeline
know if they are properly arranged and configured prior to execution, and provides rich
documentation and runtime error checking.
'''

snapshots['test_build_all_docs 14'] = '''Decorators
===========================

.. currentmodule:: dagster

A more concise way to define solids.

.. autofunction:: lambda_solid

.. autofunction:: solid

.. autoclass:: MultipleResults
    :members:
'''

snapshots['test_build_all_docs 15'] = '''Definitions
===========================

.. currentmodule:: dagster

Core API for defining solids and pipelines.

.. autoclass:: DependencyDefinition
    :members:

.. autoclass:: ExpectationDefinition
    :members:

.. autoclass:: ExpectationResult
    :members:

.. autofunction:: Field

.. autoclass:: InputDefinition
    :members:

.. autoclass:: OutputDefinition
    :members:

.. autoclass:: PipelineContextDefinition
    :members:

.. autoclass:: PipelineDefinition
    :members:

.. autoclass:: RepositoryDefinition
    :members:

.. autoclass:: ResourceDefinition
    :members:

.. autoclass:: Result
    :members:

.. autoclass:: SolidDefinition
    :members:

.. autoclass:: SolidInstance
    :members:
'''

snapshots['test_build_all_docs 16'] = '''Errors
=========

.. currentmodule:: dagster

Core dagster error classes.

.. autoexception:: DagsterExpectationFailedError

.. autoexception:: DagsterInvalidDefinitionError

.. autoexception:: DagsterInvariantViolationError

.. autoexception:: DagsterRuntimeCoercionError

.. autoexception:: DagsterTypeError

.. autoexception:: DagsterUserCodeExecutionError

.. autoexception:: PipelineConfigEvaluationError
'''

snapshots['test_build_all_docs 17'] = '''Execution
=========

.. currentmodule:: dagster

Executing pipelines and solids.

.. autofunction:: execute_pipeline

.. autofunction:: execute_pipeline_iterator

.. autoclass:: ExecutionContext
   :members:

.. autoclass:: PipelineExecutionResult
   :members:

.. autoclass:: ExecutionMetadata
   :members:

.. autoclass:: SolidExecutionResult
   :members:
'''

snapshots['test_build_all_docs 18'] = '''Types
=========

.. module:: dagster

Dagster type system.

Type definitions
-----------------

.. autoclass:: Any

.. autofunction:: as_dagster_type

.. autoclass:: Bool

.. autofunction:: dagster_type

.. autoclass:: ConfigType

.. autofunction:: Dict

.. autofunction:: input_schema

.. autofunction:: input_selector_schema

.. autoclass:: Int

.. autofunction:: List

.. autofunction:: NamedDict

.. autofunction:: Nullable

.. autofunction:: output_schema

.. autofunction:: output_selector_schema

.. autoclass:: Path

.. autoclass:: PythonObjectType

.. autoclass:: RuntimeType

.. autoclass:: String
'''

snapshots['test_build_all_docs 19'] = '''Utilities
=========

.. currentmodule:: dagster

.. autofunction:: execute_solid

.. autofunction:: execute_solids
'''

snapshots['test_build_all_docs 20'] = """# New Concepts in 0.3.0

The upgrade guide describes the changes you are _require_ to make to install 0.3.0. This guide describes the changes you _should_ make in order to use the latest capabilities. The new concepts take some getting used to, but are quite powerful.

## Resources

In 0.2.0 the notion of resources were relatively informal. This is no longer true: They are now an officially supported abstraction. They break apart context creation into composable, reusable chunks of software.

**Defining a Resource**

Let's take a typical unittest context.

Before:

```py
def define_unittest_context():
    return PipelineContextDefinition(
        config_field=Field(
            Dict(
                {
                    'data_source_run_id' : _data_source_run_id_field(),
                    'conf' : _conf_field(),
                    'log_level' : _log_level_field(),
                    'cleanup_files' : _cleanup_field(),
                },
            )
        ),
        context_fn=create_fileload_unittest_context,
        description='''
Context for use in unit tests. It does not allow for any interaction with aws
or s3, and can only be used for a subset of the pipeline that can execute on a
local machine.

This context does not log to file and also has a configurable log_level.
        '''
    )

def create_fileload_unittest_context(info):
    data_source_run_id = info.config['data_source_run_id']
    log_level = level_from_string(info.config['log_level'])
    pipeline_run_id = str(uuid.uuid4())

    resources = FileloadResources(
        aws=None,
        redshift=None,
        bucket_path=None,
        local_fs=LocalFsHandleResource.for_pipeline_run(pipeline_run_id),
        sa=None,
        pipeline_guid=data_source_run_id)

    yield ExecutionContext(
        loggers=[define_colored_console_logger('dagster', log_level)],
        resources=resources,
        tags={
            'data_source_run_id': data_source_run_id,
            'data_source': 'new_data',
            'pipeline_run_id': pipeline_run_id,
        },
    )
```

That's quite the ball of wax for what should be relatively straightforward. And this doesn't even include the boilerplate `FileloadResources` class as well. We're going to break this apart using the `ResourceDefinition` abstraction and eliminate the need for that class.

The only real reusable resource here is the LocalFsHandleResource, so let's break that out into it's own `ResourceDefinition`.

```py
def define_local_fs_resource():
    def _create_resource(init_context):
        resource = LocalFsHandleResource.for_pipeline_run(init_context.run_id)
        yield resource
        if init_context.resource_config['cleanup_files']:
            LocalFsHandleResource.clean_up_dir(init_context.run_id)

    return ResourceDefinition(
        resource_fn=_create_resource,
        config_field=Field(
            Dict({'cleanup_files': Field(Bool, is_optional=True, default_value=True)})
        ),
    )
```

This is now a self-contained piece that can be reused in other contexts as well.

Aside: We now guarantee a system-generated run_id, so the manually created pipeline_guid resource is no longer relevant.

The rest of the "resources" in the unittesting context are None, and we have a special helper to create "none" resources.

Let's put it all together:

```py
def define_unittest_context():
    return PipelineContextDefinition(
        config_field=Field(Dict({
            'log_level' : _log_level_field(),
            'data_source_run_id': _data_source_run_id_field(),
        })),
        resources={
            'local_fs': define_local_fs_resource(),
            'aws': ResourceDefinition.none_resource(),
            'redshift': ResourceDefinition.none_resource(),
            'bucket_path': ResourceDefinition.none_resource(),
            'sa': ResourceDefinition.none_resource(),
        },
        context_fn=create_fileload_unittest_context,
        description='''
Context for use in unit tests. It does not allow for any interaction with aws
or s3, and can only be used for a subset of the pipeline that can execute on a
local machine.

This context does not log to file and also has a configurable log_level.
        '''
    )

def create_fileload_unittest_context(init_context):
    data_source_run_id = init_context.context_config['data_source_run_id']
    log_level = level_from_string(init_context.context_config['log_level'])

    yield ExecutionContext(
        loggers=[define_colored_console_logger('dagster', log_level)],
        tags={
            'data_source_run_id': data_source_run_id,
            'data_source': 'new_data',
        },
    )
```

Notice a few things. The bulk of the context creation function is now gone. Instead of having to manually create the `FileloadResources`, that is replaced by a class (a `namedtuple`) that is system-synthesized. Predictably it has N fields, one for each resource. The pipeline-code-facing API is the same, it just requires less boilerplate within the pipeline infrastructure.

**Configuring a Resource**

The configuration schema changes, as each resource has it's own section.

Before:

```py
environment = {
    'context':{
        'unittest' : {
            'config' : {
                'data_source_run_id': str(uuid.uuid4()),
                'conf': CONF,
                'log_level': 'ERROR',
                'cleanup_files': False,
            }
        }
    },
    'solids': {
        'unzip_file': {
            'config' : {
                'zipped_file': ZIP_FILE_PATH,
            }
        }
    }
}
```

In particular we need to move `cleanup_files` to a resource section of the config.

```py
environment = {
    'context':{
        'unittest' : {
            'config' : {
                'data_source_run_id': str(uuid.uuid4()),
                'log_level': 'ERROR',
            },
            'resources' : {
                'local_fs': {
                    'config' : {
                        'cleanup_files': False,
                    }
                }
            }
        }
    },
    'solids': {
        'unzip_file': {
            'config' : {
                'zipped_file': ZIP_FILE_PATH,
            }
        }
    }
}
```

While slightly more verbose, you will be able to count on more consistent of configuration between pipelines as you reuse resources, and you an even potentially share resource configuration _between_ pipelines using the configuration file merging feature of 0.3.0

## Resource Libraries

The real promise of resources to build a library of resuable, composable resources.

For example, here would be a resource to create a redshift connection.

```py
def define_redshift_sa_resource():
    def _create_resource(init_context):
        user = init_context.resource_config['user']
        password = init_context.resource_config['password']
        host = init_context.resource_config['host']
        port = init_context.resource_config['port']
        dbname = init_context.resource_config['dbname']
        return sa.create_engine(f'postgresql://{user}:{password}@{host}:{port}/{dbname}')

    return ResourceDefinition(
        resource_fn=_create_resource,
        config_field=Field(
            Dict(
                {
                    'user' : Field(String),
                    'password' : Field(String),
                    'host' : Field(String),
                    'port' : Field(Int),
                    'dbname' : Field(String),
                }
            )
        )
    )
```

This could be used -- unmodified -- across all your pipelines. This will also make it easier to write reusable solids as they can know that they will be using the same resource. Indeed, we may formalize this in subsequent releases, allowing solids to formally declare their dependencies on specific resource types.

## Solid-Level Configs to Inputs

With the new ability to source inputs from the environment config files, we anticipate that solid-level configuration will become much less common, and instead that we will uses inputs and outputs exclusively.

Let's use another example from the a typical fileload pipeline.

Before:

```py
@solid(
    name='unzip_file',
    inputs=[],
    outputs=[OutputDefinition(dagster_type=DagsterTypes.PathToFile)],
    description='''
This takes a single, pre-existing zip folder with a single file and unzips it,
and then outputs the path to that file.
''',
    config_def=ConfigDefinition(
        types.ConfigDictionary('UnzipFileConfig', {'zipped_file' : Field(types.Path)}),
    ),
)
def unzip_file(info):
    context = info.context
    zipped_file = info.config['zipped_file']
```

You'll note that in 0.2.8 we have to model the incoming zipped file as config rather than an input because `unzip_file` had no upstream dependencies and inputs
had to come from previous solids. In 0.3.0 this is no longer true. Inputs
can be sourced from the config file now, which means that by default you should
be modeling such things as inputs.

After:

```py
@solid(
    name='unzip_file',
    inputs=[InputDefinition('zipped_file', Path)],
    outputs=[OutputDefinition(Path)],
    description='''
This takes a single, pre-existing zip folder with a single file and unzips it,
and then outputs the path to that file.
''',
)
def unzip_file(context, zipped_file):
    # ...
    pass
```

In order to invoke a pipeline that contains this solid, you need to satisy this input in the environment config.

Before:

```py
    environment = {
        # .. context section omitted
        'solids': {
            'unzip_file': {
                'config' : {
                    'zipped_file': ZIP_FILE_PATH,
                }
            }
        }
    }
```

After:

```py
    environment = {
        # .. context section omitted
        'solids': {
            'unzip_file': {
                'inputs' : {
                    'zipped_file': ZIP_FILE_PATH,
                }
            }
        }
    }
```

What's great about this new input structure is that now the unzip_file is more reusable as it could be reused in the middle of a pipeline with its input coming from a previous solid, or as a solid at the beginning of a pipeline.
"""

snapshots['test_build_all_docs 21'] = """# Upgrading to 0.3.0

This guide is a step-by-step guide for upgrading from dagster 0.2.x to 0.3.0. This represents a substantial upgrade in capabilities but also some breaking API changes. We'll detail them, provide context and reasoning, and instructions about how to upgrade.

## Required API Changes

1. **No more top level config subpackage.**

Error:

```
from dagster import (
ImportError: cannot import name 'config'
```

We have eliminated the public-facing "config" namespace. (You use raw dictionaries instead of a parallel, typed API to configure pipeline runs).

Fix: Simply eliminate the include. You'll run into related errors later.

2. **No more dagster.sqlalchemy and dagster.pandas submodules**.

Error:

```
E   ModuleNotFoundError: No module named 'dagster.sqlalchemy'
```

We have moved pandas and sqlalchemy code into their own separate modules (dagster-pandas and dagster-sqlalchemy). This makes the core dagster library have less dependencies.

Fix: Instead of importing `dagster.sqlalchemy` you need to `pip install dagster-sqlalchemy`, add it to your virtual env, and then include `dagster_sqlalchemy` instead.

3. **ConfigDefinition no longer exists.**

Error:

```
ImportError: cannot import name 'ConfigDefinition'
```

We have eliminated a separate notion of a ConfigDefinition. Instead, we realized the user provided config in a solid, resource, or context is just a `Field` that you would use to build a `Dict` or `Selector`. So replace `ConfigDefinition` with Field. (Generally `config_def=ConfigDefinition` is now `config_field=Field`)

Before:

```py
"production": PipelineContextDefinition(
    context_fn=generate_production_execution_context,
    config_def=ConfigDefinition(
        # ...
    )
```

After:

```py
"production": PipelineContextDefinition(
    context_fn=generate_production_execution_context,
    config_field=Field(
       # ...
    )

```

4. **New, Simpler Dagster Type Definition API.**

Error:

```
    description='''This represents a path to a file on disk'''
E   TypeError: __init__() got multiple values for argument 'python_type'
```

Another Error:

```
E   dagster.check.ParameterCheckError: Param "klass" was supposed to be a type. Got <dagster.core.types.runtime.PythonObjectType object at 0x11e4fbf60> instead of type <class \'dagster.core.types.runtime.PythonObjectType\'>
```

There are now two different type creation APIs. One for _creating_ new types, and one for _annotating_ existing types that you include.

Examples:

```py
@dagster_type(description='This represents a path to a file on disk')
class PathToFile(str):
    pass

S3FileHandle = as_dagster_type(
    namedtuple('S3FileHandle', 'bucket path'),
    description='''
upload_header_to_s3 and upload_service_line_to_s3 both result in files
being uploaded to s3. Hence the "output" of those two solids is a handle
to a file. The following stages take those as their inputs to create
redshift tables out of them.

Properties:
    - bucket: String
    - path: String
        '''
)
```

Note you can use S3FileHandle and PathToFile as if they were just "normal types" as well.

5. **ConfigDictionary --> Dict**

We have a much less verbose API for building configuration schema:

Error:

```
E   AttributeError: module 'dagster.core.types' has no attribute 'ConfigDictionary
```

First, we can discouraging the use of the `types` namespace. Instead just `from dagster import Dict` (or whatever class directly).
Second, `ConfigDictionary` is now just `Dict`.
Third, you do not have to name it. The net result is much nicer:

Before:

```py
types.ConfigDictionary(
    'DefaultContextConfig',
    {
        'data_source_run_id' : Field(types.String, description='''
            This is a run id generated by the caller of this pipeline. Right
            now this is required to tie a single run id to multiple executions
            of the same pipeline.
        '''),
        'conf' : Field(types.Any),
    },
)
```

After:

```py
Dict({
    'data_source_run_id' : Field(String, description='''
        This is a run id generated by the caller of this pipeline. Right
        now this is required to tie a single run id to multiple executions
        of the same pipeline.
    '''),
    'conf' : Field(Any),
})
```

This is a fairly mechanical transition.

6. **define_stub_solid no longer in top-level dagster**

This is now an internal utility function. If you really, really need it:

`from dagster.core.utility_solids import define_stub_solid`

7. **Environments are raw dictionaries rather that config.\\* classes**

Per update 1 config classes no longer are public or used in the execute_pipeline family of APIs. Use raw dictionaries instead. They should be shaped **exactly** like the yaml files.

Before:

```py
    environment = config.Environment(
        context=config.Context(
            name='unittest',
            config={
                'data_source_run_id': str(uuid.uuid4()),
                'conf': CONF,
                'log_level': 'ERROR',
                'cleanup_files': False,
            }
        ),
        solids={
            'unzip_file': config.Solid({
                'zipped_file': ZIP_FILE_PATH
            }),
        },
    )
```

After:

```py
    environment = {
        'context':{
            'unittest' : {
                'config' : {
                    'data_source_run_id': str(uuid.uuid4()),
                    'conf': CONF,
                    'log_level': 'ERROR',
                    'cleanup_files': False,
                }
            }
        },
        'solids': {
            'unzip_file': {
                'config' : {
                    'zipped_file': ZIP_FILE_PATH,
                }
            }
        }
    }
```

While providing less guarantees within the python type system, this API results in very high quality error checking and messaging from the dagster config schema.

8. **New testing APIs**

Error:

```
 AttributeError: type object 'PipelineDefinition' has no attribute 'create_sub_pipeline'
```

or

```
AttributeError: type object 'PipelineDefinition' has no attribute 'create_single_solid_pipeline'
```

The creation of "sub" and "single_solid" pipelines was awkward and error-prone. Instead we have the new functions `execute_solid` and `execute_solids`. You can now execute a single solid with a single function call.

Before:

```py
    pipeline = PipelineDefinition.create_single_solid_pipeline(
        define_fileload_pipeline(),
        'unzip_file',
    )

    result = execute_pipeline(pipeline, environment)

    assert result.success
    assert os.path.exists(
        result.result_for_solid('unzip_file').transformed_value())
```

After:

```py
    solid_result = execute_solid(
        define_fileload_pipeline(),
        'unzip_file',
        environment=environment
    )

    assert solid_result.success
    assert os.path.exists(solid_result.transformed_value())
```

Before (with stubbed inputs):

```py
    pipeline = PipelineDefinition.create_single_solid_pipeline(
        define_fileload_pipeline(),
        'split_headers_and_service_lines',
        {
            'split_headers_and_service_lines': {
                'unzipped_file':
                define_stub_solid('unzipped_path_value', unzipped_path)
            }
        },
    )

    result = execute_pipeline(pipeline, environment)

    assert result.success
    solid_result = result.result_for_solid('split_headers_and_service_lines')
    assert os.path.exists(solid_result.transformed_value('header_file'))
    assert os.path.exists(solid_result.transformed_value('service_lines_file'))
```

After (with stubbed inputs):

```py
    solid_result = execute_solid(
        define_fileload_pipeline(),
        'split_headers_and_service_lines',
        inputs={
            'unzipped_file': unzipped_path,
        },
        environment=environment,
    )

    assert os.path.exists(solid_result.transformed_value('header_file'))
    assert os.path.exists(solid_result.transformed_value('service_lines_file'))
```

Before (subset execution):

```py
    pipeline = PipelineDefinition.create_sub_pipeline(
        define_fileload_pipeline(),
        ['unzip_file'],
        ['split_headers_and_service_lines'],
        {},
    )

    result = execute_pipeline(pipeline, environment)


    assert result.success
    solid_result = result.result_for_solid('split_headers_and_service_lines')
    snapshot_check_results(snapshot, solid_result)
```

After (subset execution):

```py
    result_dict = execute_solids(
        define_pipeline(),
        ['unzip_file', 'split_headers_and_service_lines'],
        environment=environment,
    )

    snapshot_check_results(snapshot, result_dict['split_headers_and_service_lines'])
```

9. **Execution Context Lifecycle Changes**

Error:

```
AttributeError: 'ExecutionContext' object has no attribute 'value'
```

This is officially the most difficult change, conceptually. We changed the system so that the `ExecutionContext` passed around to your solids (now `RuntimeExecutionContext`) is constructed by the system rather than the user. The `ExecutionContext` object the user creates can be thought of as `RuntimeExecutionContextParams`. We opted against that name because it was excessively verbose.

Before:

```py
    with context.value('data_source_run_id', data_source_run_id),\\
        context.value('data_source', 'new_data'),\\
        context.value('pipeline_run_id', pipeline_run_id):

        yield ExecutionContext(
            loggers=[define_colored_console_logger('dagster', log_level)],
            resources=resources
        )
```

After:

```py
    yield ExecutionContext(
        loggers=[define_colored_console_logger('dagster', log_level)],
        resources=resources,
        tags={
            'data_source_run_id': data_source_run_id,
            'data_source': 'new_data',
            'pipeline_run_id': pipeline_run_id,
        },
    )

```

10. **Non-null by default**

Error:

```
E   dagster.core.errors.DagsterTypeError: Solid solid_name input input_name received value None which does not pass the typecheck for Dagster type PandasDataFrame. Step solid_name.transform
```

You have encountered a type error. Likely it is because in 0.2.8, types could
accept None by default, and this is no longer true in 0.3.0. You have to opt into accepting nulls.

Before:

```py
@solid(outputs=[OutputDefinition(dagster_type=dagster_pd.DataFrame)])
def return_none(context):
    return None # None no longer allowed, would break at runtime
```

After

```py
@solid(outputs=[OutputDefinition(dagster_type=Nullable(dagster_pd.DataFrame))])
def return_none(context):
    return None # Because of Nullable wrapper, this is ok
```
"""

snapshots['test_build_all_docs 22'] = '''An actual DAG
-------------

Next we will build a slightly more topologically complex DAG that demonstrates how dagster
determines the execution order of solids in a pipeline:

.. image:: actual_dag_figure_one.png

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/actual_dag.py
   :linenos:
   :caption: actual_dag.py

Again, it is worth noting how we are connecting *inputs* and *outputs* rather than just *tasks*.
Point your attention to the ``solid_d`` entry in the dependencies dictionary: we declare
dependencies on a per-input basis.

When you execute this example, you'll see that ``solid_a`` executes first, then ``solid_b`` and
``solid_c`` -- in any order -- and ``solid_d`` executes last, after ``solid_b`` and ``solid_c``
have both executed.

In more sophisticated execution environments, ``solid_b`` and ``solid_c`` could execute not just
in any order, but at the same time, since their inputs don't depend on each other's outputs --
but both would still have to execute after ``solid_a`` (because they depend on its output to
satisfy their inputs) and before ``solid_d`` (because their outputs in turn are depended on by
the input of ``solid_d``).

Try it in dagit or from the command line:

.. code-block:: console

   $ dagster pipeline execute -f actual_dag.py -n define_diamond_dag_pipeline

What's the output of this DAG?

We've seen how to wire solids together into DAGs. Now let's look more deeply at their
:doc:`Inputs <inputs>`, and start to explore how solids can interact with their external
environment.
'''

snapshots['test_build_all_docs 23'] = '''Configuration
-------------
For maximum flexibility, testability, and reusability, we want to avoid hardcoding solids'
(or pipelines') dependencies on the external world.

We should be able to run the same code in different environments for test, in development, and in
production, and to parametrize our solids' interactions with the different facilities afforded by
each of those environments.

Then, we can declaratively specify features of our environment without having to rewrite our code.

Conceptually, where **inputs** are inputs to the computation done by a single solid, and might be
linked by a dependency definition to **outputs** of a previous computation in a DAG,
**configuration** should be used to specify *how* a computation executes.

We'll illustrate this by configuring our hello world example to speak a couple of different
languages.

This time, we'll use a more fully-featured API to define our solid -- 
:py:func:`@solid <dagster.solid>` instead of :py:func:`@lambda_solid <dagster.lambda_solid>`.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/config.py
   :linenos:
   :caption: config.py

We will be exploring the :py:func:`@solid <dagster.solid>` API in much more detail as this tutorial
proceeds. For now, the salient differences are:

1. The :py:func:`@solid <dagster.solid>` API takes an additional parameter, `config_field`, which
   defines the structure and type of configuration values that can be set on each execution of the
   solid. This parameter should be a :py:func:`Field <dagster.Field>`, which tells the dagster
   machinery how to translate config values into runtime values available to the solid.
2. The function annotated by the :py:func:`@solid <dagster.solid>` API receives an additional first
   parameter, ``context``, of type :py:class:`TransformExecutionContext <dagster.TransformExecutionContext>`.
   The configuration passed into each solid is available to the annotated function as ``context.solid_config``.

Configuration values are passed in a dict as the second argument to
:py:func:`execute_pipeline <dagster.execute_pipeline>`. This dict specifies *all* of the
configuration to execute an entire pipeline. It may have many sections, but we're only
using one of them here: per-solid configuration specified under the key ``solids``.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/config.py
   :lines: 28
   :dedent: 8

The ``solids`` dict is keyed by solid name, and each of its values in turn defines a ``config``
key corresponding to the user-defined configuration schema for each particular solid (which we set
before using the ``config_field`` parameter). If these values don't match the user-defined schema,
we'll get a helpful error message.

In this case, we've defined a single scalar string value as config.

Let's see how to run this pipeline, with config, from the command line. In order to do this you 
must provide config in the form of a yaml file:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/config_env.yml
   :linenos:
   :caption: config_env.yml

Now you can run this pipeline with this config file like so:

.. code-block:: console

   $ dagster pipeline execute -f config.py \\
   -n define_configurable_hello_pipeline -e config_env.yml

To run this example from dagit, use the following command:

.. code-block:: console

   $ dagit -f config.py -n define_configurable_hello_pipeline

Just as with configurable inputs, you can edit the configuration on the fly in dagit's built-in
config editor. Try switching languages and rerunning the pipeline!

.. image:: config_figure_one.png

Next, we'll learn about configuration schemas and how the type system can help with the management
of config: :doc:`Configuration Schemas <configuration_schemas>`.
'''

snapshots['test_build_all_docs 24'] = '''Configuration Schemas
---------------------

Dagster includes a system for strongly-typed, self-describing configurations schemas. These
descriptions are very helpful when learning how to operate a pipeline, make a rich configuration
editing experience possible, and help to catch configuration errors before pipeline execution. 

Let's see how the configuration schema can prevent errors and improve pipeline documentation.
We'll replace the config field in our solid definition with a structured, strongly typed schema.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/configuration_schemas.py
   :linenos:
   :caption: configuration_schemas.py

The previous env.yml file works as before:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/configuration_schemas.yml
   :linenos:
   :caption: configuration_schemas.yml

Now let's imagine we made a mistake and passed a ``string`` in our configuration:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/configuration_schemas_runtime_error.yml
   :linenos:
   :emphasize-lines: 12
   :caption: configuration_schemas_runtime_error.yml

And then ran it:

.. code-block:: console

    $ dagster pipeline execute -f configuration_schemas.py \\
    -n define_demo_configuration_schema_repo \\
    demo_configuration_schema \\
    -e configuration_schemas_runtime_error.yml
    ...
    File "configuration_schemas.py", line 21, in multiply_the_word
        return word * info.config['factor']
    TypeError: can't multiply sequence by non-int of type 'str'

This pipeline is not typechecked and therefore error is caught at runtime. It would be preferable
to catch this before execution.

In order to do that, let us use the typed config solid.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/configuration_schemas_type_mismatch_error.yml
   :linenos:
   :emphasize-lines: 12
   :caption: configuration_schemas_runtime_error.yml

And then run the pipeline

.. code-block:: console

    $ dagster pipeline execute -f configuration_schemas.py \\
    -n define_demo_configuration_schema_repo \\
    typed_demo_configuration_schema \\
    -e configuration_schemas_type_mismatch_error.yml

And you'll get a nice error *prior* to execution:

.. code-block:: console

    dagster.core.execution.PipelineConfigEvaluationError:
    Pipeline "typed_demo_configuration_schema" config errors:
    Error 1: Type failure at path
    "root:solids:typed_multiply_the_word:config:factor" on type
    "Int". Got "\'not_a_number\'". Value not_a_number is not
    valid for type Int.


Now, instead of a runtime failure which might arise deep inside a time-consuming or expensive
pipeline execution, and which might be tedious to trace back to its root cause, we get a clear,
actionable error message before the pipeline is ever executed.

Let's see what happens if we pass config with the wrong structure:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/configuration_schemas_wrong_field.yml
   :linenos:
   :emphasize-lines: 9 
   :caption: configuration_schemas_wrong_field.yml

And then run the pipeline:

.. code-block:: console

    $ dagster pipeline execute -f configuration_schemas.py \\
    -n define_demo_configuration_schema_pipeline -e configuration_schemas_wrong_field.yml
    ...
    dagster.core.execution.PipelineConfigEvaluationError: Pipeline "demo_configuration_schema" config errors:
        Error 1: Undefined field "multiply_the_word_with_typed_config" at path root:solids
        Error 2: Missing required field "multiply_the_word" at path root:solids

Next, we'll see how to use the  :doc:`Execution Context <execution_context>` to further configure
how pipeline execution interacts with its environment.
'''

snapshots['test_build_all_docs 25'] = '''Execution Context
=================

One of the most important objects in the system is the execution context. The execution
context, the logger, and the resources are threaded throughout the entire computation (
via the ``context`` object passed to user code) and contains handles to logging facilities
and external resources. Interactions with logging systems, databases, and external
clusters (e.g. a Spark cluster) should be managed through these properties of the 
info object.

This provides a powerful layer of indirection that allows a solid to abstract
away its surrounding environment. Using an execution context allows the system and
pipeline infrastructure to provide different implementations for different
environments, giving the engineer the opportunity to design pipelines that
can be executed on your local machine or your CI/CD pipeline as readily as
your production cluster environment.

Logging
~~~~~~~

One of the most basic pipeline-level facilities is logging.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/execution_context.py
   :lines: 1-16
   :caption: execution_context.py

Run this example pipeline in dagit:

.. code-block:: console

    $ dagster pipeline execute -m dagster.tutorials.intro_tutorial.tutorial_repository -n define_repository execution_context_pipeline 

And you'll notice log messages like this:

.. code-block:: console

    2019-01-15 04:59:37 - dagster - ERROR - orig_message="An error occurred." log_message_id="b0cbb1be-e476-4a4e-aaac-a29ddb15309a" run_id="d8f41da0-3825-4ac0-b8e0-4f38ba45b8e0" pipeline="execution_context_pipeline" solid="error_message" solid_definition="error_message"

These log messages are annonated with a bunch of key value pairs that indicate where in the
computation each log message was emitted. This happened because we logged through the execution
context.

Notice that even though the user only logged the message "An error occurred", by routing logging
through the context we are able to provide richer error information -- including the name of the
solid and a timestamp -- in a semi-structured format.

You'll notice that `'A debug message.'` does not appear in the execution logs. This
is because the default log level is ``INFO``, so debug-level messages will not appear.

Let's change that by specifying some config.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/execution_context.yml
   :language: YAML
   :linenos:
   :caption: execution_context.yml

Save it as execution_context.yml and then run:

.. code-block:: console

    $ dagster pipeline execute  \\
    -m dagster.tutorials.intro_tutorial.tutorial_repository \\
    -n define_repository execution_context_pipeline \\
    -e execution_context.yml

You'll see now that debug messages print out to the console.

Although logging is a universally useful case for the execution context, this example only touches
on the capabilities of the context. Any pipeline-level facilities that pipeline authors might want
to make configurable for different environments -- for instance, access to file systems, databases,
or compute substrates -- can be configured using the context.

We'll see how to use some of these other capabilities in the next section:
:doc:`Resources <resources>`.
'''

snapshots['test_build_all_docs 26'] = '''Expectations
============

Dagster has a first-class concept to capture data quality tests. We call these
data quality tests expectations.

Data pipelines have the property that they typically do not control
what data they ingest. Unlike a traditional application where you can
prevent users from entering malformed data, data pipelines do not have
that option. When unexpected data enters a pipeline and causes a software
error, typically the only recourse is to update your code. 

Lying within the code of data pipelines are a whole host of implicit
assumptions about the nature of the data. One way to frame the goal of
expectations is to say that they make those implict assumption explicit.
And by making these a first class concept they can be described with metadata,
inspected, and configured to run in different ways.

You'll note the new concept of expecatations.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/expectations.py
   :linenos:
   :caption: expectations.py
   :emphasize-lines: 17-24

At its core, an expectation is a function applied to either an input or an output.
Generally anywhere there is a type, you can apply an expectation. This function
can be as sophisticated as the user wants, anywhere from a simple null check to
checking thresholds of distrbutions or querying lookup tables.


If you run this pipeline, you'll notice some logging that indicates that the expectation
was processed

We'll use this config file.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/expectations_pass.yml
   :linenos:
   :caption: expectations_pass.yml

And then run:

.. code-block:: console

    $ dagster pipeline execute -f expectations.py \\
    -n define_expectations_tutorial_pipeline -e \\
    expectations_pass.yml

In that execution you'll notice a passing expectation:

.. code-block:: console

    2019-01-15 13:04:17 - dagster - INFO - orig_message="Execution of add_ints.output.num_one.expectation.check_positive succeeded in 0.06198883056640625" log_message_id="e903e121-e529-42ff-9561-b17dea553fba" run_id="71affcec-1c10-4a8b-9416-10115a01783f" pipeline="expectations_tutorial_pipeline" solid="add_ints" solid_definition="add_ints" event_type="EXECUTION_PLAN_STEP_SUCCESS" millis=0.06198883056640625 step_key="add_ints.output.num_one.expectation.check_positive"

Now let's make this fail. Currently the default behavior is to throw an error and halt execution
when an expectation fails. So:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/expectations_fail.yml
   :linenos:
   :caption: expectations_fail.yml

And then:

.. code-block:: sh

    $ dagster pipeline execute -f expectations.py \\
    -n define_expectations_tutorial_pipeline \\
    -e expectations_fail.yml

    dagster.core.errors.DagsterExpectationFailedError: 
    DagsterExpectationFailedError(solid=add_ints, 
    output=num_one, expectation=check_positive 
    value=-2)


Because the system is explictly aware of these expectations they are viewable in tools like dagit.
It can also configure the execution of these expectations. The capabilities of this aspect of the
system are currently quite immature, but we expect to develop these more in the future. The only
feature right now is the ability to skip expectations entirely. This is useful in a case where
expectations are expensive and you have a time-critical job you must. In that case you can
configure the pipeline to skip expectations entirely.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/expectations_skip_failed.yml
   :linenos:
   :caption: expectations_skip_fail.yml

.. code-block:: sh

    $ dagster pipeline execute -f expectations.py \\
    -n define_expectations_tutorial_pipeline \\
    -e expectations_skip_failed.yml

'''

snapshots['test_build_all_docs 27'] = '''Hello, DAG
----------
One of the core capabitilies of dagster is the ability to express data pipelines as arbitrary
directed acyclic graphs (DAGs) of solids.

We'll define a very simple two-solid pipeline whose first solid returns a hardcoded string,
and whose second solid concatenates two copies of its input. The output of the pipeline should be
two concatenated copies of the hardcoded string.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/hello_dag.py
   :linenos:
   :caption: hello_dag.py

This pipeline introduces a few new concepts.

1.  Solids can have **inputs** defined by instances of
    :py:class:`InputDefinition <dagster.InputDefinition>`. Inputs allow us to connect solids to
    each other, and give dagster information about solids' dependencies on each other (and, as
    we'll see later, optionally let dagster check the types of the inputs at runtime).

2.  Solids' **dependencies** on each other are expressed by instances of 
    :py:class:`DependencyDefinition <dagster.DependencyDefinition>`.
    You'll notice the new argument to :py:class:`PipelineDefinition <dagster.PipelineDefinition>`
    called ``dependencies``, which is a dict that defines the connections between solids in a
    pipeline's DAG.

    .. literalinclude::  ../../dagster/tutorials/intro_tutorial/hello_dag.py
       :lines: 23-25
       :dedent: 8

    The first layer of keys in this dict are the *names* of solids in the pipeline. The second layer
    of keys are the *names* of the inputs to each solid. Each input in the DAG must be provided a
    :py:class:`DependencyDefinition <dagster.DependencyDefinition>`. (Don't worry -- if you forget
    to specify an input, a helpful error message will tell you what you missed.)
    
    In this case the dictionary encodes the fact that the input ``arg_one`` of solid ``solid_two``
    should flow from the output of ``solid_one``.

Let's visualize the DAG we've just defined in dagit.

.. code-block:: console

   $ dagit -f hello_dag.py -n define_hello_dag_pipeline

Navigate to http://127.0.0.1:3000/hello_dag_pipeline/explore or choose the hello_dag_pipeline
from the dropdown:

.. image:: hello_dag_figure_one.png

One of the distinguishing features of dagster that separates it from many workflow engines is that
dependencies connect *inputs* and *outputs* rather than just *tasks*. An author of a dagster
pipeline defines the flow of execution by defining the flow of *data* within that
execution. This is core to the programming model of dagster, where each step in the pipeline
-- the solid -- is a *functional* unit of computation. 

Now run the pipeline we've just defined, either from dagit or from the command line:

.. code-block:: console

\t$ dagster pipeline execute -f hello_dag.py -n define_hello_dag_pipeline

In the next section, :doc:`An actual DAG <actual_dag>`, we'll build our first DAG with interesting
topology and see how dagster determines the execution order of a pipeline.
'''

snapshots['test_build_all_docs 28'] = '''Hello, World
------------
See :doc:`../installation` for instructions installing dagster (the core library) and dagit (the
web UI tool used to visualize your data pipelines) on your platform of choice.

Let's write our first pipeline and save it as ``hello_world.py``.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/hello_world.py
   :linenos:
   :lines: 1-12
   :caption: hello_world.py

This example introduces three concepts:

1.  A **solid** is a functional unit of computation in a data pipeline. In this example, we use the
    decorator :py:func:`@lambda_solid <dagster.lambda_solid>` to mark the function ``hello_world``
    as a solid: a functional unit which takes no inputs and returns the output ``'hello'`` every
    time it's run.

2.  A **pipeline** is a set of solids arranged into a DAG of computation that produces data assets.
    In this example, the call to :py:class:`PipelineDefinition <dagster.PipelineDefinition>` defines
    a pipeline with a single solid.

3.  We **execute** the pipeline by running :py:func:`execute_pipeline <dagster.execute_pipeline>`.
    Dagster will call into each solid in the pipeline, functionally transforming its inputs, if any,
    and threading its outputs to solids further on in the DAG.

Pipeline Execution
^^^^^^^^^^^^^^^^^^

Assuming you've saved this pipeline as ``hello_world.py``, we can execute it via any of three
different mechanisms:

1. The CLI utility `dagster`
2. The GUI tool `dagit`
3. Using dagster as a library within your own script.

CLI
~~~

.. code-block:: console

    $ dagster pipeline execute -f hello_world.py -n define_hello_world_pipeline
    2019-01-08 11:23:57 - dagster - INFO - orig_message="Beginning execution of pipeline hello_world_pipeline" log_message_id="5c829421-06c7-49eb-9195-7e828e37eab8" run_id="dfc8165a-f37e-43f5-a801-b602e4409f74" pipeline="hello_world_pipeline" event_type="PIPELINE_START"
    2019-01-08 11:23:57 - dagster - INFO - orig_message="Beginning execution of hello_world.transform" log_message_id="5878513a-b510-4837-88cb-f77205931abb" run_id="dfc8165a-f37e-43f5-a801-b602e4409f74" pipeline="hello_world_pipeline" solid="hello_world" solid_definition="hello_world" event_type="EXECUTION_PLAN_STEP_START" step_key="hello_world.transform"
    2019-01-08 11:23:57 - dagster - INFO - orig_message="Solid hello_world emitted output \\"result\\" value \'hello\'" log_message_id="b27fb70a-744a-46cc-81ba-677247b1b07b" run_id="dfc8165a-f37e-43f5-a801-b602e4409f74" pipeline="hello_world_pipeline" solid="hello_world" solid_definition="hello_world"
    2019-01-08 11:23:57 - dagster - INFO - orig_message="Execution of hello_world.transform succeeded in 0.9558200836181641" log_message_id="25faadf5-b5a8-4251-b85c-dea6d00d99f0" run_id="dfc8165a-f37e-43f5-a801-b602e4409f74" pipeline="hello_world_pipeline" solid="hello_world" solid_definition="hello_world" event_type="EXECUTION_PLAN_STEP_SUCCESS" millis=0.9558200836181641 step_key="hello_world.transform"
    2019-01-08 11:23:57 - dagster - INFO - orig_message="Step hello_world.transform emitted \'hello\' for output result" log_message_id="604dc47c-fe29-4d71-a531-97ae58fda0f4" run_id="dfc8165a-f37e-43f5-a801-b602e4409f74" pipeline="hello_world_pipeline"
    2019-01-08 11:23:57 - dagster - INFO - orig_message="Completing successful execution of pipeline hello_world_pipeline" log_message_id="1563854b-758f-4ae2-8399-cb75946b0055" run_id="dfc8165a-f37e-43f5-a801-b602e4409f74" pipeline="hello_world_pipeline" event_type="PIPELINE_SUCCESS"

There's a lot of information in these log lines (we'll get to how you can use, and customize,
them later), but you can see that the third message is:
``Solid hello_world emitted output \\"result\\" value \'hello\'``. Success!

Dagit
~~~~~

To visualize your pipeline (which only has one node) in dagit, you can run:

.. code-block:: console

   $ dagit -f hello_world.py -n define_hello_world_pipeline
   Serving on http://127.0.0.1:3000

You should be able to navigate to http://127.0.0.1:3000/hello_world_pipeline/explore in your web
browser and view your pipeline.

.. image:: hello_world_figure_one.png

There are lots of ways to execute dagster pipelines. If you navigate to the "Execute"
tab (http://127.0.0.1:3000/hello_world_pipeline/execute), you can execute your pipeline directly
from dagit. Logs will stream into the bottom right pane of the interface, where you can filter them
by log level.

.. image:: hello_world_figure_two.png

Library
~~~~~~~

If you'd rather execute your pipelines as a script, you can do that without using the dagster CLI
at all. Just add a few lines to `hello_world.py` (highlighted in yellow):

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/hello_world.py
   :linenos:
   :caption: hello_world.py
   :emphasize-lines: 15-17

Then you can just run:

.. code-block:: console

    $ python hello_world.py

Next, let's build our first multi-solid DAG in :doc:`Hello, DAG <hello_dag>`!
'''

snapshots['test_build_all_docs 29'] = '''Inputs
------
So far we have only demonstrated pipelines whose solids yield hardcoded values and then flow them
through the pipeline. In order to be useful a pipeline must also interact with its external
environment.

Let's return to our hello world example. But this time, we'll make the string
the solid returns be parameterized based on inputs.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/inputs.py
   :lines: 1-17
   :linenos:
   :caption: inputs.py

Note that the input ``word`` to solid ``add_hello_to_word`` has no dependency specified. This
means that the operator of the pipeline must specify the input at pipeline execution
time.

Recall that there are three primary ways to execute a pipeline: using the python API, from 
the command line, and from dagit. We'll go through each of these and see how to specify the input
in each case.

Python API
~~~~~~~~~~
In the Python API, pipeline configuration is specified in the second argument to
:py:func:`execute_pipeline <dagster.execute_pipeline>`, which must be a dict. This dict contains
*all* of the configuration to execute an entire pipeline. It may have many sections, but we'll only
use one of them here: per-solid configuration specified under the key ``solids``:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/inputs.py
    :linenos:
    :lines: 25,27,29-31
    :dedent: 8 

The ``solids`` dict is keyed by solid name, and each solid is configured by a dict that may have
several sections of its own. In this case we are only interested in the ``inputs`` section, so
that we can specify that value of the input ``word``.

The function ``execute_with_another_world`` demonstrates how one would invoke this pipeline
using the python API:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/inputs.py
    :linenos:
    :lines: 20-22,25,27,29-32

CLI
~~~

Next let's use the CLI. In order to do that we'll need to provide the environment
information via a config file. We'll use the same values as before, but in the form
of YAML rather than python dictionaries:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/inputs_env.yml
   :language: YAML
   :linenos:
   :caption: inputs_env.yml

And now specify that config file via the ``-e`` flag.

.. code-block:: console

    $ dagster pipeline execute -f inputs.py \\
    -n define_hello_inputs_pipeline -e inputs_env.yml 

Dagit
~~~~~

As always, you can load the pipeline and execute it within dagit.

.. code-block:: console

   $ dagit -f inputs.py -n define_hello_inputs_pipeline
   Serving on http://127.0.0.1:3000

From the execute console, you can enter your config directly like so:

.. image:: inputs_figure_one.png

You'll notice that the config editor is auto-completing. Because it knows the structure
of the config, the editor can provide rich error information. We can improve the experience of
using the editor by appropriately typing the inputs, making everything less error-prone.

Typing
^^^^^^

Right now the inputs and outputs of this solid are totally untyped. (Any input or output
without a type is automatically assigned the ``Any`` type.) This means that mistakes
are often not surfaced until the pipeline is executed.

For example, imagine if our environment for our pipeline was:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/inputs_env_bad.yml
   :language: YAML
   :linenos:
   :caption: inputs_env_bad.yml

If we execute this pipeline with this config, it'll fail at runtime.

Enter this config in dagit and execute and you'll see the transform fail:

.. image:: inputs_figure_two_untyped_execution.png

Click on the red dot on the execution step that failed and a detailed stacktrace will pop up.

.. image:: inputs_figure_three_error_modal.png

It would be better if we could catch this error earlier, when we specify the config. So let's
make the inputs typed.

A user can apply types to inputs and outputs. In this case we just want to type them as the
built-in ``String``.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/inputs.py
   :lines: 35-40
   :emphasize-lines: 2-3
   :caption: inputs.py

By using typed input instead we can catch this error prior to execution.

.. image:: inputs_figure_four_error_prechecked.png

Next, we'll look at a closely allied concept -- :doc:`Configuration <config>` values.
'''

snapshots['test_build_all_docs 30'] = '''Multiple Outputs
----------------

So far all of our examples have been solids that have a single output. But
solids can have an arbitrary number of outputs. Downstream solids can 
depend on any number of these outputs. Additionally, these outputs do
not *necessarily* have to be fired, therefore unlocking the ability for
downstream solids to be invoked conditionally based on something that
happened during the computation.

``MultipleResults`` Class
^^^^^^^^^^^^^^^^^^^^^^^^^

Here we present an example of a solid that has multiple outputs within a pipeline:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/multiple_outputs.py
   :linenos:
   :caption: multiple_outputs.py
   :lines: 53-67, 26-34, 67-84

This can be visualized in dagit:

.. image:: multiple_results_figure_one.png


Notice how ``return_dict_results`` has two outputs. For the first time
we have provided the name argument to an :py:class:`OutputDefinition <dagster.OutputDefinition>`.
(The name of an output defaults to ``'result'``, as it does for a
:py:class:`DependencyDefinition <dagster.DependencyDefinition>`) Output names must be unique
and each result returned by a solid's transform function must have a name that corresponds to
one of these outputs.

So from ``return_dict_results`` we used :py:class:`MultipleResults <dagster.MultipleResults>`
to return all outputs from this transform.

Just as this tutorial gives us the first example of a named
:py:class:`OutputDefinition <dagster.OutputDefinition>`, this is also the first time that we've
seen a named :py:class:`DependencyDefinition <dagster.DependencyDefinition>`. Recall that dependencies
point to a particular **output** of a solid, rather than to the solid itself. 

With this we can run the pipeline:

.. code-block:: console

    $ dagster pipeline execute -f multiple_outputs.py \\
    -n define_multiple_outputs_step_one_pipeline

    ... log spew
    2019-01-15 15:44:36 - dagster - INFO - orig_message="Solid return_dict_results emitted output \\"out_one\\" value 23" log_message_id="f7d90092-523e-41c3-ac43-f9124ea896ad" run_id="50733509-1dfb-4e1b-9f12-fc6be42f2376" pipeline="multiple_outputs_step_one_pipeline" solid="return_dict_results" solid_definition="return_dict_results"
    2019-01-15 15:44:36 - dagster - INFO - orig_message="Solid return_dict_results emitted output \\"out_two\\" value 45" log_message_id="343ac9fb-4afd-4b96-85a6-0e15a1b22a6e" run_id="50733509-1dfb-4e1b-9f12-fc6be42f2376" pipeline="multiple_outputs_step_one_pipeline" solid="return_dict_results" solid_definition="return_dict_results"
    ... more log spew

Iterator of ``Result``
^^^^^^^^^^^^^^^^^^^^^^

The :py:class:`MultipleResults <dagster.MultipleResults>` class is not the only way
to return multiple results from a solid transform function. You can also yield
multiple instances of the ``Result`` object. (Note: this is actually the core
specification of the transform function: all other forms are implemented in terms of
the iterator form.)

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/multiple_outputs.py
   :linenos:
   :caption: multiple_outputs.py
   :lines: 15-24

... and you'll see the same log spew around outputs in this version:

.. code-block:: console

    $ dagster pipeline execute -f multiple_outputs.py \\
    -n define_multiple_outputs_step_two_pipeline

    2018-11-08 10:54:15 - dagster - INFO - orig_message="Solid yield_outputs emitted output \\"out_one\\" value 23" log_message_id="5e1cc181-b74d-47f8-8d32-bc262d555b73" run_id="4bee891c-e04f-4221-be77-17576abb9da2" pipeline="part_eleven_step_two" solid="yield_outputs" solid_definition="yield_outputs"
    2018-11-08 10:54:15 - dagster - INFO - orig_message="Solid yield_outputs emitted output \\"out_two\\" value 45" log_message_id="8da32946-596d-4783-b7c5-4edbb3a1dbc2" run_id="4bee891c-e04f-4221-be77-17576abb9da2" pipeline="part_eleven_step_two" solid="yield_outputs" solid_definition="yield_outputs"

Conditional Outputs
^^^^^^^^^^^^^^^^^^^

Multiple outputs are the mechanism by which we implement branching or conditional execution.

Let's modify the first solid above to conditionally emit one output or the other based on config
and then execute that pipeline.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/multiple_outputs.py
    :linenos:
    :caption: multiple_outputs.py
    :lines: 36-52,86-99

You must create a config file

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/conditional_outputs.yml
    :linenos:
    :caption: conditional_outputs.yml

And then run it.

.. code-block:: console

    $ dagster pipeline execute -f multiple_outputs.py \\
    -n define_multiple_outputs_step_three_pipeline \\
    -e conditional_outputs.yml
    ... log spew
    2018-09-16 18:58:32 - dagster - INFO - orig_message="Solid conditional emitted output \\"out_two\\" value 45" log_message_id="f6fd78c5-c25e-40ea-95ef-6b80d12155de" pipeline="part_eleven_step_three" solid="conditional"
    2018-09-16 18:58:32 - dagster - INFO - orig_message="Solid conditional did not fire outputs {\'out_one\'}" log_message_id="d548ea66-cb10-42b8-b150-aed8162cc25c" pipeline="part_eleven_step_three" solid="conditional"    
    ... log spew

Note that we are configuring this solid to *only* emit ``out_two`` which will end up
only triggering ``log_num_squared``. The solid ``log_num`` will never be executed.

Next, let's look at writing :doc:`Reusable Solids <reusable_solids>` so we can avoid duplicating
common data pipeline work.
'''

snapshots['test_build_all_docs 31'] = '''Pipeline CLI Execution
----------------------

Up until now we've been focusing on using the dagit tool for executing pipelines. However, we
also have a CLI utility for use in scripting contexts. It has its own features which are useful in
a production context.

Just as in the last part of the tutorial, we'll define a pipeline and a repository, and create
a yaml file to tell the CLI tool about the repository.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/pipeline_cli_execution.py
   :linenos:
   :caption: pipeline_cli_execution.py

And now the repository file:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/pipeline_execution_repository.yml
   :linenos:
   :language: YAML
   :caption: repository.yml

Finally, we'll need to define the pipeline config in a yaml file in order to
execute our pipeline from the command line.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/pipeline_execution_env.yml
   :linenos:
   :language: YAML
   :caption: env.yml

With these elements in place we can now drive execution from the CLI specifying only the pipeline
name. The tool loads the repository using the ``repository.yml`` file and looks up the pipeline by
name.

.. code-block:: console

    $ dagster pipeline execute demo_pipeline -e env.yml

Config Splitting
^^^^^^^^^^^^^^^^

Suppose that we want to keep some settings (like our context-level logging config) constant across
a bunch of our pipeline executions, and vary only pipeline-specific settings. It'd be tedious to
copy the broadly-applicable settings into each of our config yamls, and error-prone to try to keep
those copies in sync. So the command line tools allow us to specify more than one yaml file to use
for config.

Let's split up our env.yml into two parts:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/pipeline_execution_env.yml
   :lines: 1-4
   :language: YAML
   :caption: constant_env.yml

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/pipeline_execution_env.yml
   :lines: 6-12
   :language: YAML
   :caption: specific_env.yml

Now we can run our pipeline as follows:

.. code-block:: console

    $ dagster pipeline execute part_seven -e constant_env.yml -e specific_env.yml

Order matters when specifying yaml files to use -- values specified in later files will override
values in earlier files, which can be useful. You can also use globs in the CLI arguments to consume
multiple yaml files.

Next, we'll look at how :doc:`User-Defined Types <types>` can enrich documentation and type-safety
in pipelines.
'''

snapshots['test_build_all_docs 32'] = '''Repositories
------------
Dagster is a not just a programming model for pipelines, it is also a platform for
tool-building. You've already met the dagster and dagit CLI tools, which let you programmatically
run and visualize pipelines.

In previous examples we have specified a file (``-f``) or a module (``-m``) and named a pipeline definition function
(``-n``) in order to tell the CLI tools how to load a pipeline, e.g.:

.. code-block:: console

    $ dagit -f hello_world.py -n define_hello_world_pipeline
    $ dagster pipeline execute -f hello_world.py \\
        -n define_hello_world_pipeline

But most of the time, especially when working on long-running projects with other people, we will
want to be able to target many pipelines at once with our tools. 

A **repository** is a collection of pipelines at which dagster tools may be pointed.

Repostories are declared using a new API,
:py:func:`RepositoryDefinition <dagster.RepositoryDefinition>`:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/repos.py
   :linenos:
   :caption: repos.py

Note that the name of the pipeline in the `RepositoryDefinition` must match the name we declared
for it in its `PipelineDefinition`. Don't worry, if these names don't match, you'll see a helpful
error message.
 
If you save this file as ``repos.py``, you can then run the command line tools on it. Try running:

.. code-block:: console

    $ dagit -f repos.py -n define_repo

Now you can see the list of all pipelines in the repo via the dropdown at the top.

.. image:: repos_figure_one.png 

Typing the name of the file and function defining the repository gets tiresome and repetitive, so
let's create a declarative config file with this information to make using the command line tools
easier. Save this file as ``repository.yml``. This is the default name for a repository config file,
although you can tell the CLI tools to use any file you like.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/repos_1.yml
   :linenos:
   :language: YAML
   :caption: repository.yml

Now you should be able to list the pipelines in this repo without all the typing:

.. code-block:: console

    $ dagit 

You can also specify a module instead of a file in the repository.yml file.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/repos_2.yml
   :linenos:
   :language: YAML
   :caption: repository.yml

In the next part of the tutorial, we'll get to know :doc:`Pipeline Execution <pipeline_cli_execution>`
a little better, and learn how to execute pipelines in a repository from the command line by name,
with swappable config.
'''

snapshots['test_build_all_docs 33'] = '''Resources
=========

We've already learned about logging through the info object. We can also use the info object
to manage pipelines' access to resources like the file system, databases, or cloud services.
In general, interactions with features of the external environment like these should be modeled
as resources.

Let's imagine that we are using a key value store offered by a cloud service that has a python API.
We are going to record the results of computations in that key value store.

We are going to model this key value store as a resource.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/resources.py
   :lines: 1

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/resources.py
   :lines: 28-41, 64-76

The core of a resource are the definition of its configuration (the ``config_field``)
and then the function that can actually construct the resource. Notice that all of the
configuration specified for a given resource is passed to its constructor under the ``config``
key of the ``info`` parameter.

Let's now attach this resource to a pipeline and use it in a solid.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/resources.py
   :lines: 79-93, 97-101

Resources are attached to pipeline context definitions. A pipeline context
definition is way that a pipeline can declare the different "modes" it can
operate in. For example a common context definition would be "unittest"
or "production". In a particular context definition you can provide a different
set of resources. That means you can swap out implementations of these resources
by altering configuration, while not changing your code.

In this case we have a single context definition "cloud" and that has a single
resource.

In order to invoke this pipeline, we pass it the following configuration:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/resources.py
   :lines: 105-129
   :dedent: 4

Note how we are telling the configuration to create a cloud context by
using the ``cloud`` key under ``context`` and then parameterizing the store resource
with the appropriate config. As a config, any user-provided configuration for
an artifact (in this case the ``store`` resoource) is placed under the ``config`` key.

So this works, but let us imagine we wanted to have a test mode where we interacted
with an in memory version of that key value store and not develop against the live
public cloud version.

First we need a version of the store that implements the same interface that can be used
in testing contexts but does not touch the public cloud:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/resources.py
   :lines: 43-53

Next we package this up as a resource.

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/resources.py
   :lines: 56-62

And lastly add a new context definition to represent this new operating "mode":

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/resources.py
   :lines: 89-101
   :emphasize-lines: 6-8

Now we can simply change configuration and the "in-memory" version of the
resource will be used instead of the cloud version:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/resources.py
   :lines: 131-144
   :emphasize-lines: 4
   :dedent: 4

In the next section, we'll see how to declaratively specify :doc:`Repositories <repos>` to 
manage collections of multiple dagster pipelines.
'''

snapshots['test_build_all_docs 34'] = '''Reusable Solids
---------------

So far we have been using solids tailor-made for each pipeline they were resident in, and have
only used a single instance of that solid. However, solids are, at their core, a specialized type
of function. And like functions, they should be reusable and not tied to a particular call site.

Imagine we have some solids that perform generic mathematical computations and we want them to
be reusable. E.g. we want to have a generic ``adder`` solid and use it a couple times within
a pipeline. Using APIs presented so far, that would be impossible: there would be a name collision
if one included two copies of the solid.

Instead we introduce a new class ``SolidInstance`` that allows the user to create multiple, named instances
of a single solid:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/reusable_solids.py
   :linenos:
   :caption: reusable_solids.py

You'll notice that now have two copies of the adder solid.

You can think of the solids parameter as declaring what solids are "in-scope" for the
purposes of this pipeline, and the dependencies parameter is how they instantiated
and connected together. Within the dependency graph and in config, the alias of the
particular instance is used, rather than the name of the definition.

If you inspect this in dagit, you'll see those two instances:

.. image:: reusable_solids_figure_one.png

You also use the aliases in the environment config. In order to execute this pipeline, use
the following config file:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/reusable_solids.yml
   :linenos:
   :caption: reusable_solids.yml


Load this in dagit and you'll see that the node are the graph are labeled with
their instance name.

.. code-block:: sh

        $ dagit -f part_thirteen.py -n define_part_thirteen_step_two 

Now these arithmetic operations are not particularly interesting, but one
can imagine reusable solids doing more useful things like uploading files
to cloud storage, unzipping files, etc.
'''

snapshots['test_build_all_docs 35'] = '''User-Defined Types
------------------

Throughout the tutorial you have seen the use of builtins such as :py:class:`Int <dagster.Int>`
and :py:class:`String <dagster.String>` for types. However you will want to be able to define your
own dagster types to fully utilize the system. We'll go over that here.

As a pedogogical example, we will go over the code used to the define the ``PandasDataFrame`` type
in the dagster-pandas library, building it step by step along the way.

Basic Typing
^^^^^^^^^^^^

.. literalinclude:: ../../../dagster-pandas/dagster_pandas/data_frame.py
   :lines: 1, 79-85, 88

What this code doing is annotating/registering an existing type as a dagster type. Now one can
include this type and use it as an input or output of a solid. The system will do a typecheck
to ensure that the object is of type ``pd.DataFrame``.

Now one can use it to define a solid:

.. code-block:: py
   :emphasize-lines: 2-3

    @lambda_solid(
        inputs=[InputDefinition('num', DataFrame)],
        output=OutputDefinition(DataFrame),
    )
    def sum_solid(num):
        sum_df = num.copy()
        sum_df['sum'] = sum_df['num1'] + sum_df['num2']
        return sum_df

The type metadata now appears in dagit and the system will ensure the input and output to this
solid are indeed data frames.

Input Schema
^^^^^^^^^^^^

This solid as defined is only expressed in terms of an in-memory object; it says nothing about
how this data should be sourced from or materialized to disk. This is where the notion of
input and output schemas come into play. Once the user provides those she is able to use
the configuration language in order to parameterize the computation.

Let us now add the input schema:

.. code-block:: py

    @input_schema(
        Selector(
            {
                'csv': define_csv_dict_field(),
                'parquet': define_path_dict_field(),
                'table': define_path_dict_field(),
            }
        )
    )
    def dataframe_input_schema(config_value):
        file_type, file_options = list(config_value.items())[0]
        check.str_param(file_type, 'file_type')
        check.dict_param(file_options, 'file_options')

        if file_type == 'csv':
            path = file_options['path']
            del file_options['path']
            return pd.read_csv(path, **file_options)
        elif file_type == 'parquet':
            return pd.read_parquet(file_options['path'])
        elif file_type == 'table':
            return pd.read_table(file_options['path'])
        else:
            raise DagsterInvariantViolationError(
                'Unsupported file_type {file_type}'.format(
                    file_type=file_type
                )
            )


Any input schema is define by a decorated function with a single argument. The argument is the
format the input schema takes. In this case it is a `Selector`. Selectors are used when you want
to be able present several different options to the user but force them to select one. In this case,
for example, it would not make much sense to allow them to say that a single input should be sourced
from a csv and a parquet file: They must choose. (In other type systems this might be called an "input
union.")

Note our selector provides three keys: `csv`, `parquet`, and `table`. Each of these in turn has
their own subfield selections. You'll note that these are `Dict` requiring the user to provide all
required fields, rather than only one.

The remaining step here is that the user must provide code that takes those validated configurated
files and produces an object of the expected type. In this case that would be the pandas DataFrame
type. The user can assume the value abides by the provided schema and that any and all default
values have been applied.

Selectors are very commonly used for these type of schemas, so we've also provided an alternative
API that removes some boilerplate around manipulating the config_value dictionary. Instead, the
user-provided function takes the unpacked key and value of config_value directly, since in the
case of a selector, the config_value dictionary has only 1 (key, value) pair.

.. literalinclude:: ../../../dagster-pandas/dagster_pandas/data_frame.py
   :lines: 53-77

You'll note that we no longer need to manipulate the ``config_value`` dictionary. It grabs
that key and value for you and calls the provided function.

Finally insert this into the original declaration:

.. literalinclude:: ../../../dagster-pandas/dagster_pandas/data_frame.py
   :lines: 80-86,88 
   :emphasize-lines: 7

Now if you run a pipeline with this solid from dagit you will be able to provide sources for
these inputs via config:

.. image:: types_figure_one.png

Output Schema
^^^^^^^^^^^^^

We will add output schema now. They are similar to input schema, except that they are responsible
for taking the in-memory object flowed through your computation and materializing it to some
persistent store. Outputs are purely *optional* for any computation, whereas inputs *must* be provided
for a computation to proceed. You will likely want outputs as for a pipeline to be useful it
should produce some materialization that outlives the computation.

.. literalinclude:: ../../../dagster-pandas/dagster_pandas/data_frame.py
   :lines: 27-50
   :emphasize-lines: 1

This has a similar aesthetic to an input schema but performs a different function. Notice that
it takes a third argument, `pandas_df` (it can be named anything), that is the value that was
outputted from the solid in question. It then takes the configuration data as "instructions" as to
how to materialize the value.

One connects the output schema to the type as follows:

.. literalinclude:: ../../../dagster-pandas/dagster_pandas/data_frame.py
   :lines: 80-88
   :emphasize-lines: 8
 
Now we can provide a list of materializations to a given execution.

.. image:: types_figure_two.png

You'll note you can provide an arbitrary number of materializations. You can materialize any
given output any number of times in any number of formats.

.. image:: types_figure_three.png
'''

snapshots['test_build_all_docs 36'] = '''Unit-testing Pipelines
----------------------

Unit testing data pipelines is, broadly speaking, quite difficult. As a result, it is typically
never done.

One of the mechanisms included in dagster to enable testing has already been discussed: the
:doc:`Execution Context <execution_context>`. Recall that the context allows us to configure the
pipeline-level execution environment while keeping all of the code in our pipelines unchanged.

The other important testing mechanism is the ability to execute arbitrary subsets of a DAG. (This
capability is useful for other use cases but we will focus on unit testing for now).

Let's start where we left off.

We have the following pipeline:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/unittesting.py
    :linenos:
    :caption: unittesting.py
    :lines: 1-45

Let's say we wanted to test *one* of these solids in isolation.

We want to do is isolate that solid and execute with inputs we
provide, instead of from solids upstream in the dependency graph.

So let's do that. Follow along in the comments:

.. literalinclude:: ../../dagster/tutorials/intro_tutorial/unittesting.py
    :linenos:
    :caption: unittesting.py
    :lines: 47-53

We can also execute entire arbitrary subdags rather than a single solid using
the ``execute_solids`` function


.. literalinclude:: ../../dagster/tutorials/intro_tutorial/unittesting.py
    :linenos:
    :caption: unittesting.py
    :lines: 55-63
'''

snapshots['test_build_all_docs 37'] = '''@import url("basic.css");

/* -- page layout ----------------------------------------------------------- */

body {
    font-family: Georgia, serif;
    font-size: 17px;
    background-color: #fff;
    color: #000;
    margin: 0;
    padding: 0;
}


div.document {
    width: 940px;
    margin: 30px auto 0 auto;
}

div.documentwrapper {
    float: left;
    width: 100%;
}

div.bodywrapper {
    margin: 0 0 0 220px;
}

div.sphinxsidebar {
    width: 220px;
    font-size: 14px;
    line-height: 1.5;
}

hr {
    border: 1px solid #B1B4B6;
}

div.body {
    background-color: #fff;
    color: #3E4349;
    padding: 0 30px 0 30px;
}

div.body > .section {
    text-align: left;
}

div.footer {
    width: 940px;
    margin: 20px auto 30px auto;
    font-size: 14px;
    color: #888;
    text-align: right;
}

div.footer a {
    color: #888;
}

p.caption {
    font-family: inherit;
    font-size: inherit;
}


div.relations {
    display: none;
}


div.sphinxsidebar a {
    color: #444;
    text-decoration: none;
    border-bottom: 1px dotted #999;
}

div.sphinxsidebar a:hover {
    border-bottom: 1px solid #999;
}

div.sphinxsidebarwrapper {
    padding: 18px 10px;
}

div.sphinxsidebarwrapper p.logo {
    padding: 0;
    margin: -10px 0 0 0px;
    text-align: center;
}

div.sphinxsidebarwrapper h1.logo {
    margin-top: -10px;
    text-align: center;
    margin-bottom: 5px;
    text-align: left;
}

div.sphinxsidebarwrapper h1.logo-name {
    margin-top: 0px;
}

div.sphinxsidebarwrapper p.blurb {
    margin-top: 0;
    font-style: normal;
}

div.sphinxsidebar h3,
div.sphinxsidebar h4 {
    font-family: Georgia, serif;
    color: #444;
    font-size: 24px;
    font-weight: normal;
    margin: 0 0 5px 0;
    padding: 0;
}

div.sphinxsidebar h4 {
    font-size: 20px;
}

div.sphinxsidebar h3 a {
    color: #444;
}

div.sphinxsidebar p.logo a,
div.sphinxsidebar h3 a,
div.sphinxsidebar p.logo a:hover,
div.sphinxsidebar h3 a:hover {
    border: none;
}

div.sphinxsidebar p {
    color: #555;
    margin: 10px 0;
}

div.sphinxsidebar ul {
    margin: 10px 0;
    padding: 0;
    color: #000;
}

div.sphinxsidebar ul li.toctree-l1 > a {
    font-size: 120%;
}

div.sphinxsidebar ul li.toctree-l2 > a {
    font-size: 110%;
}

div.sphinxsidebar input {
    border: 1px solid #CCC;
    font-family: Georgia, serif;
    font-size: 1em;
}

div.sphinxsidebar hr {
    border: none;
    height: 1px;
    color: #AAA;
    background: #AAA;

    text-align: left;
    margin-left: 0;
    width: 50%;
}

div.sphinxsidebar .badge {
    border-bottom: none;
}

div.sphinxsidebar .badge:hover {
    border-bottom: none;
}

/* To address an issue with donation coming after search */
div.sphinxsidebar h3.donation {
    margin-top: 10px;
}

/* -- body styles ----------------------------------------------------------- */

a {
    color: #004B6B;
    text-decoration: underline;
}

a:hover {
    color: #6D4100;
    text-decoration: underline;
}

div.body h1,
div.body h2,
div.body h3,
div.body h4,
div.body h5,
div.body h6 {
    font-family: Georgia, serif;
    font-weight: normal;
    margin: 30px 0px 10px 0px;
    padding: 0;
}

div.body h1 { margin-top: 0; padding-top: 0; font-size: 240%; }
div.body h2 { font-size: 180%; }
div.body h3 { font-size: 150%; }
div.body h4 { font-size: 130%; }
div.body h5 { font-size: 100%; }
div.body h6 { font-size: 100%; }

a.headerlink {
    color: #DDD;
    padding: 0 4px;
    text-decoration: none;
}

a.headerlink:hover {
    color: #444;
    background: #EAEAEA;
}

div.body p, div.body dd, div.body li {
    line-height: 1.4em;
}

div.admonition {
    margin: 20px 0px;
    padding: 10px 30px;
    background-color: #EEE;
    border: 1px solid #CCC;
}

div.admonition tt.xref, div.admonition code.xref, div.admonition a tt {
    background-color: #FBFBFB;
    border-bottom: 1px solid #fafafa;
}

div.admonition p.admonition-title {
    font-family: Georgia, serif;
    font-weight: normal;
    font-size: 24px;
    margin: 0 0 10px 0;
    padding: 0;
    line-height: 1;
}

div.admonition p.last {
    margin-bottom: 0;
}

div.highlight {
    background-color: #fff;
}

dt:target, .highlight {
    background: #FAF3E8;
}

div.warning {
    background-color: #FCC;
    border: 1px solid #FAA;
}

div.danger {
    background-color: #FCC;
    border: 1px solid #FAA;
    -moz-box-shadow: 2px 2px 4px #D52C2C;
    -webkit-box-shadow: 2px 2px 4px #D52C2C;
    box-shadow: 2px 2px 4px #D52C2C;
}

div.error {
    background-color: #FCC;
    border: 1px solid #FAA;
    -moz-box-shadow: 2px 2px 4px #D52C2C;
    -webkit-box-shadow: 2px 2px 4px #D52C2C;
    box-shadow: 2px 2px 4px #D52C2C;
}

div.caution {
    background-color: #FCC;
    border: 1px solid #FAA;
}

div.attention {
    background-color: #FCC;
    border: 1px solid #FAA;
}

div.important {
    background-color: #EEE;
    border: 1px solid #CCC;
}

div.note {
    background-color: #EEE;
    border: 1px solid #CCC;
}

div.tip {
    background-color: #EEE;
    border: 1px solid #CCC;
}

div.hint {
    background-color: #EEE;
    border: 1px solid #CCC;
}

div.seealso {
    background-color: #EEE;
    border: 1px solid #CCC;
}

div.topic {
    background-color: #EEE;
}

p.admonition-title {
    display: inline;
}

p.admonition-title:after {
    content: ":";
}

pre, tt, code {
    font-family: 'Consolas', 'Menlo', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', monospace;
    font-size: 0.9em;
}

.hll {
    background-color: #FFC;
    margin: 0 -12px;
    padding: 0 12px;
    display: block;
}

img.screenshot {
}

tt.descname, tt.descclassname, code.descname, code.descclassname {
    font-size: 0.95em;
}

tt.descname, code.descname {
    padding-right: 0.08em;
}

img.screenshot {
    -moz-box-shadow: 2px 2px 4px #EEE;
    -webkit-box-shadow: 2px 2px 4px #EEE;
    box-shadow: 2px 2px 4px #EEE;
}

table.docutils {
    border: 1px solid #888;
    -moz-box-shadow: 2px 2px 4px #EEE;
    -webkit-box-shadow: 2px 2px 4px #EEE;
    box-shadow: 2px 2px 4px #EEE;
}

table.docutils td, table.docutils th {
    border: 1px solid #888;
    padding: 0.25em 0.7em;
}

table.field-list, table.footnote {
    border: none;
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
}

table.footnote {
    margin: 15px 0;
    width: 100%;
    border: 1px solid #EEE;
    background: #FDFDFD;
    font-size: 0.9em;
}

table.footnote + table.footnote {
    margin-top: -15px;
    border-top: none;
}

table.field-list th {
    padding: 0 0.8em 0 0;
}

table.field-list td {
    padding: 0;
}

table.field-list p {
    margin-bottom: 0.8em;
}

/* Cloned from
 * https://github.com/sphinx-doc/sphinx/commit/ef60dbfce09286b20b7385333d63a60321784e68
 */
.field-name {
    -moz-hyphens: manual;
    -ms-hyphens: manual;
    -webkit-hyphens: manual;
    hyphens: manual;
}

table.footnote td.label {
    width: .1px;
    padding: 0.3em 0 0.3em 0.5em;
}

table.footnote td {
    padding: 0.3em 0.5em;
}

dl {
    margin: 0;
    padding: 0;
}

dl dd {
    margin-left: 30px;
}

blockquote {
    margin: 0 0 0 30px;
    padding: 0;
}

ul, ol {
    /* Matches the 30px from the narrow-screen "li > ul" selector below */
    margin: 10px 0 10px 30px;
    padding: 0;
}

pre {
    background: #EEE;
    padding: 7px 30px;
    margin: 15px 0px;
    line-height: 1.3em;
}

div.viewcode-block:target {
    background: #ffd;
}

dl pre, blockquote pre, li pre {
    margin-left: 0;
    padding-left: 30px;
}

tt, code {
    background-color: #ecf0f3;
    color: #222;
    /* padding: 1px 2px; */
}

tt.xref, code.xref, a tt {
    background-color: #FBFBFB;
    border-bottom: 1px solid #fff;
}

a.reference {
    text-decoration: none;
    border-bottom: 1px dotted #004B6B;
}

/* Don't put an underline on images */
a.image-reference, a.image-reference:hover {
    border-bottom: none;
}

a.reference:hover {
    border-bottom: 1px solid #6D4100;
}

a.footnote-reference {
    text-decoration: none;
    font-size: 0.7em;
    vertical-align: top;
    border-bottom: 1px dotted #004B6B;
}

a.footnote-reference:hover {
    border-bottom: 1px solid #6D4100;
}

a:hover tt, a:hover code {
    background: #EEE;
}


@media screen and (max-width: 870px) {

    div.sphinxsidebar {
    \tdisplay: none;
    }

    div.document {
       width: 100%;

    }

    div.documentwrapper {
    \tmargin-left: 0;
    \tmargin-top: 0;
    \tmargin-right: 0;
    \tmargin-bottom: 0;
    }

    div.bodywrapper {
    \tmargin-top: 0;
    \tmargin-right: 0;
    \tmargin-bottom: 0;
    \tmargin-left: 0;
    }

    ul {
    \tmargin-left: 0;
    }

\tli > ul {
        /* Matches the 30px from the "ul, ol" selector above */
\t\tmargin-left: 30px;
\t}

    .document {
    \twidth: auto;
    }

    .footer {
    \twidth: auto;
    }

    .bodywrapper {
    \tmargin: 0;
    }

    .footer {
    \twidth: auto;
    }

    .github {
        display: none;
    }



}



@media screen and (max-width: 875px) {

    body {
        margin: 0;
        padding: 20px 30px;
    }

    div.documentwrapper {
        float: none;
        background: #fff;
    }

    div.sphinxsidebar {
        display: block;
        float: none;
        width: 102.5%;
        margin: 50px -30px -20px -30px;
        padding: 10px 20px;
        background: #333;
        color: #FFF;
    }

    div.sphinxsidebar h3, div.sphinxsidebar h4, div.sphinxsidebar p,
    div.sphinxsidebar h3 a {
        color: #fff;
    }

    div.sphinxsidebar a {
        color: #AAA;
    }

    div.sphinxsidebar p.logo {
        display: none;
    }

    div.document {
        width: 100%;
        margin: 0;
    }

    div.footer {
        display: none;
    }

    div.bodywrapper {
        margin: 0;
    }

    div.body {
        min-height: 0;
        padding: 0;
    }

    .rtd_doc_footer {
        display: none;
    }

    .document {
        width: auto;
    }

    .footer {
        width: auto;
    }

    .footer {
        width: auto;
    }

    .github {
        display: none;
    }
}


/* misc. */

.revsys-inline {
    display: none!important;
}

/* Make nested-list/multi-paragraph items look better in Releases changelog
 * pages. Without this, docutils' magical list fuckery causes inconsistent
 * formatting between different release sub-lists.
 */
div#changelog > div.section > ul > li > p:only-child {
    margin-bottom: 0;
}

/* Hide fugly table cell borders in ..bibliography:: directive output */
table.docutils.citation, table.docutils.citation td, table.docutils.citation th {
  border: none;
  /* Below needed in some edge cases; if not applied, bottom shadows appear */
  -moz-box-shadow: none;
  -webkit-box-shadow: none;
  box-shadow: none;
}


/* relbar */

.related {
    line-height: 30px;
    width: 100%;
    font-size: 0.9rem;
}

.related.top {
    border-bottom: 1px solid #EEE;
    margin-bottom: 20px;
}

.related.bottom {
    border-top: 1px solid #EEE;
}

.related ul {
    padding: 0;
    margin: 0;
    list-style: none;
}

.related li {
    display: inline;
}

nav#rellinks {
    float: right;
}

nav#rellinks li+li:before {
    content: "|";
}

nav#breadcrumbs li+li:before {
    content: "\\00BB";
}

/* Hide certain items when printing */
@media print {
    div.related {
        display: none;
    }
}'''

snapshots['test_build_all_docs 38'] = '''/*
 * basic.css
 * ~~~~~~~~~
 *
 * Sphinx stylesheet -- basic theme.
 *
 * :copyright: Copyright 2007-2018 by the Sphinx team, see AUTHORS.
 * :license: BSD, see LICENSE for details.
 *
 */

/* -- main layout ----------------------------------------------------------- */

div.clearer {
    clear: both;
}

/* -- relbar ---------------------------------------------------------------- */

div.related {
    width: 100%;
    font-size: 90%;
}

div.related h3 {
    display: none;
}

div.related ul {
    margin: 0;
    padding: 0 0 0 10px;
    list-style: none;
}

div.related li {
    display: inline;
}

div.related li.right {
    float: right;
    margin-right: 5px;
}

/* -- sidebar --------------------------------------------------------------- */

div.sphinxsidebarwrapper {
    padding: 10px 5px 0 10px;
}

div.sphinxsidebar {
    float: left;
    width: 230px;
    margin-left: -100%;
    font-size: 90%;
    word-wrap: break-word;
    overflow-wrap : break-word;
}

div.sphinxsidebar ul {
    list-style: none;
}

div.sphinxsidebar ul ul,
div.sphinxsidebar ul.want-points {
    margin-left: 20px;
    list-style: square;
}

div.sphinxsidebar ul ul {
    margin-top: 0;
    margin-bottom: 0;
}

div.sphinxsidebar form {
    margin-top: 10px;
}

div.sphinxsidebar input {
    border: 1px solid #98dbcc;
    font-family: sans-serif;
    font-size: 1em;
}

div.sphinxsidebar #searchbox input[type="text"] {
    float: left;
    width: 80%;
    padding: 0.25em;
    box-sizing: border-box;
}

div.sphinxsidebar #searchbox input[type="submit"] {
    float: left;
    width: 20%;
    border-left: none;
    padding: 0.25em;
    box-sizing: border-box;
}


img {
    border: 0;
    max-width: 100%;
}

/* -- search page ----------------------------------------------------------- */

ul.search {
    margin: 10px 0 0 20px;
    padding: 0;
}

ul.search li {
    padding: 5px 0 5px 20px;
    background-image: url(file.png);
    background-repeat: no-repeat;
    background-position: 0 7px;
}

ul.search li a {
    font-weight: bold;
}

ul.search li div.context {
    color: #888;
    margin: 2px 0 0 30px;
    text-align: left;
}

ul.keywordmatches li.goodmatch a {
    font-weight: bold;
}

/* -- index page ------------------------------------------------------------ */

table.contentstable {
    width: 90%;
    margin-left: auto;
    margin-right: auto;
}

table.contentstable p.biglink {
    line-height: 150%;
}

a.biglink {
    font-size: 1.3em;
}

span.linkdescr {
    font-style: italic;
    padding-top: 5px;
    font-size: 90%;
}

/* -- general index --------------------------------------------------------- */

table.indextable {
    width: 100%;
}

table.indextable td {
    text-align: left;
    vertical-align: top;
}

table.indextable ul {
    margin-top: 0;
    margin-bottom: 0;
    list-style-type: none;
}

table.indextable > tbody > tr > td > ul {
    padding-left: 0em;
}

table.indextable tr.pcap {
    height: 10px;
}

table.indextable tr.cap {
    margin-top: 10px;
    background-color: #f2f2f2;
}

img.toggler {
    margin-right: 3px;
    margin-top: 3px;
    cursor: pointer;
}

div.modindex-jumpbox {
    border-top: 1px solid #ddd;
    border-bottom: 1px solid #ddd;
    margin: 1em 0 1em 0;
    padding: 0.4em;
}

div.genindex-jumpbox {
    border-top: 1px solid #ddd;
    border-bottom: 1px solid #ddd;
    margin: 1em 0 1em 0;
    padding: 0.4em;
}

/* -- domain module index --------------------------------------------------- */

table.modindextable td {
    padding: 2px;
    border-collapse: collapse;
}

/* -- general body styles --------------------------------------------------- */

div.body {
    min-width: 450px;
    max-width: 800px;
}

div.body p, div.body dd, div.body li, div.body blockquote {
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
}

a.headerlink {
    visibility: hidden;
}

h1:hover > a.headerlink,
h2:hover > a.headerlink,
h3:hover > a.headerlink,
h4:hover > a.headerlink,
h5:hover > a.headerlink,
h6:hover > a.headerlink,
dt:hover > a.headerlink,
caption:hover > a.headerlink,
p.caption:hover > a.headerlink,
div.code-block-caption:hover > a.headerlink {
    visibility: visible;
}

div.body p.caption {
    text-align: inherit;
}

div.body td {
    text-align: left;
}

.first {
    margin-top: 0 !important;
}

p.rubric {
    margin-top: 30px;
    font-weight: bold;
}

img.align-left, .figure.align-left, object.align-left {
    clear: left;
    float: left;
    margin-right: 1em;
}

img.align-right, .figure.align-right, object.align-right {
    clear: right;
    float: right;
    margin-left: 1em;
}

img.align-center, .figure.align-center, object.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.align-left {
    text-align: left;
}

.align-center {
    text-align: center;
}

.align-right {
    text-align: right;
}

/* -- sidebars -------------------------------------------------------------- */

div.sidebar {
    margin: 0 0 0.5em 1em;
    border: 1px solid #ddb;
    padding: 7px 7px 0 7px;
    background-color: #ffe;
    width: 40%;
    float: right;
}

p.sidebar-title {
    font-weight: bold;
}

/* -- topics ---------------------------------------------------------------- */

div.topic {
    border: 1px solid #ccc;
    padding: 7px 7px 0 7px;
    margin: 10px 0 10px 0;
}

p.topic-title {
    font-size: 1.1em;
    font-weight: bold;
    margin-top: 10px;
}

/* -- admonitions ----------------------------------------------------------- */

div.admonition {
    margin-top: 10px;
    margin-bottom: 10px;
    padding: 7px;
}

div.admonition dt {
    font-weight: bold;
}

div.admonition dl {
    margin-bottom: 0;
}

p.admonition-title {
    margin: 0px 10px 5px 0px;
    font-weight: bold;
}

div.body p.centered {
    text-align: center;
    margin-top: 25px;
}

/* -- tables ---------------------------------------------------------------- */

table.docutils {
    border: 0;
    border-collapse: collapse;
}

table.align-center {
    margin-left: auto;
    margin-right: auto;
}

table caption span.caption-number {
    font-style: italic;
}

table caption span.caption-text {
}

table.docutils td, table.docutils th {
    padding: 1px 8px 1px 5px;
    border-top: 0;
    border-left: 0;
    border-right: 0;
    border-bottom: 1px solid #aaa;
}

table.footnote td, table.footnote th {
    border: 0 !important;
}

th {
    text-align: left;
    padding-right: 5px;
}

table.citation {
    border-left: solid 1px gray;
    margin-left: 1px;
}

table.citation td {
    border-bottom: none;
}

/* -- figures --------------------------------------------------------------- */

div.figure {
    margin: 0.5em;
    padding: 0.5em;
}

div.figure p.caption {
    padding: 0.3em;
}

div.figure p.caption span.caption-number {
    font-style: italic;
}

div.figure p.caption span.caption-text {
}

/* -- field list styles ----------------------------------------------------- */

table.field-list td, table.field-list th {
    border: 0 !important;
}

.field-list ul {
    margin: 0;
    padding-left: 1em;
}

.field-list p {
    margin: 0;
}

.field-name {
    -moz-hyphens: manual;
    -ms-hyphens: manual;
    -webkit-hyphens: manual;
    hyphens: manual;
}

/* -- other body styles ----------------------------------------------------- */

ol.arabic {
    list-style: decimal;
}

ol.loweralpha {
    list-style: lower-alpha;
}

ol.upperalpha {
    list-style: upper-alpha;
}

ol.lowerroman {
    list-style: lower-roman;
}

ol.upperroman {
    list-style: upper-roman;
}

dl {
    margin-bottom: 15px;
}

dd p {
    margin-top: 0px;
}

dd ul, dd table {
    margin-bottom: 10px;
}

dd {
    margin-top: 3px;
    margin-bottom: 10px;
    margin-left: 30px;
}

dt:target, span.highlighted {
    background-color: #fbe54e;
}

rect.highlighted {
    fill: #fbe54e;
}

dl.glossary dt {
    font-weight: bold;
    font-size: 1.1em;
}

.optional {
    font-size: 1.3em;
}

.sig-paren {
    font-size: larger;
}

.versionmodified {
    font-style: italic;
}

.system-message {
    background-color: #fda;
    padding: 5px;
    border: 3px solid red;
}

.footnote:target  {
    background-color: #ffa;
}

.line-block {
    display: block;
    margin-top: 1em;
    margin-bottom: 1em;
}

.line-block .line-block {
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 1.5em;
}

.guilabel, .menuselection {
    font-family: sans-serif;
}

.accelerator {
    text-decoration: underline;
}

.classifier {
    font-style: oblique;
}

abbr, acronym {
    border-bottom: dotted 1px;
    cursor: help;
}

/* -- code displays --------------------------------------------------------- */

pre {
    overflow: auto;
    overflow-y: hidden;  /* fixes display issues on Chrome browsers */
}

span.pre {
    -moz-hyphens: none;
    -ms-hyphens: none;
    -webkit-hyphens: none;
    hyphens: none;
}

td.linenos pre {
    padding: 5px 0px;
    border: 0;
    background-color: transparent;
    color: #aaa;
}

table.highlighttable {
    margin-left: 0.5em;
}

table.highlighttable td {
    padding: 0 0.5em 0 0.5em;
}

div.code-block-caption {
    padding: 2px 5px;
    font-size: small;
}

div.code-block-caption code {
    background-color: transparent;
}

div.code-block-caption + div > div.highlight > pre {
    margin-top: 0;
}

div.code-block-caption span.caption-number {
    padding: 0.1em 0.3em;
    font-style: italic;
}

div.code-block-caption span.caption-text {
}

div.literal-block-wrapper {
    padding: 1em 1em 0;
}

div.literal-block-wrapper div.highlight {
    margin: 0;
}

code.descname {
    background-color: transparent;
    font-weight: bold;
    font-size: 1.2em;
}

code.descclassname {
    background-color: transparent;
}

code.xref, a code {
    background-color: transparent;
    font-weight: bold;
}

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code {
    background-color: transparent;
}

.viewcode-link {
    float: right;
}

.viewcode-back {
    float: right;
    font-family: sans-serif;
}

div.viewcode-block:target {
    margin: -1px -10px;
    padding: 0 10px;
}

/* -- math display ---------------------------------------------------------- */

img.math {
    vertical-align: middle;
}

div.body div.math p {
    text-align: center;
}

span.eqno {
    float: right;
}

span.eqno a.headerlink {
    position: relative;
    left: 0px;
    z-index: 1;
}

div.math:hover a.headerlink {
    visibility: visible;
}

/* -- printout stylesheet --------------------------------------------------- */

@media print {
    div.document,
    div.documentwrapper,
    div.bodywrapper {
        margin: 0 !important;
        width: 100%;
    }

    div.sphinxsidebar,
    div.related,
    div.footer,
    #top-link {
        display: none;
    }
}'''

snapshots['test_build_all_docs 39'] = '''/* This file intentionally left blank. */
'''

snapshots['test_build_all_docs 40'] = '''/*
 * doctools.js
 * ~~~~~~~~~~~
 *
 * Sphinx JavaScript utilities for all documentation.
 *
 * :copyright: Copyright 2007-2018 by the Sphinx team, see AUTHORS.
 * :license: BSD, see LICENSE for details.
 *
 */

/**
 * select a different prefix for underscore
 */
$u = _.noConflict();

/**
 * make the code below compatible with browsers without
 * an installed firebug like debugger
if (!window.console || !console.firebug) {
  var names = ["log", "debug", "info", "warn", "error", "assert", "dir",
    "dirxml", "group", "groupEnd", "time", "timeEnd", "count", "trace",
    "profile", "profileEnd"];
  window.console = {};
  for (var i = 0; i < names.length; ++i)
    window.console[names[i]] = function() {};
}
 */

/**
 * small helper function to urldecode strings
 */
jQuery.urldecode = function(x) {
  return decodeURIComponent(x).replace(/\\+/g, ' ');
};

/**
 * small helper function to urlencode strings
 */
jQuery.urlencode = encodeURIComponent;

/**
 * This function returns the parsed url parameters of the
 * current request. Multiple values per key are supported,
 * it will always return arrays of strings for the value parts.
 */
jQuery.getQueryParameters = function(s) {
  if (typeof s === 'undefined')
    s = document.location.search;
  var parts = s.substr(s.indexOf('?') + 1).split('&');
  var result = {};
  for (var i = 0; i < parts.length; i++) {
    var tmp = parts[i].split('=', 2);
    var key = jQuery.urldecode(tmp[0]);
    var value = jQuery.urldecode(tmp[1]);
    if (key in result)
      result[key].push(value);
    else
      result[key] = [value];
  }
  return result;
};

/**
 * highlight a given string on a jquery object by wrapping it in
 * span elements with the given class name.
 */
jQuery.fn.highlightText = function(text, className) {
  function highlight(node, addItems) {
    if (node.nodeType === 3) {
      var val = node.nodeValue;
      var pos = val.toLowerCase().indexOf(text);
      if (pos >= 0 &&
          !jQuery(node.parentNode).hasClass(className) &&
          !jQuery(node.parentNode).hasClass("nohighlight")) {
        var span;
        var isInSVG = jQuery(node).closest("body, svg, foreignObject").is("svg");
        if (isInSVG) {
          span = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
        } else {
          span = document.createElement("span");
          span.className = className;
        }
        span.appendChild(document.createTextNode(val.substr(pos, text.length)));
        node.parentNode.insertBefore(span, node.parentNode.insertBefore(
          document.createTextNode(val.substr(pos + text.length)),
          node.nextSibling));
        node.nodeValue = val.substr(0, pos);
        if (isInSVG) {
          var bbox = span.getBBox();
          var rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
       \t  rect.x.baseVal.value = bbox.x;
          rect.y.baseVal.value = bbox.y;
          rect.width.baseVal.value = bbox.width;
          rect.height.baseVal.value = bbox.height;
          rect.setAttribute('class', className);
          var parentOfText = node.parentNode.parentNode;
          addItems.push({
              "parent": node.parentNode,
              "target": rect});
        }
      }
    }
    else if (!jQuery(node).is("button, select, textarea")) {
      jQuery.each(node.childNodes, function() {
        highlight(this, addItems);
      });
    }
  }
  var addItems = [];
  var result = this.each(function() {
    highlight(this, addItems);
  });
  for (var i = 0; i < addItems.length; ++i) {
    jQuery(addItems[i].parent).before(addItems[i].target);
  }
  return result;
};

/*
 * backward compatibility for jQuery.browser
 * This will be supported until firefox bug is fixed.
 */
if (!jQuery.browser) {
  jQuery.uaMatch = function(ua) {
    ua = ua.toLowerCase();

    var match = /(chrome)[ \\/]([\\w.]+)/.exec(ua) ||
      /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||
      /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||
      /(msie) ([\\w.]+)/.exec(ua) ||
      ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) ||
      [];

    return {
      browser: match[ 1 ] || "",
      version: match[ 2 ] || "0"
    };
  };
  jQuery.browser = {};
  jQuery.browser[jQuery.uaMatch(navigator.userAgent).browser] = true;
}

/**
 * Small JavaScript module for the documentation.
 */
var Documentation = {

  init : function() {
    this.fixFirefoxAnchorBug();
    this.highlightSearchWords();
    this.initIndexTable();
    
  },

  /**
   * i18n support
   */
  TRANSLATIONS : {},
  PLURAL_EXPR : function(n) { return n === 1 ? 0 : 1; },
  LOCALE : 'unknown',

  // gettext and ngettext don't access this so that the functions
  // can safely bound to a different name (_ = Documentation.gettext)
  gettext : function(string) {
    var translated = Documentation.TRANSLATIONS[string];
    if (typeof translated === 'undefined')
      return string;
    return (typeof translated === 'string') ? translated : translated[0];
  },

  ngettext : function(singular, plural, n) {
    var translated = Documentation.TRANSLATIONS[singular];
    if (typeof translated === 'undefined')
      return (n == 1) ? singular : plural;
    return translated[Documentation.PLURALEXPR(n)];
  },

  addTranslations : function(catalog) {
    for (var key in catalog.messages)
      this.TRANSLATIONS[key] = catalog.messages[key];
    this.PLURAL_EXPR = new Function('n', 'return +(' + catalog.plural_expr + ')');
    this.LOCALE = catalog.locale;
  },

  /**
   * add context elements like header anchor links
   */
  addContextElements : function() {
    $('div[id] > :header:first').each(function() {
      $(\'<a class="headerlink">\\u00B6</a>\').
      attr('href', '#' + this.id).
      attr('title', _('Permalink to this headline')).
      appendTo(this);
    });
    $('dt[id]').each(function() {
      $(\'<a class="headerlink">\\u00B6</a>\').
      attr('href', '#' + this.id).
      attr('title', _('Permalink to this definition')).
      appendTo(this);
    });
  },

  /**
   * workaround a firefox stupidity
   * see: https://bugzilla.mozilla.org/show_bug.cgi?id=645075
   */
  fixFirefoxAnchorBug : function() {
    if (document.location.hash && $.browser.mozilla)
      window.setTimeout(function() {
        document.location.href += '';
      }, 10);
  },

  /**
   * highlight the search words provided in the url in the text
   */
  highlightSearchWords : function() {
    var params = $.getQueryParameters();
    var terms = (params.highlight) ? params.highlight[0].split(/\\s+/) : [];
    if (terms.length) {
      var body = $('div.body');
      if (!body.length) {
        body = $('body');
      }
      window.setTimeout(function() {
        $.each(terms, function() {
          body.highlightText(this.toLowerCase(), 'highlighted');
        });
      }, 10);
      $(\'<p class="highlight-link"><a href="javascript:Documentation.\' +
        \'hideSearchWords()">\' + _(\'Hide Search Matches\') + \'</a></p>\')
          .appendTo($('#searchbox'));
    }
  },

  /**
   * init the domain index toggle buttons
   */
  initIndexTable : function() {
    var togglers = $('img.toggler').click(function() {
      var src = $(this).attr('src');
      var idnum = $(this).attr('id').substr(7);
      $('tr.cg-' + idnum).toggle();
      if (src.substr(-9) === 'minus.png')
        $(this).attr('src', src.substr(0, src.length-9) + 'plus.png');
      else
        $(this).attr('src', src.substr(0, src.length-8) + 'minus.png');
    }).css('display', '');
    if (DOCUMENTATION_OPTIONS.COLLAPSE_INDEX) {
        togglers.click();
    }
  },

  /**
   * helper function to hide the search marks again
   */
  hideSearchWords : function() {
    $('#searchbox .highlight-link').fadeOut(300);
    $('span.highlighted').removeClass('highlighted');
  },

  /**
   * make the url absolute
   */
  makeURL : function(relativeURL) {
    return DOCUMENTATION_OPTIONS.URL_ROOT + '/' + relativeURL;
  },

  /**
   * get the current relative url
   */
  getCurrentURL : function() {
    var path = document.location.pathname;
    var parts = path.split(/\\//);
    $.each(DOCUMENTATION_OPTIONS.URL_ROOT.split(/\\//), function() {
      if (this === '..')
        parts.pop();
    });
    var url = parts.join('/');
    return path.substring(url.lastIndexOf('/') + 1, path.length - 1);
  },

  initOnKeyListeners: function() {
    $(document).keyup(function(event) {
      var activeElementType = document.activeElement.tagName;
      // don't navigate when in search box or textarea
      if (activeElementType !== 'TEXTAREA' && activeElementType !== 'INPUT' && activeElementType !== 'SELECT') {
        switch (event.keyCode) {
          case 37: // left
            var prevHref = $(\'link[rel="prev"]\').prop(\'href\');
            if (prevHref) {
              window.location.href = prevHref;
              return false;
            }
          case 39: // right
            var nextHref = $(\'link[rel="next"]\').prop(\'href\');
            if (nextHref) {
              window.location.href = nextHref;
              return false;
            }
        }
      }
    });
  }
};

// quick alias for translations
_ = Documentation.gettext;

$(document).ready(function() {
  Documentation.init();
});'''

snapshots['test_build_all_docs 41'] = '''var DOCUMENTATION_OPTIONS = {
    URL_ROOT: document.getElementById("documentation_options").getAttribute(\'data-url_root\'),
    VERSION: '',
    LANGUAGE: 'None',
    COLLAPSE_INDEX: false,
    FILE_SUFFIX: '.html',
    HAS_SOURCE: true,
    SOURCELINK_SUFFIX: '.txt'
};'''

snapshots['test_build_all_docs 42'] = '''/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
( function( global, factory ) {

\t"use strict";

\tif ( typeof module === "object" && typeof module.exports === "object" ) {

\t\t// For CommonJS and CommonJS-like environments where a proper `window`
\t\t// is present, execute the factory and get jQuery.
\t\t// For environments that do not have a `window` with a `document`
\t\t// (such as Node.js), expose a factory as module.exports.
\t\t// This accentuates the need for the creation of a real `window`.
\t\t// e.g. var jQuery = require("jquery")(window);
\t\t// See ticket #14549 for more info.
\t\tmodule.exports = global.document ?
\t\t\tfactory( global, true ) :
\t\t\tfunction( w ) {
\t\t\t\tif ( !w.document ) {
\t\t\t\t\tthrow new Error( "jQuery requires a window with a document" );
\t\t\t\t}
\t\t\t\treturn factory( w );
\t\t\t};
\t} else {
\t\tfactory( global );
\t}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



\tfunction DOMEval( code, doc ) {
\t\tdoc = doc || document;

\t\tvar script = doc.createElement( "script" );

\t\tscript.text = code;
\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );
\t}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
\tversion = "3.2.1",

\t// Define a local copy of jQuery
\tjQuery = function( selector, context ) {

\t\t// The jQuery object is actually just the init constructor 'enhanced'
\t\t// Need init if jQuery is called (just allow error to be thrown if not included)
\t\treturn new jQuery.fn.init( selector, context );
\t},

\t// Support: Android <=4.0 only
\t// Make sure we trim BOM and NBSP
\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,

\t// Matches dashed string for camelizing
\trmsPrefix = /^-ms-/,
\trdashAlpha = /-([a-z])/g,

\t// Used by jQuery.camelCase as callback to replace()
\tfcamelCase = function( all, letter ) {
\t\treturn letter.toUpperCase();
\t};

jQuery.fn = jQuery.prototype = {

\t// The current version of jQuery being used
\tjquery: version,

\tconstructor: jQuery,

\t// The default length of a jQuery object is 0
\tlength: 0,

\ttoArray: function() {
\t\treturn slice.call( this );
\t},

\t// Get the Nth element in the matched element set OR
\t// Get the whole matched element set as a clean array
\tget: function( num ) {

\t\t// Return all the elements in a clean array
\t\tif ( num == null ) {
\t\t\treturn slice.call( this );
\t\t}

\t\t// Return just the one element from the set
\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];
\t},

\t// Take an array of elements and push it onto the stack
\t// (returning the new matched element set)
\tpushStack: function( elems ) {

\t\t// Build a new jQuery matched element set
\t\tvar ret = jQuery.merge( this.constructor(), elems );

\t\t// Add the old object onto the stack (as a reference)
\t\tret.prevObject = this;

\t\t// Return the newly-formed element set
\t\treturn ret;
\t},

\t// Execute a callback for every element in the matched set.
\teach: function( callback ) {
\t\treturn jQuery.each( this, callback );
\t},

\tmap: function( callback ) {
\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {
\t\t\treturn callback.call( elem, i, elem );
\t\t} ) );
\t},

\tslice: function() {
\t\treturn this.pushStack( slice.apply( this, arguments ) );
\t},

\tfirst: function() {
\t\treturn this.eq( 0 );
\t},

\tlast: function() {
\t\treturn this.eq( -1 );
\t},

\teq: function( i ) {
\t\tvar len = this.length,
\t\t\tj = +i + ( i < 0 ? len : 0 );
\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
\t},

\tend: function() {
\t\treturn this.prevObject || this.constructor();
\t},

\t// For internal use only.
\t// Behaves like an Array's method, not like a jQuery method.
\tpush: push,
\tsort: arr.sort,
\tsplice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
\tvar options, name, src, copy, copyIsArray, clone,
\t\ttarget = arguments[ 0 ] || {},
\t\ti = 1,
\t\tlength = arguments.length,
\t\tdeep = false;

\t// Handle a deep copy situation
\tif ( typeof target === "boolean" ) {
\t\tdeep = target;

\t\t// Skip the boolean and the target
\t\ttarget = arguments[ i ] || {};
\t\ti++;
\t}

\t// Handle case when target is a string or something (possible in deep copy)
\tif ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
\t\ttarget = {};
\t}

\t// Extend jQuery itself if only one argument is passed
\tif ( i === length ) {
\t\ttarget = this;
\t\ti--;
\t}

\tfor ( ; i < length; i++ ) {

\t\t// Only deal with non-null/undefined values
\t\tif ( ( options = arguments[ i ] ) != null ) {

\t\t\t// Extend the base object
\t\t\tfor ( name in options ) {
\t\t\t\tsrc = target[ name ];
\t\t\t\tcopy = options[ name ];

\t\t\t\t// Prevent never-ending loop
\t\t\t\tif ( target === copy ) {
\t\t\t\t\tcontinue;
\t\t\t\t}

\t\t\t\t// Recurse if we're merging plain objects or arrays
\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||
\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {

\t\t\t\t\tif ( copyIsArray ) {
\t\t\t\t\t\tcopyIsArray = false;
\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];

\t\t\t\t\t} else {
\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};
\t\t\t\t\t}

\t\t\t\t\t// Never move original objects, clone them
\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );

\t\t\t\t// Don't bring in undefined values
\t\t\t\t} else if ( copy !== undefined ) {
\t\t\t\t\ttarget[ name ] = copy;
\t\t\t\t}
\t\t\t}
\t\t}
\t}

\t// Return the modified object
\treturn target;
};

jQuery.extend( {

\t// Unique for each copy of jQuery on the page
\texpando: "jQuery" + ( version + Math.random() ).replace( /\\D/g, "" ),

\t// Assume jQuery is ready without the ready module
\tisReady: true,

\terror: function( msg ) {
\t\tthrow new Error( msg );
\t},

\tnoop: function() {},

\tisFunction: function( obj ) {
\t\treturn jQuery.type( obj ) === "function";
\t},

\tisWindow: function( obj ) {
\t\treturn obj != null && obj === obj.window;
\t},

\tisNumeric: function( obj ) {

\t\t// As of jQuery 3.0, isNumeric is limited to
\t\t// strings and numbers (primitives or objects)
\t\t// that can be coerced to finite numbers (gh-2662)
\t\tvar type = jQuery.type( obj );
\t\treturn ( type === "number" || type === "string" ) &&

\t\t\t// parseFloat NaNs numeric-cast false positives ("")
\t\t\t// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
\t\t\t// subtraction forces infinities to NaN
\t\t\t!isNaN( obj - parseFloat( obj ) );
\t},

\tisPlainObject: function( obj ) {
\t\tvar proto, Ctor;

\t\t// Detect obvious negatives
\t\t// Use toString instead of jQuery.type to catch host objects
\t\tif ( !obj || toString.call( obj ) !== "[object Object]" ) {
\t\t\treturn false;
\t\t}

\t\tproto = getProto( obj );

\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain
\t\tif ( !proto ) {
\t\t\treturn true;
\t\t}

\t\t// Objects with prototype are plain iff they were constructed by a global Object function
\t\tCtor = hasOwn.call( proto, "constructor" ) && proto.constructor;
\t\treturn typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
\t},

\tisEmptyObject: function( obj ) {

\t\t/* eslint-disable no-unused-vars */
\t\t// See https://github.com/eslint/eslint/issues/6125
\t\tvar name;

\t\tfor ( name in obj ) {
\t\t\treturn false;
\t\t}
\t\treturn true;
\t},

\ttype: function( obj ) {
\t\tif ( obj == null ) {
\t\t\treturn obj + "";
\t\t}

\t\t// Support: Android <=2.3 only (functionish RegExp)
\t\treturn typeof obj === "object" || typeof obj === "function" ?
\t\t\tclass2type[ toString.call( obj ) ] || "object" :
\t\t\ttypeof obj;
\t},

\t// Evaluates a script in a global context
\tglobalEval: function( code ) {
\t\tDOMEval( code );
\t},

\t// Convert dashed to camelCase; used by the css and data modules
\t// Support: IE <=9 - 11, Edge 12 - 13
\t// Microsoft forgot to hump their vendor prefix (#9572)
\tcamelCase: function( string ) {
\t\treturn string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
\t},

\teach: function( obj, callback ) {
\t\tvar length, i = 0;

\t\tif ( isArrayLike( obj ) ) {
\t\t\tlength = obj.length;
\t\t\tfor ( ; i < length; i++ ) {
\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
\t\t\t\t\tbreak;
\t\t\t\t}
\t\t\t}
\t\t} else {
\t\t\tfor ( i in obj ) {
\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
\t\t\t\t\tbreak;
\t\t\t\t}
\t\t\t}
\t\t}

\t\treturn obj;
\t},

\t// Support: Android <=4.0 only
\ttrim: function( text ) {
\t\treturn text == null ?
\t\t\t"" :
\t\t\t( text + "" ).replace( rtrim, "" );
\t},

\t// results is for internal usage only
\tmakeArray: function( arr, results ) {
\t\tvar ret = results || [];

\t\tif ( arr != null ) {
\t\t\tif ( isArrayLike( Object( arr ) ) ) {
\t\t\t\tjQuery.merge( ret,
\t\t\t\t\ttypeof arr === "string" ?
\t\t\t\t\t[ arr ] : arr
\t\t\t\t);
\t\t\t} else {
\t\t\t\tpush.call( ret, arr );
\t\t\t}
\t\t}

\t\treturn ret;
\t},

\tinArray: function( elem, arr, i ) {
\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );
\t},

\t// Support: Android <=4.0 only, PhantomJS 1 only
\t// push.apply(_, arraylike) throws on ancient WebKit
\tmerge: function( first, second ) {
\t\tvar len = +second.length,
\t\t\tj = 0,
\t\t\ti = first.length;

\t\tfor ( ; j < len; j++ ) {
\t\t\tfirst[ i++ ] = second[ j ];
\t\t}

\t\tfirst.length = i;

\t\treturn first;
\t},

\tgrep: function( elems, callback, invert ) {
\t\tvar callbackInverse,
\t\t\tmatches = [],
\t\t\ti = 0,
\t\t\tlength = elems.length,
\t\t\tcallbackExpect = !invert;

\t\t// Go through the array, only saving the items
\t\t// that pass the validator function
\t\tfor ( ; i < length; i++ ) {
\t\t\tcallbackInverse = !callback( elems[ i ], i );
\t\t\tif ( callbackInverse !== callbackExpect ) {
\t\t\t\tmatches.push( elems[ i ] );
\t\t\t}
\t\t}

\t\treturn matches;
\t},

\t// arg is for internal usage only
\tmap: function( elems, callback, arg ) {
\t\tvar length, value,
\t\t\ti = 0,
\t\t\tret = [];

\t\t// Go through the array, translating each of the items to their new values
\t\tif ( isArrayLike( elems ) ) {
\t\t\tlength = elems.length;
\t\t\tfor ( ; i < length; i++ ) {
\t\t\t\tvalue = callback( elems[ i ], i, arg );

\t\t\t\tif ( value != null ) {
\t\t\t\t\tret.push( value );
\t\t\t\t}
\t\t\t}

\t\t// Go through every key on the object,
\t\t} else {
\t\t\tfor ( i in elems ) {
\t\t\t\tvalue = callback( elems[ i ], i, arg );

\t\t\t\tif ( value != null ) {
\t\t\t\t\tret.push( value );
\t\t\t\t}
\t\t\t}
\t\t}

\t\t// Flatten any nested arrays
\t\treturn concat.apply( [], ret );
\t},

\t// A global GUID counter for objects
\tguid: 1,

\t// Bind a function to a context, optionally partially applying any
\t// arguments.
\tproxy: function( fn, context ) {
\t\tvar tmp, args, proxy;

\t\tif ( typeof context === "string" ) {
\t\t\ttmp = fn[ context ];
\t\t\tcontext = fn;
\t\t\tfn = tmp;
\t\t}

\t\t// Quick check to determine if target is callable, in the spec
\t\t// this throws a TypeError, but we will just return undefined.
\t\tif ( !jQuery.isFunction( fn ) ) {
\t\t\treturn undefined;
\t\t}

\t\t// Simulated bind
\t\targs = slice.call( arguments, 2 );
\t\tproxy = function() {
\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );
\t\t};

\t\t// Set the guid of unique handler to the same of original handler, so it can be removed
\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;

\t\treturn proxy;
\t},

\tnow: Date.now,

\t// jQuery.support is not used in Core but other projects attach their
\t// properties to it so it needs to exist.
\tsupport: support
} );

if ( typeof Symbol === "function" ) {
\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
\tclass2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

\t// Support: real iOS 8.2 only (not reproducible in simulator)
\t// `in` check used to prevent JIT error (gh-2145)
\t// hasOwn isn't used here due to false negatives
\t// regarding Nodelist length in IE
\tvar length = !!obj && "length" in obj && obj.length,
\t\ttype = jQuery.type( obj );

\tif ( type === "function" || jQuery.isWindow( obj ) ) {
\t\treturn false;
\t}

\treturn type === "array" || length === 0 ||
\t\ttypeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
\tsupport,
\tExpr,
\tgetText,
\tisXML,
\ttokenize,
\tcompile,
\tselect,
\toutermostContext,
\tsortInput,
\thasDuplicate,

\t// Local document vars
\tsetDocument,
\tdocument,
\tdocElem,
\tdocumentIsHTML,
\trbuggyQSA,
\trbuggyMatches,
\tmatches,
\tcontains,

\t// Instance-specific data
\texpando = "sizzle" + 1 * new Date(),
\tpreferredDoc = window.document,
\tdirruns = 0,
\tdone = 0,
\tclassCache = createCache(),
\ttokenCache = createCache(),
\tcompilerCache = createCache(),
\tsortOrder = function( a, b ) {
\t\tif ( a === b ) {
\t\t\thasDuplicate = true;
\t\t}
\t\treturn 0;
\t},

\t// Instance methods
\thasOwn = ({}).hasOwnProperty,
\tarr = [],
\tpop = arr.pop,
\tpush_native = arr.push,
\tpush = arr.push,
\tslice = arr.slice,
\t// Use a stripped-down indexOf as it's faster than native
\t// https://jsperf.com/thor-indexof-vs-for/5
\tindexOf = function( list, elem ) {
\t\tvar i = 0,
\t\t\tlen = list.length;
\t\tfor ( ; i < len; i++ ) {
\t\t\tif ( list[i] === elem ) {
\t\t\t\treturn i;
\t\t\t}
\t\t}
\t\treturn -1;
\t},

\tbooleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

\t// Regular expressions

\t// http://www.w3.org/TR/css3-selectors/#whitespace
\twhitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",

\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
\tidentifier = "(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",

\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
\tattributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
\t\t// Operator (capture 2)
\t\t"*([*^$|!~]?=)" + whitespace +
\t\t// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
\t\t"*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace +
\t\t"*\\\\]",

\tpseudos = ":(" + identifier + ")(?:\\\\((" +
\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
\t\t// 1. quoted (capture 3; capture 4 or capture 5)
\t\t"(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" +
\t\t// 2. simple (capture 6)
\t\t"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" +
\t\t// 3. anything else (capture 2)
\t\t".*" +
\t\t")\\\\)|)",

\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
\trwhitespace = new RegExp( whitespace + "+", "g" ),
\trtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g" ),

\trcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
\trcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

\trattributeQuotes = new RegExp( "=" + whitespace + "*([^\\\\]\'\\"]*?)" + whitespace + "*\\\\]", "g" ),

\trpseudo = new RegExp( pseudos ),
\tridentifier = new RegExp( "^" + identifier + "$" ),

\tmatchExpr = {
\t\t"ID": new RegExp( "^#(" + identifier + ")" ),
\t\t"CLASS": new RegExp( "^\\\\.(" + identifier + ")" ),
\t\t"TAG": new RegExp( "^(" + identifier + "|[*])" ),
\t\t"ATTR": new RegExp( "^" + attributes ),
\t\t"PSEUDO": new RegExp( "^" + pseudos ),
\t\t"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace +
\t\t\t"*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
\t\t\t"*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i" ),
\t\t"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
\t\t// For use in libraries implementing .is()
\t\t// We use this for POS matching in `select`
\t\t"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" +
\t\t\twhitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i" )
\t},

\trinputs = /^(?:input|select|textarea|button)$/i,
\trheader = /^h\\d$/i,

\trnative = /^[^{]+\\{\\s*\\[native \\w/,

\t// Easily-parseable/retrievable ID or TAG or CLASS selectors
\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,

\trsibling = /[+~]/,

\t// CSS escapes
\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
\trunescape = new RegExp( "\\\\\\\\([\\\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
\tfunescape = function( _, escaped, escapedWhitespace ) {
\t\tvar high = "0x" + escaped - 0x10000;
\t\t// NaN means non-codepoint
\t\t// Support: Firefox<24
\t\t// Workaround erroneous numeric interpretation of +"0x"
\t\treturn high !== high || escapedWhitespace ?
\t\t\tescaped :
\t\t\thigh < 0 ?
\t\t\t\t// BMP codepoint
\t\t\t\tString.fromCharCode( high + 0x10000 ) :
\t\t\t\t// Supplemental Plane codepoint (surrogate pair)
\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
\t},

\t// CSS string/identifier serialization
\t// https://drafts.csswg.org/cssom/#common-serializing-idioms
\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,
\tfcssescape = function( ch, asCodePoint ) {
\t\tif ( asCodePoint ) {

\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
\t\t\tif ( ch === "\\0" ) {
\t\t\t\treturn "\\uFFFD";
\t\t\t}

\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points
\t\t\treturn ch.slice( 0, -1 ) + "\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
\t\t}

\t\t// Other potentially-special ASCII characters get backslash-escaped
\t\treturn "\\\\" + ch;
\t},

\t// Used for iframes
\t// See setDocument()
\t// Removing the function wrapper causes a "Permission Denied"
\t// error in IE
\tunloadHandler = function() {
\t\tsetDocument();
\t},

\tdisabledAncestor = addCombinator(
\t\tfunction( elem ) {
\t\t\treturn elem.disabled === true && ("form" in elem || "label" in elem);
\t\t},
\t\t{ dir: "parentNode", next: "legend" }
\t);

// Optimize for push.apply( _, NodeList )
try {
\tpush.apply(
\t\t(arr = slice.call( preferredDoc.childNodes )),
\t\tpreferredDoc.childNodes
\t);
\t// Support: Android<4.0
\t// Detect silently failing push.apply
\tarr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
\tpush = { apply: arr.length ?

\t\t// Leverage slice if possible
\t\tfunction( target, els ) {
\t\t\tpush_native.apply( target, slice.call(els) );
\t\t} :

\t\t// Support: IE<9
\t\t// Otherwise append directly
\t\tfunction( target, els ) {
\t\t\tvar j = target.length,
\t\t\t\ti = 0;
\t\t\t// Can't trust NodeList.length
\t\t\twhile ( (target[j++] = els[i++]) ) {}
\t\t\ttarget.length = j - 1;
\t\t}
\t};
}

function Sizzle( selector, context, results, seed ) {
\tvar m, i, elem, nid, match, groups, newSelector,
\t\tnewContext = context && context.ownerDocument,

\t\t// nodeType defaults to 9, since context defaults to document
\t\tnodeType = context ? context.nodeType : 9;

\tresults = results || [];

\t// Return early from calls with invalid selector or context
\tif ( typeof selector !== "string" || !selector ||
\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

\t\treturn results;
\t}

\t// Try to shortcut find operations (as opposed to filters) in HTML documents
\tif ( !seed ) {

\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
\t\t\tsetDocument( context );
\t\t}
\t\tcontext = context || document;

\t\tif ( documentIsHTML ) {

\t\t\t// If the selector is sufficiently simple, try using a "get*By*" DOM method
\t\t\t// (excepting DocumentFragment context, where the methods don't exist)
\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

\t\t\t\t// ID selector
\t\t\t\tif ( (m = match[1]) ) {

\t\t\t\t\t// Document context
\t\t\t\t\tif ( nodeType === 9 ) {
\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {

\t\t\t\t\t\t\t// Support: IE, Opera, Webkit
\t\t\t\t\t\t\t// TODO: identify versions
\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID
\t\t\t\t\t\t\tif ( elem.id === m ) {
\t\t\t\t\t\t\t\tresults.push( elem );
\t\t\t\t\t\t\t\treturn results;
\t\t\t\t\t\t\t}
\t\t\t\t\t\t} else {
\t\t\t\t\t\t\treturn results;
\t\t\t\t\t\t}

\t\t\t\t\t// Element context
\t\t\t\t\t} else {

\t\t\t\t\t\t// Support: IE, Opera, Webkit
\t\t\t\t\t\t// TODO: identify versions
\t\t\t\t\t\t// getElementById can match elements by name instead of ID
\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&
\t\t\t\t\t\t\tcontains( context, elem ) &&
\t\t\t\t\t\t\telem.id === m ) {

\t\t\t\t\t\t\tresults.push( elem );
\t\t\t\t\t\t\treturn results;
\t\t\t\t\t\t}
\t\t\t\t\t}

\t\t\t\t// Type selector
\t\t\t\t} else if ( match[2] ) {
\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );
\t\t\t\t\treturn results;

\t\t\t\t// Class selector
\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&
\t\t\t\t\tcontext.getElementsByClassName ) {

\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );
\t\t\t\t\treturn results;
\t\t\t\t}
\t\t\t}

\t\t\t// Take advantage of querySelectorAll
\t\t\tif ( support.qsa &&
\t\t\t\t!compilerCache[ selector + " " ] &&
\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

\t\t\t\tif ( nodeType !== 1 ) {
\t\t\t\t\tnewContext = context;
\t\t\t\t\tnewSelector = selector;

\t\t\t\t// qSA looks outside Element context, which is not what we want
\t\t\t\t// Thanks to Andrew Dupont for this workaround technique
\t\t\t\t// Support: IE <=8
\t\t\t\t// Exclude object elements
\t\t\t\t} else if ( context.nodeName.toLowerCase() !== "object" ) {

\t\t\t\t\t// Capture the context ID, setting it first if necessary
\t\t\t\t\tif ( (nid = context.getAttribute( "id" )) ) {
\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );
\t\t\t\t\t} else {
\t\t\t\t\t\tcontext.setAttribute( "id", (nid = expando) );
\t\t\t\t\t}

\t\t\t\t\t// Prefix every selector in the list
\t\t\t\t\tgroups = tokenize( selector );
\t\t\t\t\ti = groups.length;
\t\t\t\t\twhile ( i-- ) {
\t\t\t\t\t\tgroups[i] = "#" + nid + " " + toSelector( groups[i] );
\t\t\t\t\t}
\t\t\t\t\tnewSelector = groups.join( "," );

\t\t\t\t\t// Expand context for sibling selectors
\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
\t\t\t\t\t\tcontext;
\t\t\t\t}

\t\t\t\tif ( newSelector ) {
\t\t\t\t\ttry {
\t\t\t\t\t\tpush.apply( results,
\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )
\t\t\t\t\t\t);
\t\t\t\t\t\treturn results;
\t\t\t\t\t} catch ( qsaError ) {
\t\t\t\t\t} finally {
\t\t\t\t\t\tif ( nid === expando ) {
\t\t\t\t\t\t\tcontext.removeAttribute( "id" );
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}
\t}

\t// All others
\treturn select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *\tdeleting the oldest entry
 */
function createCache() {
\tvar keys = [];

\tfunction cache( key, value ) {
\t\t// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
\t\tif ( keys.push( key + " " ) > Expr.cacheLength ) {
\t\t\t// Only keep the most recent entries
\t\t\tdelete cache[ keys.shift() ];
\t\t}
\t\treturn (cache[ key + " " ] = value);
\t}
\treturn cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
\tfn[ expando ] = true;
\treturn fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
\tvar el = document.createElement("fieldset");

\ttry {
\t\treturn !!fn( el );
\t} catch (e) {
\t\treturn false;
\t} finally {
\t\t// Remove from its parent by default
\t\tif ( el.parentNode ) {
\t\t\tel.parentNode.removeChild( el );
\t\t}
\t\t// release memory in IE
\t\tel = null;
\t}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
\tvar arr = attrs.split("|"),
\t\ti = arr.length;

\twhile ( i-- ) {
\t\tExpr.attrHandle[ arr[i] ] = handler;
\t}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
\tvar cur = b && a,
\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&
\t\t\ta.sourceIndex - b.sourceIndex;

\t// Use IE sourceIndex if available on both nodes
\tif ( diff ) {
\t\treturn diff;
\t}

\t// Check if b follows a
\tif ( cur ) {
\t\twhile ( (cur = cur.nextSibling) ) {
\t\t\tif ( cur === b ) {
\t\t\t\treturn -1;
\t\t\t}
\t\t}
\t}

\treturn a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
\treturn function( elem ) {
\t\tvar name = elem.nodeName.toLowerCase();
\t\treturn name === "input" && elem.type === type;
\t};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
\treturn function( elem ) {
\t\tvar name = elem.nodeName.toLowerCase();
\t\treturn (name === "input" || name === "button") && elem.type === type;
\t};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
\treturn function( elem ) {

\t\t// Only certain elements can match :enabled or :disabled
\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
\t\tif ( "form" in elem ) {

\t\t\t// Check for inherited disabledness on relevant non-disabled elements:
\t\t\t// * listed form-associated elements in a disabled fieldset
\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
\t\t\t// * option elements in a disabled optgroup
\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
\t\t\t// All such elements have a "form" property.
\t\t\tif ( elem.parentNode && elem.disabled === false ) {

\t\t\t\t// Option elements defer to a parent optgroup if present
\t\t\t\tif ( "label" in elem ) {
\t\t\t\t\tif ( "label" in elem.parentNode ) {
\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;
\t\t\t\t\t} else {
\t\t\t\t\t\treturn elem.disabled === disabled;
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\t// Support: IE 6 - 11
\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors
\t\t\t\treturn elem.isDisabled === disabled ||

\t\t\t\t\t// Where there is no isDisabled, check manually
\t\t\t\t\t/* jshint -W018 */
\t\t\t\t\telem.isDisabled !== !disabled &&
\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;
\t\t\t}

\t\t\treturn elem.disabled === disabled;

\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.
\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
\t\t// even exist on them, let alone have a boolean value.
\t\t} else if ( "label" in elem ) {
\t\t\treturn elem.disabled === disabled;
\t\t}

\t\t// Remaining elements are neither :enabled nor :disabled
\t\treturn false;
\t};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
\treturn markFunction(function( argument ) {
\t\targument = +argument;
\t\treturn markFunction(function( seed, matches ) {
\t\t\tvar j,
\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),
\t\t\t\ti = matchIndexes.length;

\t\t\t// Match elements found at the specified indexes
\t\t\twhile ( i-- ) {
\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {
\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);
\t\t\t\t}
\t\t\t}
\t\t});
\t});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
\treturn context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
\t// documentElement is verified for cases where it doesn't yet exist
\t// (such as loading iframes in IE - #4833)
\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;
\treturn documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
\tvar hasCompare, subWindow,
\t\tdoc = node ? node.ownerDocument || node : preferredDoc;

\t// Return early if doc is invalid or already selected
\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
\t\treturn document;
\t}

\t// Update global variables
\tdocument = doc;
\tdocElem = document.documentElement;
\tdocumentIsHTML = !isXML( document );

\t// Support: IE 9-11, Edge
\t// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
\tif ( preferredDoc !== document &&
\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

\t\t// Support: IE 11, Edge
\t\tif ( subWindow.addEventListener ) {
\t\t\tsubWindow.addEventListener( "unload", unloadHandler, false );

\t\t// Support: IE 9 - 10 only
\t\t} else if ( subWindow.attachEvent ) {
\t\t\tsubWindow.attachEvent( "onunload", unloadHandler );
\t\t}
\t}

\t/* Attributes
\t---------------------------------------------------------------------- */

\t// Support: IE<8
\t// Verify that getAttribute really returns attributes and not properties
\t// (excepting IE8 booleans)
\tsupport.attributes = assert(function( el ) {
\t\tel.className = "i";
\t\treturn !el.getAttribute("className");
\t});

\t/* getElement(s)By*
\t---------------------------------------------------------------------- */

\t// Check if getElementsByTagName("*") returns only elements
\tsupport.getElementsByTagName = assert(function( el ) {
\t\tel.appendChild( document.createComment("") );
\t\treturn !el.getElementsByTagName("*").length;
\t});

\t// Support: IE<9
\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );

\t// Support: IE<10
\t// Check if getElementById returns elements by name
\t// The broken getElementById methods don't pick up programmatically-set names,
\t// so use a roundabout getElementsByName test
\tsupport.getById = assert(function( el ) {
\t\tdocElem.appendChild( el ).id = expando;
\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;
\t});

\t// ID filter and find
\tif ( support.getById ) {
\t\tExpr.filter["ID"] = function( id ) {
\t\t\tvar attrId = id.replace( runescape, funescape );
\t\t\treturn function( elem ) {
\t\t\t\treturn elem.getAttribute("id") === attrId;
\t\t\t};
\t\t};
\t\tExpr.find["ID"] = function( id, context ) {
\t\t\tif ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
\t\t\t\tvar elem = context.getElementById( id );
\t\t\t\treturn elem ? [ elem ] : [];
\t\t\t}
\t\t};
\t} else {
\t\tExpr.filter["ID"] =  function( id ) {
\t\t\tvar attrId = id.replace( runescape, funescape );
\t\t\treturn function( elem ) {
\t\t\t\tvar node = typeof elem.getAttributeNode !== "undefined" &&
\t\t\t\t\telem.getAttributeNode("id");
\t\t\t\treturn node && node.value === attrId;
\t\t\t};
\t\t};

\t\t// Support: IE 6 - 7 only
\t\t// getElementById is not reliable as a find shortcut
\t\tExpr.find["ID"] = function( id, context ) {
\t\t\tif ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
\t\t\t\tvar node, i, elems,
\t\t\t\t\telem = context.getElementById( id );

\t\t\t\tif ( elem ) {

\t\t\t\t\t// Verify the id attribute
\t\t\t\t\tnode = elem.getAttributeNode("id");
\t\t\t\t\tif ( node && node.value === id ) {
\t\t\t\t\t\treturn [ elem ];
\t\t\t\t\t}

\t\t\t\t\t// Fall back on getElementsByName
\t\t\t\t\telems = context.getElementsByName( id );
\t\t\t\t\ti = 0;
\t\t\t\t\twhile ( (elem = elems[i++]) ) {
\t\t\t\t\t\tnode = elem.getAttributeNode("id");
\t\t\t\t\t\tif ( node && node.value === id ) {
\t\t\t\t\t\t\treturn [ elem ];
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\treturn [];
\t\t\t}
\t\t};
\t}

\t// Tag
\tExpr.find["TAG"] = support.getElementsByTagName ?
\t\tfunction( tag, context ) {
\t\t\tif ( typeof context.getElementsByTagName !== "undefined" ) {
\t\t\t\treturn context.getElementsByTagName( tag );

\t\t\t// DocumentFragment nodes don't have gEBTN
\t\t\t} else if ( support.qsa ) {
\t\t\t\treturn context.querySelectorAll( tag );
\t\t\t}
\t\t} :

\t\tfunction( tag, context ) {
\t\t\tvar elem,
\t\t\t\ttmp = [],
\t\t\t\ti = 0,
\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
\t\t\t\tresults = context.getElementsByTagName( tag );

\t\t\t// Filter out possible comments
\t\t\tif ( tag === "*" ) {
\t\t\t\twhile ( (elem = results[i++]) ) {
\t\t\t\t\tif ( elem.nodeType === 1 ) {
\t\t\t\t\t\ttmp.push( elem );
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\treturn tmp;
\t\t\t}
\t\t\treturn results;
\t\t};

\t// Class
\tExpr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
\t\tif ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
\t\t\treturn context.getElementsByClassName( className );
\t\t}
\t};

\t/* QSA/matchesSelector
\t---------------------------------------------------------------------- */

\t// QSA and matchesSelector support

\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
\trbuggyMatches = [];

\t// qSa(:focus) reports false when true (Chrome 21)
\t// We allow this because of a bug in IE8/9 that throws an error
\t// whenever `document.activeElement` is accessed on an iframe
\t// So, we allow :focus to pass through QSA all the time to avoid the IE error
\t// See https://bugs.jquery.com/ticket/13378
\trbuggyQSA = [];

\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
\t\t// Build QSA regex
\t\t// Regex strategy adopted from Diego Perini
\t\tassert(function( el ) {
\t\t\t// Select is set to empty string on purpose
\t\t\t// This is to test IE's treatment of not explicitly
\t\t\t// setting a boolean content attribute,
\t\t\t// since its presence should be enough
\t\t\t// https://bugs.jquery.com/ticket/12359
\t\t\tdocElem.appendChild( el ).innerHTML = "<a id=\'" + expando + "\'></a>" +
\t\t\t\t"<select id=\'" + expando + "-\\r\\\\\' msallowcapture=\'\'>" +
\t\t\t\t"<option selected=\'\'></option></select>";

\t\t\t// Support: IE8, Opera 11-12.16
\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=
\t\t\t// The test attribute must be unknown in Opera but "safe" for WinRT
\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
\t\t\tif ( el.querySelectorAll("[msallowcapture^=\'\']").length ) {
\t\t\t\trbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\'\'|\\"\\")" );
\t\t\t}

\t\t\t// Support: IE8
\t\t\t// Boolean attributes and "value" are not treated correctly
\t\t\tif ( !el.querySelectorAll("[selected]").length ) {
\t\t\t\trbuggyQSA.push( "\\\\[" + whitespace + "*(?:value|" + booleans + ")" );
\t\t\t}

\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
\t\t\tif ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
\t\t\t\trbuggyQSA.push("~=");
\t\t\t}

\t\t\t// Webkit/Opera - :checked should return selected option elements
\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
\t\t\t// IE8 throws error here and will not see later tests
\t\t\tif ( !el.querySelectorAll(":checked").length ) {
\t\t\t\trbuggyQSA.push(":checked");
\t\t\t}

\t\t\t// Support: Safari 8+, iOS 8+
\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851
\t\t\t// In-page `selector#id sibling-combinator selector` fails
\t\t\tif ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
\t\t\t\trbuggyQSA.push(".#.+[+~]");
\t\t\t}
\t\t});

\t\tassert(function( el ) {
\t\t\tel.innerHTML = "<a href=\'\' disabled=\'disabled\'></a>" +
\t\t\t\t"<select disabled=\'disabled\'><option/></select>";

\t\t\t// Support: Windows 8 Native Apps
\t\t\t// The type and name attributes are restricted during .innerHTML assignment
\t\t\tvar input = document.createElement("input");
\t\t\tinput.setAttribute( "type", "hidden" );
\t\t\tel.appendChild( input ).setAttribute( "name", "D" );

\t\t\t// Support: IE8
\t\t\t// Enforce case-sensitivity of name attribute
\t\t\tif ( el.querySelectorAll("[name=d]").length ) {
\t\t\t\trbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
\t\t\t}

\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
\t\t\t// IE8 throws error here and will not see later tests
\t\t\tif ( el.querySelectorAll(":enabled").length !== 2 ) {
\t\t\t\trbuggyQSA.push( ":enabled", ":disabled" );
\t\t\t}

\t\t\t// Support: IE9-11+
\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets
\t\t\tdocElem.appendChild( el ).disabled = true;
\t\t\tif ( el.querySelectorAll(":disabled").length !== 2 ) {
\t\t\t\trbuggyQSA.push( ":enabled", ":disabled" );
\t\t\t}

\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos
\t\t\tel.querySelectorAll("*,:x");
\t\t\trbuggyQSA.push(",.*:");
\t\t});
\t}

\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
\t\tdocElem.webkitMatchesSelector ||
\t\tdocElem.mozMatchesSelector ||
\t\tdocElem.oMatchesSelector ||
\t\tdocElem.msMatchesSelector) )) ) {

\t\tassert(function( el ) {
\t\t\t// Check to see if it's possible to do matchesSelector
\t\t\t// on a disconnected node (IE 9)
\t\t\tsupport.disconnectedMatch = matches.call( el, "*" );

\t\t\t// This should fail with an exception
\t\t\t// Gecko does not error, returns false instead
\t\t\tmatches.call( el, "[s!=\'\']:x" );
\t\t\trbuggyMatches.push( "!=", pseudos );
\t\t});
\t}

\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

\t/* Contains
\t---------------------------------------------------------------------- */
\thasCompare = rnative.test( docElem.compareDocumentPosition );

\t// Element contains another
\t// Purposefully self-exclusive
\t// As in, an element does not contain itself
\tcontains = hasCompare || rnative.test( docElem.contains ) ?
\t\tfunction( a, b ) {
\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,
\t\t\t\tbup = b && b.parentNode;
\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (
\t\t\t\tadown.contains ?
\t\t\t\t\tadown.contains( bup ) :
\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
\t\t\t));
\t\t} :
\t\tfunction( a, b ) {
\t\t\tif ( b ) {
\t\t\t\twhile ( (b = b.parentNode) ) {
\t\t\t\t\tif ( b === a ) {
\t\t\t\t\t\treturn true;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t\treturn false;
\t\t};

\t/* Sorting
\t---------------------------------------------------------------------- */

\t// Document order sorting
\tsortOrder = hasCompare ?
\tfunction( a, b ) {

\t\t// Flag for duplicate removal
\t\tif ( a === b ) {
\t\t\thasDuplicate = true;
\t\t\treturn 0;
\t\t}

\t\t// Sort on method existence if only one input has compareDocumentPosition
\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
\t\tif ( compare ) {
\t\t\treturn compare;
\t\t}

\t\t// Calculate position if both inputs belong to the same document
\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
\t\t\ta.compareDocumentPosition( b ) :

\t\t\t// Otherwise we know they are disconnected
\t\t\t1;

\t\t// Disconnected nodes
\t\tif ( compare & 1 ||
\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

\t\t\t// Choose the first element that is related to our preferred document
\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
\t\t\t\treturn -1;
\t\t\t}
\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
\t\t\t\treturn 1;
\t\t\t}

\t\t\t// Maintain original order
\t\t\treturn sortInput ?
\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
\t\t\t\t0;
\t\t}

\t\treturn compare & 4 ? -1 : 1;
\t} :
\tfunction( a, b ) {
\t\t// Exit early if the nodes are identical
\t\tif ( a === b ) {
\t\t\thasDuplicate = true;
\t\t\treturn 0;
\t\t}

\t\tvar cur,
\t\t\ti = 0,
\t\t\taup = a.parentNode,
\t\t\tbup = b.parentNode,
\t\t\tap = [ a ],
\t\t\tbp = [ b ];

\t\t// Parentless nodes are either documents or disconnected
\t\tif ( !aup || !bup ) {
\t\t\treturn a === document ? -1 :
\t\t\t\tb === document ? 1 :
\t\t\t\taup ? -1 :
\t\t\t\tbup ? 1 :
\t\t\t\tsortInput ?
\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
\t\t\t\t0;

\t\t// If the nodes are siblings, we can do a quick check
\t\t} else if ( aup === bup ) {
\t\t\treturn siblingCheck( a, b );
\t\t}

\t\t// Otherwise we need full lists of their ancestors for comparison
\t\tcur = a;
\t\twhile ( (cur = cur.parentNode) ) {
\t\t\tap.unshift( cur );
\t\t}
\t\tcur = b;
\t\twhile ( (cur = cur.parentNode) ) {
\t\t\tbp.unshift( cur );
\t\t}

\t\t// Walk down the tree looking for a discrepancy
\t\twhile ( ap[i] === bp[i] ) {
\t\t\ti++;
\t\t}

\t\treturn i ?
\t\t\t// Do a sibling check if the nodes have a common ancestor
\t\t\tsiblingCheck( ap[i], bp[i] ) :

\t\t\t// Otherwise nodes in our document sort first
\t\t\tap[i] === preferredDoc ? -1 :
\t\t\tbp[i] === preferredDoc ? 1 :
\t\t\t0;
\t};

\treturn document;
};

Sizzle.matches = function( expr, elements ) {
\treturn Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
\t// Set document vars if needed
\tif ( ( elem.ownerDocument || elem ) !== document ) {
\t\tsetDocument( elem );
\t}

\t// Make sure that attribute selectors are quoted
\texpr = expr.replace( rattributeQuotes, "=\'$1\']" );

\tif ( support.matchesSelector && documentIsHTML &&
\t\t!compilerCache[ expr + " " ] &&
\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

\t\ttry {
\t\t\tvar ret = matches.call( elem, expr );

\t\t\t// IE 9's matchesSelector returns false on disconnected nodes
\t\t\tif ( ret || support.disconnectedMatch ||
\t\t\t\t\t// As well, disconnected nodes are said to be in a document
\t\t\t\t\t// fragment in IE 9
\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {
\t\t\t\treturn ret;
\t\t\t}
\t\t} catch (e) {}
\t}

\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
\t// Set document vars if needed
\tif ( ( context.ownerDocument || context ) !== document ) {
\t\tsetDocument( context );
\t}
\treturn contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
\t// Set document vars if needed
\tif ( ( elem.ownerDocument || elem ) !== document ) {
\t\tsetDocument( elem );
\t}

\tvar fn = Expr.attrHandle[ name.toLowerCase() ],
\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)
\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
\t\t\tfn( elem, name, !documentIsHTML ) :
\t\t\tundefined;

\treturn val !== undefined ?
\t\tval :
\t\tsupport.attributes || !documentIsHTML ?
\t\t\telem.getAttribute( name ) :
\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?
\t\t\t\tval.value :
\t\t\t\tnull;
};

Sizzle.escape = function( sel ) {
\treturn (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
\tthrow new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
\tvar elem,
\t\tduplicates = [],
\t\tj = 0,
\t\ti = 0;

\t// Unless we *know* we can detect duplicates, assume their presence
\thasDuplicate = !support.detectDuplicates;
\tsortInput = !support.sortStable && results.slice( 0 );
\tresults.sort( sortOrder );

\tif ( hasDuplicate ) {
\t\twhile ( (elem = results[i++]) ) {
\t\t\tif ( elem === results[ i ] ) {
\t\t\t\tj = duplicates.push( i );
\t\t\t}
\t\t}
\t\twhile ( j-- ) {
\t\t\tresults.splice( duplicates[ j ], 1 );
\t\t}
\t}

\t// Clear input after sorting to release objects
\t// See https://github.com/jquery/sizzle/pull/225
\tsortInput = null;

\treturn results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
\tvar node,
\t\tret = "",
\t\ti = 0,
\t\tnodeType = elem.nodeType;

\tif ( !nodeType ) {
\t\t// If no nodeType, this is expected to be an array
\t\twhile ( (node = elem[i++]) ) {
\t\t\t// Do not traverse comment nodes
\t\t\tret += getText( node );
\t\t}
\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
\t\t// Use textContent for elements
\t\t// innerText usage removed for consistency of new lines (jQuery #11153)
\t\tif ( typeof elem.textContent === "string" ) {
\t\t\treturn elem.textContent;
\t\t} else {
\t\t\t// Traverse its children
\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
\t\t\t\tret += getText( elem );
\t\t\t}
\t\t}
\t} else if ( nodeType === 3 || nodeType === 4 ) {
\t\treturn elem.nodeValue;
\t}
\t// Do not include comment or processing instruction nodes

\treturn ret;
};

Expr = Sizzle.selectors = {

\t// Can be adjusted by the user
\tcacheLength: 50,

\tcreatePseudo: markFunction,

\tmatch: matchExpr,

\tattrHandle: {},

\tfind: {},

\trelative: {
\t\t">": { dir: "parentNode", first: true },
\t\t" ": { dir: "parentNode" },
\t\t"+": { dir: "previousSibling", first: true },
\t\t"~": { dir: "previousSibling" }
\t},

\tpreFilter: {
\t\t"ATTR": function( match ) {
\t\t\tmatch[1] = match[1].replace( runescape, funescape );

\t\t\t// Move the given value to match[3] whether quoted or unquoted
\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

\t\t\tif ( match[2] === "~=" ) {
\t\t\t\tmatch[3] = " " + match[3] + " ";
\t\t\t}

\t\t\treturn match.slice( 0, 4 );
\t\t},

\t\t"CHILD": function( match ) {
\t\t\t/* matches from matchExpr["CHILD"]
\t\t\t\t1 type (only|nth|...)
\t\t\t\t2 what (child|of-type)
\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)
\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)
\t\t\t\t5 sign of xn-component
\t\t\t\t6 x of xn-component
\t\t\t\t7 sign of y-component
\t\t\t\t8 y of y-component
\t\t\t*/
\t\t\tmatch[1] = match[1].toLowerCase();

\t\t\tif ( match[1].slice( 0, 3 ) === "nth" ) {
\t\t\t\t// nth-* requires argument
\t\t\t\tif ( !match[3] ) {
\t\t\t\t\tSizzle.error( match[0] );
\t\t\t\t}

\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD
\t\t\t\t// remember that false/true cast respectively to 0/1
\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

\t\t\t// other types prohibit arguments
\t\t\t} else if ( match[3] ) {
\t\t\t\tSizzle.error( match[0] );
\t\t\t}

\t\t\treturn match;
\t\t},

\t\t"PSEUDO": function( match ) {
\t\t\tvar excess,
\t\t\t\tunquoted = !match[6] && match[2];

\t\t\tif ( matchExpr["CHILD"].test( match[0] ) ) {
\t\t\t\treturn null;
\t\t\t}

\t\t\t// Accept quoted arguments as-is
\t\t\tif ( match[3] ) {
\t\t\t\tmatch[2] = match[4] || match[5] || "";

\t\t\t// Strip excess characters from unquoted arguments
\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&
\t\t\t\t// Get excess from tokenize (recursively)
\t\t\t\t(excess = tokenize( unquoted, true )) &&
\t\t\t\t// advance to the next closing parenthesis
\t\t\t\t(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

\t\t\t\t// excess is a negative index
\t\t\t\tmatch[0] = match[0].slice( 0, excess );
\t\t\t\tmatch[2] = unquoted.slice( 0, excess );
\t\t\t}

\t\t\t// Return only captures needed by the pseudo filter method (type and argument)
\t\t\treturn match.slice( 0, 3 );
\t\t}
\t},

\tfilter: {

\t\t"TAG": function( nodeNameSelector ) {
\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
\t\t\treturn nodeNameSelector === "*" ?
\t\t\t\tfunction() { return true; } :
\t\t\t\tfunction( elem ) {
\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
\t\t\t\t};
\t\t},

\t\t"CLASS": function( className ) {
\t\t\tvar pattern = classCache[ className + " " ];

\t\t\treturn pattern ||
\t\t\t\t(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
\t\t\t\tclassCache( className, function( elem ) {
\t\t\t\t\treturn pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
\t\t\t\t});
\t\t},

\t\t"ATTR": function( name, operator, check ) {
\t\t\treturn function( elem ) {
\t\t\t\tvar result = Sizzle.attr( elem, name );

\t\t\t\tif ( result == null ) {
\t\t\t\t\treturn operator === "!=";
\t\t\t\t}
\t\t\t\tif ( !operator ) {
\t\t\t\t\treturn true;
\t\t\t\t}

\t\t\t\tresult += "";

\t\t\t\treturn operator === "=" ? result === check :
\t\t\t\t\toperator === "!=" ? result !== check :
\t\t\t\t\toperator === "^=" ? check && result.indexOf( check ) === 0 :
\t\t\t\t\toperator === "*=" ? check && result.indexOf( check ) > -1 :
\t\t\t\t\toperator === "$=" ? check && result.slice( -check.length ) === check :
\t\t\t\t\toperator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
\t\t\t\t\toperator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
\t\t\t\t\tfalse;
\t\t\t};
\t\t},

\t\t"CHILD": function( type, what, argument, first, last ) {
\t\t\tvar simple = type.slice( 0, 3 ) !== "nth",
\t\t\t\tforward = type.slice( -4 ) !== "last",
\t\t\t\tofType = what === "of-type";

\t\t\treturn first === 1 && last === 0 ?

\t\t\t\t// Shortcut for :nth-*(n)
\t\t\t\tfunction( elem ) {
\t\t\t\t\treturn !!elem.parentNode;
\t\t\t\t} :

\t\t\t\tfunction( elem, context, xml ) {
\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,
\t\t\t\t\t\tdir = simple !== forward ? "nextSibling" : "previousSibling",
\t\t\t\t\t\tparent = elem.parentNode,
\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),
\t\t\t\t\t\tuseCache = !xml && !ofType,
\t\t\t\t\t\tdiff = false;

\t\t\t\t\tif ( parent ) {

\t\t\t\t\t\t// :(first|last|only)-(child|of-type)
\t\t\t\t\t\tif ( simple ) {
\t\t\t\t\t\t\twhile ( dir ) {
\t\t\t\t\t\t\t\tnode = elem;
\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {
\t\t\t\t\t\t\t\t\tif ( ofType ?
\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :
\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {

\t\t\t\t\t\t\t\t\t\treturn false;
\t\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)
\t\t\t\t\t\t\t\tstart = dir = type === "only" && !start && "nextSibling";
\t\t\t\t\t\t\t}
\t\t\t\t\t\t\treturn true;
\t\t\t\t\t\t}

\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];

\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`
\t\t\t\t\t\tif ( forward && useCache ) {

\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index

\t\t\t\t\t\t\t// ...in a gzip-friendly way
\t\t\t\t\t\t\tnode = parent;
\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});

\t\t\t\t\t\t\t// Support: IE <9 only
\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)
\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||
\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});

\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];
\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];
\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];

\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||

\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start
\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {

\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break
\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {
\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
\t\t\t\t\t\t\t\t\tbreak;
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t}

\t\t\t\t\t\t} else {
\t\t\t\t\t\t\t// Use previously-cached element index if available
\t\t\t\t\t\t\tif ( useCache ) {
\t\t\t\t\t\t\t\t// ...in a gzip-friendly way
\t\t\t\t\t\t\t\tnode = elem;
\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});

\t\t\t\t\t\t\t\t// Support: IE <9 only
\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)
\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||
\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});

\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];
\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
\t\t\t\t\t\t\t\tdiff = nodeIndex;
\t\t\t\t\t\t\t}

\t\t\t\t\t\t\t// xml :nth-child(...)
\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)
\t\t\t\t\t\t\tif ( diff === false ) {
\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start
\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||
\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {

\t\t\t\t\t\t\t\t\tif ( ( ofType ?
\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :
\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&
\t\t\t\t\t\t\t\t\t\t++diff ) {

\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element
\t\t\t\t\t\t\t\t\t\tif ( useCache ) {
\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});

\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only
\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)
\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||
\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});

\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];
\t\t\t\t\t\t\t\t\t\t}

\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {
\t\t\t\t\t\t\t\t\t\t\tbreak;
\t\t\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}

\t\t\t\t\t\t// Incorporate the offset, then check against cycle size
\t\t\t\t\t\tdiff -= last;
\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );
\t\t\t\t\t}
\t\t\t\t};
\t\t},

\t\t"PSEUDO": function( pseudo, argument ) {
\t\t\t// pseudo-class names are case-insensitive
\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes
\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
\t\t\t// Remember that setFilters inherits from pseudos
\t\t\tvar args,
\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
\t\t\t\t\tSizzle.error( "unsupported pseudo: " + pseudo );

\t\t\t// The user may use createPseudo to indicate that
\t\t\t// arguments are needed to create the filter function
\t\t\t// just as Sizzle does
\t\t\tif ( fn[ expando ] ) {
\t\t\t\treturn fn( argument );
\t\t\t}

\t\t\t// But maintain support for old signatures
\t\t\tif ( fn.length > 1 ) {
\t\t\t\targs = [ pseudo, pseudo, "", argument ];
\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
\t\t\t\t\tmarkFunction(function( seed, matches ) {
\t\t\t\t\t\tvar idx,
\t\t\t\t\t\t\tmatched = fn( seed, argument ),
\t\t\t\t\t\t\ti = matched.length;
\t\t\t\t\t\twhile ( i-- ) {
\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );
\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );
\t\t\t\t\t\t}
\t\t\t\t\t}) :
\t\t\t\t\tfunction( elem ) {
\t\t\t\t\t\treturn fn( elem, 0, args );
\t\t\t\t\t};
\t\t\t}

\t\t\treturn fn;
\t\t}
\t},

\tpseudos: {
\t\t// Potentially complex pseudos
\t\t"not": markFunction(function( selector ) {
\t\t\t// Trim the selector passed to compile
\t\t\t// to avoid treating leading and trailing
\t\t\t// spaces as combinators
\t\t\tvar input = [],
\t\t\t\tresults = [],
\t\t\t\tmatcher = compile( selector.replace( rtrim, "$1" ) );

\t\t\treturn matcher[ expando ] ?
\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {
\t\t\t\t\tvar elem,
\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),
\t\t\t\t\t\ti = seed.length;

\t\t\t\t\t// Match elements unmatched by `matcher`
\t\t\t\t\twhile ( i-- ) {
\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {
\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}) :
\t\t\t\tfunction( elem, context, xml ) {
\t\t\t\t\tinput[0] = elem;
\t\t\t\t\tmatcher( input, null, xml, results );
\t\t\t\t\t// Don't keep the element (issue #299)
\t\t\t\t\tinput[0] = null;
\t\t\t\t\treturn !results.pop();
\t\t\t\t};
\t\t}),

\t\t"has": markFunction(function( selector ) {
\t\t\treturn function( elem ) {
\t\t\t\treturn Sizzle( selector, elem ).length > 0;
\t\t\t};
\t\t}),

\t\t"contains": markFunction(function( text ) {
\t\t\ttext = text.replace( runescape, funescape );
\t\t\treturn function( elem ) {
\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
\t\t\t};
\t\t}),

\t\t// "Whether an element is represented by a :lang() selector
\t\t// is based solely on the element's language value
\t\t// being equal to the identifier C,
\t\t// or beginning with the identifier C immediately followed by "-".
\t\t// The matching of C against the element's language value is performed case-insensitively.
\t\t// The identifier C does not have to be a valid language name."
\t\t// http://www.w3.org/TR/selectors/#lang-pseudo
\t\t"lang": markFunction( function( lang ) {
\t\t\t// lang value must be a valid identifier
\t\t\tif ( !ridentifier.test(lang || "") ) {
\t\t\t\tSizzle.error( "unsupported lang: " + lang );
\t\t\t}
\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();
\t\t\treturn function( elem ) {
\t\t\t\tvar elemLang;
\t\t\t\tdo {
\t\t\t\t\tif ( (elemLang = documentIsHTML ?
\t\t\t\t\t\telem.lang :
\t\t\t\t\t\telem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

\t\t\t\t\t\telemLang = elemLang.toLowerCase();
\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
\t\t\t\t\t}
\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
\t\t\t\treturn false;
\t\t\t};
\t\t}),

\t\t// Miscellaneous
\t\t"target": function( elem ) {
\t\t\tvar hash = window.location && window.location.hash;
\t\t\treturn hash && hash.slice( 1 ) === elem.id;
\t\t},

\t\t"root": function( elem ) {
\t\t\treturn elem === docElem;
\t\t},

\t\t"focus": function( elem ) {
\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
\t\t},

\t\t// Boolean properties
\t\t"enabled": createDisabledPseudo( false ),
\t\t"disabled": createDisabledPseudo( true ),

\t\t"checked": function( elem ) {
\t\t\t// In CSS3, :checked should return both checked and selected elements
\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
\t\t\tvar nodeName = elem.nodeName.toLowerCase();
\t\t\treturn (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
\t\t},

\t\t"selected": function( elem ) {
\t\t\t// Accessing this property makes selected-by-default
\t\t\t// options in Safari work properly
\t\t\tif ( elem.parentNode ) {
\t\t\t\telem.parentNode.selectedIndex;
\t\t\t}

\t\t\treturn elem.selected === true;
\t\t},

\t\t// Contents
\t\t"empty": function( elem ) {
\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo
\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)
\t\t\t// nodeType < 6 works because attributes (2) do not appear as children
\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
\t\t\t\tif ( elem.nodeType < 6 ) {
\t\t\t\t\treturn false;
\t\t\t\t}
\t\t\t}
\t\t\treturn true;
\t\t},

\t\t"parent": function( elem ) {
\t\t\treturn !Expr.pseudos["empty"]( elem );
\t\t},

\t\t// Element/input types
\t\t"header": function( elem ) {
\t\t\treturn rheader.test( elem.nodeName );
\t\t},

\t\t"input": function( elem ) {
\t\t\treturn rinputs.test( elem.nodeName );
\t\t},

\t\t"button": function( elem ) {
\t\t\tvar name = elem.nodeName.toLowerCase();
\t\t\treturn name === "input" && elem.type === "button" || name === "button";
\t\t},

\t\t"text": function( elem ) {
\t\t\tvar attr;
\t\t\treturn elem.nodeName.toLowerCase() === "input" &&
\t\t\t\telem.type === "text" &&

\t\t\t\t// Support: IE<8
\t\t\t\t// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
\t\t\t\t( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
\t\t},

\t\t// Position-in-collection
\t\t"first": createPositionalPseudo(function() {
\t\t\treturn [ 0 ];
\t\t}),

\t\t"last": createPositionalPseudo(function( matchIndexes, length ) {
\t\t\treturn [ length - 1 ];
\t\t}),

\t\t"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
\t\t\treturn [ argument < 0 ? argument + length : argument ];
\t\t}),

\t\t"even": createPositionalPseudo(function( matchIndexes, length ) {
\t\t\tvar i = 0;
\t\t\tfor ( ; i < length; i += 2 ) {
\t\t\t\tmatchIndexes.push( i );
\t\t\t}
\t\t\treturn matchIndexes;
\t\t}),

\t\t"odd": createPositionalPseudo(function( matchIndexes, length ) {
\t\t\tvar i = 1;
\t\t\tfor ( ; i < length; i += 2 ) {
\t\t\t\tmatchIndexes.push( i );
\t\t\t}
\t\t\treturn matchIndexes;
\t\t}),

\t\t"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
\t\t\tvar i = argument < 0 ? argument + length : argument;
\t\t\tfor ( ; --i >= 0; ) {
\t\t\t\tmatchIndexes.push( i );
\t\t\t}
\t\t\treturn matchIndexes;
\t\t}),

\t\t"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
\t\t\tvar i = argument < 0 ? argument + length : argument;
\t\t\tfor ( ; ++i < length; ) {
\t\t\t\tmatchIndexes.push( i );
\t\t\t}
\t\t\treturn matchIndexes;
\t\t})
\t}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
\tExpr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
\tExpr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
\tvar matched, match, tokens, type,
\t\tsoFar, groups, preFilters,
\t\tcached = tokenCache[ selector + " " ];

\tif ( cached ) {
\t\treturn parseOnly ? 0 : cached.slice( 0 );
\t}

\tsoFar = selector;
\tgroups = [];
\tpreFilters = Expr.preFilter;

\twhile ( soFar ) {

\t\t// Comma and first run
\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {
\t\t\tif ( match ) {
\t\t\t\t// Don't consume trailing commas as valid
\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;
\t\t\t}
\t\t\tgroups.push( (tokens = []) );
\t\t}

\t\tmatched = false;

\t\t// Combinators
\t\tif ( (match = rcombinators.exec( soFar )) ) {
\t\t\tmatched = match.shift();
\t\t\ttokens.push({
\t\t\t\tvalue: matched,
\t\t\t\t// Cast descendant combinators to space
\t\t\t\ttype: match[0].replace( rtrim, " " )
\t\t\t});
\t\t\tsoFar = soFar.slice( matched.length );
\t\t}

\t\t// Filters
\t\tfor ( type in Expr.filter ) {
\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
\t\t\t\t(match = preFilters[ type ]( match ))) ) {
\t\t\t\tmatched = match.shift();
\t\t\t\ttokens.push({
\t\t\t\t\tvalue: matched,
\t\t\t\t\ttype: type,
\t\t\t\t\tmatches: match
\t\t\t\t});
\t\t\t\tsoFar = soFar.slice( matched.length );
\t\t\t}
\t\t}

\t\tif ( !matched ) {
\t\t\tbreak;
\t\t}
\t}

\t// Return the length of the invalid excess
\t// if we're just parsing
\t// Otherwise, throw an error or return tokens
\treturn parseOnly ?
\t\tsoFar.length :
\t\tsoFar ?
\t\t\tSizzle.error( selector ) :
\t\t\t// Cache the tokens
\t\t\ttokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
\tvar i = 0,
\t\tlen = tokens.length,
\t\tselector = "";
\tfor ( ; i < len; i++ ) {
\t\tselector += tokens[i].value;
\t}
\treturn selector;
}

function addCombinator( matcher, combinator, base ) {
\tvar dir = combinator.dir,
\t\tskip = combinator.next,
\t\tkey = skip || dir,
\t\tcheckNonElements = base && key === "parentNode",
\t\tdoneName = done++;

\treturn combinator.first ?
\t\t// Check against closest ancestor/preceding element
\t\tfunction( elem, context, xml ) {
\t\t\twhile ( (elem = elem[ dir ]) ) {
\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {
\t\t\t\t\treturn matcher( elem, context, xml );
\t\t\t\t}
\t\t\t}
\t\t\treturn false;
\t\t} :

\t\t// Check against all ancestor/preceding elements
\t\tfunction( elem, context, xml ) {
\t\t\tvar oldCache, uniqueCache, outerCache,
\t\t\t\tnewCache = [ dirruns, doneName ];

\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
\t\t\tif ( xml ) {
\t\t\t\twhile ( (elem = elem[ dir ]) ) {
\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {
\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {
\t\t\t\t\t\t\treturn true;
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}
\t\t\t} else {
\t\t\t\twhile ( (elem = elem[ dir ]) ) {
\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {
\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});

\t\t\t\t\t\t// Support: IE <9 only
\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)
\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {
\t\t\t\t\t\t\telem = elem[ dir ] || elem;
\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&
\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements
\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);
\t\t\t\t\t\t} else {
\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements
\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;

\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking
\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
\t\t\t\t\t\t\t\treturn true;
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t\treturn false;
\t\t};
}

function elementMatcher( matchers ) {
\treturn matchers.length > 1 ?
\t\tfunction( elem, context, xml ) {
\t\t\tvar i = matchers.length;
\t\t\twhile ( i-- ) {
\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {
\t\t\t\t\treturn false;
\t\t\t\t}
\t\t\t}
\t\t\treturn true;
\t\t} :
\t\tmatchers[0];
}

function multipleContexts( selector, contexts, results ) {
\tvar i = 0,
\t\tlen = contexts.length;
\tfor ( ; i < len; i++ ) {
\t\tSizzle( selector, contexts[i], results );
\t}
\treturn results;
}

function condense( unmatched, map, filter, context, xml ) {
\tvar elem,
\t\tnewUnmatched = [],
\t\ti = 0,
\t\tlen = unmatched.length,
\t\tmapped = map != null;

\tfor ( ; i < len; i++ ) {
\t\tif ( (elem = unmatched[i]) ) {
\t\t\tif ( !filter || filter( elem, context, xml ) ) {
\t\t\t\tnewUnmatched.push( elem );
\t\t\t\tif ( mapped ) {
\t\t\t\t\tmap.push( i );
\t\t\t\t}
\t\t\t}
\t\t}
\t}

\treturn newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
\tif ( postFilter && !postFilter[ expando ] ) {
\t\tpostFilter = setMatcher( postFilter );
\t}
\tif ( postFinder && !postFinder[ expando ] ) {
\t\tpostFinder = setMatcher( postFinder, postSelector );
\t}
\treturn markFunction(function( seed, results, context, xml ) {
\t\tvar temp, i, elem,
\t\t\tpreMap = [],
\t\t\tpostMap = [],
\t\t\tpreexisting = results.length,

\t\t\t// Get initial elements from seed or context
\t\t\telems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization
\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?
\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :
\t\t\t\telems,

\t\t\tmatcherOut = matcher ?
\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?

\t\t\t\t\t// ...intermediate processing is necessary
\t\t\t\t\t[] :

\t\t\t\t\t// ...otherwise use results directly
\t\t\t\t\tresults :
\t\t\t\tmatcherIn;

\t\t// Find primary matches
\t\tif ( matcher ) {
\t\t\tmatcher( matcherIn, matcherOut, context, xml );
\t\t}

\t\t// Apply postFilter
\t\tif ( postFilter ) {
\t\t\ttemp = condense( matcherOut, postMap );
\t\t\tpostFilter( temp, [], context, xml );

\t\t\t// Un-match failing elements by moving them back to matcherIn
\t\t\ti = temp.length;
\t\t\twhile ( i-- ) {
\t\t\t\tif ( (elem = temp[i]) ) {
\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
\t\t\t\t}
\t\t\t}
\t\t}

\t\tif ( seed ) {
\t\t\tif ( postFinder || preFilter ) {
\t\t\t\tif ( postFinder ) {
\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts
\t\t\t\t\ttemp = [];
\t\t\t\t\ti = matcherOut.length;
\t\t\t\t\twhile ( i-- ) {
\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {
\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match
\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );
\t\t\t\t}

\t\t\t\t// Move matched elements from seed to results to keep them synchronized
\t\t\t\ti = matcherOut.length;
\t\t\t\twhile ( i-- ) {
\t\t\t\t\tif ( (elem = matcherOut[i]) &&
\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}

\t\t// Add elements to results, through postFinder if defined
\t\t} else {
\t\t\tmatcherOut = condense(
\t\t\t\tmatcherOut === results ?
\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :
\t\t\t\t\tmatcherOut
\t\t\t);
\t\t\tif ( postFinder ) {
\t\t\t\tpostFinder( null, results, matcherOut, xml );
\t\t\t} else {
\t\t\t\tpush.apply( results, matcherOut );
\t\t\t}
\t\t}
\t});
}

function matcherFromTokens( tokens ) {
\tvar checkContext, matcher, j,
\t\tlen = tokens.length,
\t\tleadingRelative = Expr.relative[ tokens[0].type ],
\t\timplicitRelative = leadingRelative || Expr.relative[" "],
\t\ti = leadingRelative ? 1 : 0,

\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)
\t\tmatchContext = addCombinator( function( elem ) {
\t\t\treturn elem === checkContext;
\t\t}, implicitRelative, true ),
\t\tmatchAnyContext = addCombinator( function( elem ) {
\t\t\treturn indexOf( checkContext, elem ) > -1;
\t\t}, implicitRelative, true ),
\t\tmatchers = [ function( elem, context, xml ) {
\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
\t\t\t\t(checkContext = context).nodeType ?
\t\t\t\t\tmatchContext( elem, context, xml ) :
\t\t\t\t\tmatchAnyContext( elem, context, xml ) );
\t\t\t// Avoid hanging onto element (issue #299)
\t\t\tcheckContext = null;
\t\t\treturn ret;
\t\t} ];

\tfor ( ; i < len; i++ ) {
\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {
\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
\t\t} else {
\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

\t\t\t// Return special upon seeing a positional matcher
\t\t\tif ( matcher[ expando ] ) {
\t\t\t\t// Find the next relative operator (if any) for proper handling
\t\t\t\tj = ++i;
\t\t\t\tfor ( ; j < len; j++ ) {
\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {
\t\t\t\t\t\tbreak;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t\treturn setMatcher(
\t\t\t\t\ti > 1 && elementMatcher( matchers ),
\t\t\t\t\ti > 1 && toSelector(
\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`
\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
\t\t\t\t\t).replace( rtrim, "$1" ),
\t\t\t\t\tmatcher,
\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),
\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
\t\t\t\t\tj < len && toSelector( tokens )
\t\t\t\t);
\t\t\t}
\t\t\tmatchers.push( matcher );
\t\t}
\t}

\treturn elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
\tvar bySet = setMatchers.length > 0,
\t\tbyElement = elementMatchers.length > 0,
\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {
\t\t\tvar elem, j, matcher,
\t\t\t\tmatchedCount = 0,
\t\t\t\ti = "0",
\t\t\t\tunmatched = seed && [],
\t\t\t\tsetMatched = [],
\t\t\t\tcontextBackup = outermostContext,
\t\t\t\t// We must always have either seed elements or outermost context
\t\t\t\telems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
\t\t\t\t// Use integer dirruns iff this is the outermost matcher
\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
\t\t\t\tlen = elems.length;

\t\t\tif ( outermost ) {
\t\t\t\toutermostContext = context === document || context || outermost;
\t\t\t}

\t\t\t// Add elements passing elementMatchers directly to results
\t\t\t// Support: IE<9, Safari
\t\t\t// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {
\t\t\t\tif ( byElement && elem ) {
\t\t\t\t\tj = 0;
\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {
\t\t\t\t\t\tsetDocument( elem );
\t\t\t\t\t\txml = !documentIsHTML;
\t\t\t\t\t}
\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {
\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {
\t\t\t\t\t\t\tresults.push( elem );
\t\t\t\t\t\t\tbreak;
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t\tif ( outermost ) {
\t\t\t\t\t\tdirruns = dirrunsUnique;
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\t// Track unmatched elements for set filters
\t\t\t\tif ( bySet ) {
\t\t\t\t\t// They will have gone through all possible matchers
\t\t\t\t\tif ( (elem = !matcher && elem) ) {
\t\t\t\t\t\tmatchedCount--;
\t\t\t\t\t}

\t\t\t\t\t// Lengthen the array for every element, matched or not
\t\t\t\t\tif ( seed ) {
\t\t\t\t\t\tunmatched.push( elem );
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}

\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`
\t\t\t// makes the latter nonnegative.
\t\t\tmatchedCount += i;

\t\t\t// Apply set filters to unmatched elements
\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
\t\t\t// no element matchers and no seed.
\t\t\t// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
\t\t\t// case, which will result in a "00" `matchedCount` that differs from `i` but is also
\t\t\t// numerically zero.
\t\t\tif ( bySet && i !== matchedCount ) {
\t\t\t\tj = 0;
\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {
\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );
\t\t\t\t}

\t\t\t\tif ( seed ) {
\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting
\t\t\t\t\tif ( matchedCount > 0 ) {
\t\t\t\t\t\twhile ( i-- ) {
\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {
\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t}

\t\t\t\t\t// Discard index placeholder values to get only actual matches
\t\t\t\t\tsetMatched = condense( setMatched );
\t\t\t\t}

\t\t\t\t// Add matches to results
\t\t\t\tpush.apply( results, setMatched );

\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting
\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&
\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {

\t\t\t\t\tSizzle.uniqueSort( results );
\t\t\t\t}
\t\t\t}

\t\t\t// Override manipulation of globals by nested matchers
\t\t\tif ( outermost ) {
\t\t\t\tdirruns = dirrunsUnique;
\t\t\t\toutermostContext = contextBackup;
\t\t\t}

\t\t\treturn unmatched;
\t\t};

\treturn bySet ?
\t\tmarkFunction( superMatcher ) :
\t\tsuperMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
\tvar i,
\t\tsetMatchers = [],
\t\telementMatchers = [],
\t\tcached = compilerCache[ selector + " " ];

\tif ( !cached ) {
\t\t// Generate a function of recursive functions that can be used to check each element
\t\tif ( !match ) {
\t\t\tmatch = tokenize( selector );
\t\t}
\t\ti = match.length;
\t\twhile ( i-- ) {
\t\t\tcached = matcherFromTokens( match[i] );
\t\t\tif ( cached[ expando ] ) {
\t\t\t\tsetMatchers.push( cached );
\t\t\t} else {
\t\t\t\telementMatchers.push( cached );
\t\t\t}
\t\t}

\t\t// Cache the compiled function
\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

\t\t// Save selector and tokenization
\t\tcached.selector = selector;
\t}
\treturn cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
\tvar i, tokens, token, type, find,
\t\tcompiled = typeof selector === "function" && selector,
\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );

\tresults = results || [];

\t// Try to minimize operations if there is only one selector in the list and no seed
\t// (the latter of which guarantees us context)
\tif ( match.length === 1 ) {

\t\t// Reduce context if the leading compound selector is an ID
\t\ttokens = match[0] = match[0].slice( 0 );
\t\tif ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

\t\t\tcontext = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
\t\t\tif ( !context ) {
\t\t\t\treturn results;

\t\t\t// Precompiled matchers will still verify ancestry, so step up a level
\t\t\t} else if ( compiled ) {
\t\t\t\tcontext = context.parentNode;
\t\t\t}

\t\t\tselector = selector.slice( tokens.shift().value.length );
\t\t}

\t\t// Fetch a seed set for right-to-left matching
\t\ti = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
\t\twhile ( i-- ) {
\t\t\ttoken = tokens[i];

\t\t\t// Abort if we hit a combinator
\t\t\tif ( Expr.relative[ (type = token.type) ] ) {
\t\t\t\tbreak;
\t\t\t}
\t\t\tif ( (find = Expr.find[ type ]) ) {
\t\t\t\t// Search, expanding context for leading sibling combinators
\t\t\t\tif ( (seed = find(
\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),
\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
\t\t\t\t)) ) {

\t\t\t\t\t// If seed is empty or no tokens remain, we can return early
\t\t\t\t\ttokens.splice( i, 1 );
\t\t\t\t\tselector = seed.length && toSelector( tokens );
\t\t\t\t\tif ( !selector ) {
\t\t\t\t\t\tpush.apply( results, seed );
\t\t\t\t\t\treturn results;
\t\t\t\t\t}

\t\t\t\t\tbreak;
\t\t\t\t}
\t\t\t}
\t\t}
\t}

\t// Compile and execute a filtering function if one is not provided
\t// Provide `match` to avoid retokenization if we modified the selector above
\t( compiled || compile( selector, match ) )(
\t\tseed,
\t\tcontext,
\t\t!documentIsHTML,
\t\tresults,
\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
\t);
\treturn results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
\t// Should return 1, but returns 4 (following)
\treturn el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
\tel.innerHTML = "<a href=\'#\'></a>";
\treturn el.firstChild.getAttribute("href") === "#" ;
}) ) {
\taddHandle( "type|href|height|width", function( elem, name, isXML ) {
\t\tif ( !isXML ) {
\t\t\treturn elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
\t\t}
\t});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
\tel.innerHTML = "<input/>";
\tel.firstChild.setAttribute( "value", "" );
\treturn el.firstChild.getAttribute( "value" ) === "";
}) ) {
\taddHandle( "value", function( elem, name, isXML ) {
\t\tif ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
\t\t\treturn elem.defaultValue;
\t\t}
\t});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
\treturn el.getAttribute("disabled") == null;
}) ) {
\taddHandle( booleans, function( elem, name, isXML ) {
\t\tvar val;
\t\tif ( !isXML ) {
\t\t\treturn elem[ name ] === true ? name.toLowerCase() :
\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?
\t\t\t\t\tval.value :
\t\t\t\tnull;
\t\t}
\t});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
\tvar matched = [],
\t\ttruncate = until !== undefined;

\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
\t\tif ( elem.nodeType === 1 ) {
\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {
\t\t\t\tbreak;
\t\t\t}
\t\t\tmatched.push( elem );
\t\t}
\t}
\treturn matched;
};


var siblings = function( n, elem ) {
\tvar matched = [];

\tfor ( ; n; n = n.nextSibling ) {
\t\tif ( n.nodeType === 1 && n !== elem ) {
\t\t\tmatched.push( n );
\t\t}
\t}

\treturn matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );



var risSimple = /^.[^:#\\[\\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
\tif ( jQuery.isFunction( qualifier ) ) {
\t\treturn jQuery.grep( elements, function( elem, i ) {
\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;
\t\t} );
\t}

\t// Single element
\tif ( qualifier.nodeType ) {
\t\treturn jQuery.grep( elements, function( elem ) {
\t\t\treturn ( elem === qualifier ) !== not;
\t\t} );
\t}

\t// Arraylike of elements (jQuery, arguments, Array)
\tif ( typeof qualifier !== "string" ) {
\t\treturn jQuery.grep( elements, function( elem ) {
\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;
\t\t} );
\t}

\t// Simple selector that can be filtered directly, removing non-Elements
\tif ( risSimple.test( qualifier ) ) {
\t\treturn jQuery.filter( qualifier, elements, not );
\t}

\t// Complex selector, compare the two sets, removing non-Elements
\tqualifier = jQuery.filter( qualifier, elements );
\treturn jQuery.grep( elements, function( elem ) {
\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
\t} );
}

jQuery.filter = function( expr, elems, not ) {
\tvar elem = elems[ 0 ];

\tif ( not ) {
\t\texpr = ":not(" + expr + ")";
\t}

\tif ( elems.length === 1 && elem.nodeType === 1 ) {
\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
\t}

\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
\t\treturn elem.nodeType === 1;
\t} ) );
};

jQuery.fn.extend( {
\tfind: function( selector ) {
\t\tvar i, ret,
\t\t\tlen = this.length,
\t\t\tself = this;

\t\tif ( typeof selector !== "string" ) {
\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {
\t\t\t\tfor ( i = 0; i < len; i++ ) {
\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {
\t\t\t\t\t\treturn true;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t} ) );
\t\t}

\t\tret = this.pushStack( [] );

\t\tfor ( i = 0; i < len; i++ ) {
\t\t\tjQuery.find( selector, self[ i ], ret );
\t\t}

\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;
\t},
\tfilter: function( selector ) {
\t\treturn this.pushStack( winnow( this, selector || [], false ) );
\t},
\tnot: function( selector ) {
\t\treturn this.pushStack( winnow( this, selector || [], true ) );
\t},
\tis: function( selector ) {
\t\treturn !!winnow(
\t\t\tthis,

\t\t\t// If this is a positional/relative selector, check membership in the returned set
\t\t\t// so $("p:first").is("p:last") won\'t return true for a doc with two "p".
\t\t\ttypeof selector === "string" && rneedsContext.test( selector ) ?
\t\t\t\tjQuery( selector ) :
\t\t\t\tselector || [],
\t\t\tfalse
\t\t).length;
\t}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

\t// A simple way to check for HTML strings
\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
\t// Strict HTML recognition (#11290: must start with <)
\t// Shortcut simple #id case for speed
\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,

\tinit = jQuery.fn.init = function( selector, context, root ) {
\t\tvar match, elem;

\t\t// HANDLE: $(""), $(null), $(undefined), $(false)
\t\tif ( !selector ) {
\t\t\treturn this;
\t\t}

\t\t// Method init() accepts an alternate rootjQuery
\t\t// so migrate can support jQuery.sub (gh-2101)
\t\troot = root || rootjQuery;

\t\t// Handle HTML strings
\t\tif ( typeof selector === "string" ) {
\t\t\tif ( selector[ 0 ] === "<" &&
\t\t\t\tselector[ selector.length - 1 ] === ">" &&
\t\t\t\tselector.length >= 3 ) {

\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check
\t\t\t\tmatch = [ null, selector, null ];

\t\t\t} else {
\t\t\t\tmatch = rquickExpr.exec( selector );
\t\t\t}

\t\t\t// Match html or make sure no context is specified for #id
\t\t\tif ( match && ( match[ 1 ] || !context ) ) {

\t\t\t\t// HANDLE: $(html) -> $(array)
\t\t\t\tif ( match[ 1 ] ) {
\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;

\t\t\t\t\t// Option to run scripts is true for back-compat
\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present
\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(
\t\t\t\t\t\tmatch[ 1 ],
\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,
\t\t\t\t\t\ttrue
\t\t\t\t\t) );

\t\t\t\t\t// HANDLE: $(html, props)
\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
\t\t\t\t\t\tfor ( match in context ) {

\t\t\t\t\t\t\t// Properties of context are called as methods if possible
\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {
\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );

\t\t\t\t\t\t\t// ...and otherwise set as attributes
\t\t\t\t\t\t\t} else {
\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t}

\t\t\t\t\treturn this;

\t\t\t\t// HANDLE: $(#id)
\t\t\t\t} else {
\t\t\t\t\telem = document.getElementById( match[ 2 ] );

\t\t\t\t\tif ( elem ) {

\t\t\t\t\t\t// Inject the element directly into the jQuery object
\t\t\t\t\t\tthis[ 0 ] = elem;
\t\t\t\t\t\tthis.length = 1;
\t\t\t\t\t}
\t\t\t\t\treturn this;
\t\t\t\t}

\t\t\t// HANDLE: $(expr, $(...))
\t\t\t} else if ( !context || context.jquery ) {
\t\t\t\treturn ( context || root ).find( selector );

\t\t\t// HANDLE: $(expr, context)
\t\t\t// (which is just equivalent to: $(context).find(expr)
\t\t\t} else {
\t\t\t\treturn this.constructor( context ).find( selector );
\t\t\t}

\t\t// HANDLE: $(DOMElement)
\t\t} else if ( selector.nodeType ) {
\t\t\tthis[ 0 ] = selector;
\t\t\tthis.length = 1;
\t\t\treturn this;

\t\t// HANDLE: $(function)
\t\t// Shortcut for document ready
\t\t} else if ( jQuery.isFunction( selector ) ) {
\t\t\treturn root.ready !== undefined ?
\t\t\t\troot.ready( selector ) :

\t\t\t\t// Execute immediately if ready is not present
\t\t\t\tselector( jQuery );
\t\t}

\t\treturn jQuery.makeArray( selector, this );
\t};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

\t// Methods guaranteed to produce a unique set when starting from a unique set
\tguaranteedUnique = {
\t\tchildren: true,
\t\tcontents: true,
\t\tnext: true,
\t\tprev: true
\t};

jQuery.fn.extend( {
\thas: function( target ) {
\t\tvar targets = jQuery( target, this ),
\t\t\tl = targets.length;

\t\treturn this.filter( function() {
\t\t\tvar i = 0;
\t\t\tfor ( ; i < l; i++ ) {
\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {
\t\t\t\t\treturn true;
\t\t\t\t}
\t\t\t}
\t\t} );
\t},

\tclosest: function( selectors, context ) {
\t\tvar cur,
\t\t\ti = 0,
\t\t\tl = this.length,
\t\t\tmatched = [],
\t\t\ttargets = typeof selectors !== "string" && jQuery( selectors );

\t\t// Positional selectors never match, since there's no _selection_ context
\t\tif ( !rneedsContext.test( selectors ) ) {
\t\t\tfor ( ; i < l; i++ ) {
\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

\t\t\t\t\t// Always skip document fragments
\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?
\t\t\t\t\t\ttargets.index( cur ) > -1 :

\t\t\t\t\t\t// Don't pass non-elements to Sizzle
\t\t\t\t\t\tcur.nodeType === 1 &&
\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {

\t\t\t\t\t\tmatched.push( cur );
\t\t\t\t\t\tbreak;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}

\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
\t},

\t// Determine the position of an element within the set
\tindex: function( elem ) {

\t\t// No argument, return index in parent
\t\tif ( !elem ) {
\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
\t\t}

\t\t// Index in selector
\t\tif ( typeof elem === "string" ) {
\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );
\t\t}

\t\t// Locate the position of the desired element
\t\treturn indexOf.call( this,

\t\t\t// If it receives a jQuery object, the first element is used
\t\t\telem.jquery ? elem[ 0 ] : elem
\t\t);
\t},

\tadd: function( selector, context ) {
\t\treturn this.pushStack(
\t\t\tjQuery.uniqueSort(
\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )
\t\t\t)
\t\t);
\t},

\taddBack: function( selector ) {
\t\treturn this.add( selector == null ?
\t\t\tthis.prevObject : this.prevObject.filter( selector )
\t\t);
\t}
} );

function sibling( cur, dir ) {
\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
\treturn cur;
}

jQuery.each( {
\tparent: function( elem ) {
\t\tvar parent = elem.parentNode;
\t\treturn parent && parent.nodeType !== 11 ? parent : null;
\t},
\tparents: function( elem ) {
\t\treturn dir( elem, "parentNode" );
\t},
\tparentsUntil: function( elem, i, until ) {
\t\treturn dir( elem, "parentNode", until );
\t},
\tnext: function( elem ) {
\t\treturn sibling( elem, "nextSibling" );
\t},
\tprev: function( elem ) {
\t\treturn sibling( elem, "previousSibling" );
\t},
\tnextAll: function( elem ) {
\t\treturn dir( elem, "nextSibling" );
\t},
\tprevAll: function( elem ) {
\t\treturn dir( elem, "previousSibling" );
\t},
\tnextUntil: function( elem, i, until ) {
\t\treturn dir( elem, "nextSibling", until );
\t},
\tprevUntil: function( elem, i, until ) {
\t\treturn dir( elem, "previousSibling", until );
\t},
\tsiblings: function( elem ) {
\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );
\t},
\tchildren: function( elem ) {
\t\treturn siblings( elem.firstChild );
\t},
\tcontents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
\t}
}, function( name, fn ) {
\tjQuery.fn[ name ] = function( until, selector ) {
\t\tvar matched = jQuery.map( this, fn, until );

\t\tif ( name.slice( -5 ) !== "Until" ) {
\t\t\tselector = until;
\t\t}

\t\tif ( selector && typeof selector === "string" ) {
\t\t\tmatched = jQuery.filter( selector, matched );
\t\t}

\t\tif ( this.length > 1 ) {

\t\t\t// Remove duplicates
\t\t\tif ( !guaranteedUnique[ name ] ) {
\t\t\t\tjQuery.uniqueSort( matched );
\t\t\t}

\t\t\t// Reverse order for parents* and prev-derivatives
\t\t\tif ( rparentsprev.test( name ) ) {
\t\t\t\tmatched.reverse();
\t\t\t}
\t\t}

\t\treturn this.pushStack( matched );
\t};
} );
var rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
\tvar object = {};
\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
\t\tobject[ flag ] = true;
\t} );
\treturn object;
}

/*
 * Create a callback list using the following parameters:
 *
 *\toptions: an optional list of space-separated options that will change how
 *\t\t\tthe callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)
 *
 *\tmemory:\t\t\twill keep track of previous values and will call any callback added
 *\t\t\t\t\tafter the list has been fired right away with the latest "memorized"
 *\t\t\t\t\tvalues (like a Deferred)
 *
 *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)
 *
 *\tstopOnFalse:\tinterrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

\t// Convert options from String-formatted to Object-formatted if needed
\t// (we check in cache first)
\toptions = typeof options === "string" ?
\t\tcreateOptions( options ) :
\t\tjQuery.extend( {}, options );

\tvar // Flag to know if list is currently firing
\t\tfiring,

\t\t// Last fire value for non-forgettable lists
\t\tmemory,

\t\t// Flag to know if list was already fired
\t\tfired,

\t\t// Flag to prevent firing
\t\tlocked,

\t\t// Actual callback list
\t\tlist = [],

\t\t// Queue of execution data for repeatable lists
\t\tqueue = [],

\t\t// Index of currently firing callback (modified by add/remove as needed)
\t\tfiringIndex = -1,

\t\t// Fire callbacks
\t\tfire = function() {

\t\t\t// Enforce single-firing
\t\t\tlocked = locked || options.once;

\t\t\t// Execute callbacks for all pending executions,
\t\t\t// respecting firingIndex overrides and runtime changes
\t\t\tfired = firing = true;
\t\t\tfor ( ; queue.length; firingIndex = -1 ) {
\t\t\t\tmemory = queue.shift();
\t\t\t\twhile ( ++firingIndex < list.length ) {

\t\t\t\t\t// Run callback and check for early termination
\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
\t\t\t\t\t\toptions.stopOnFalse ) {

\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire
\t\t\t\t\t\tfiringIndex = list.length;
\t\t\t\t\t\tmemory = false;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}

\t\t\t// Forget the data if we're done with it
\t\t\tif ( !options.memory ) {
\t\t\t\tmemory = false;
\t\t\t}

\t\t\tfiring = false;

\t\t\t// Clean up if we're done firing for good
\t\t\tif ( locked ) {

\t\t\t\t// Keep an empty list if we have data for future add calls
\t\t\t\tif ( memory ) {
\t\t\t\t\tlist = [];

\t\t\t\t// Otherwise, this object is spent
\t\t\t\t} else {
\t\t\t\t\tlist = "";
\t\t\t\t}
\t\t\t}
\t\t},

\t\t// Actual Callbacks object
\t\tself = {

\t\t\t// Add a callback or a collection of callbacks to the list
\t\t\tadd: function() {
\t\t\t\tif ( list ) {

\t\t\t\t\t// If we have memory from a past run, we should fire after adding
\t\t\t\t\tif ( memory && !firing ) {
\t\t\t\t\t\tfiringIndex = list.length - 1;
\t\t\t\t\t\tqueue.push( memory );
\t\t\t\t\t}

\t\t\t\t\t( function add( args ) {
\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {
\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {
\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {
\t\t\t\t\t\t\t\t\tlist.push( arg );
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

\t\t\t\t\t\t\t\t// Inspect recursively
\t\t\t\t\t\t\t\tadd( arg );
\t\t\t\t\t\t\t}
\t\t\t\t\t\t} );
\t\t\t\t\t} )( arguments );

\t\t\t\t\tif ( memory && !firing ) {
\t\t\t\t\t\tfire();
\t\t\t\t\t}
\t\t\t\t}
\t\t\t\treturn this;
\t\t\t},

\t\t\t// Remove a callback from the list
\t\t\tremove: function() {
\t\t\t\tjQuery.each( arguments, function( _, arg ) {
\t\t\t\t\tvar index;
\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
\t\t\t\t\t\tlist.splice( index, 1 );

\t\t\t\t\t\t// Handle firing indexes
\t\t\t\t\t\tif ( index <= firingIndex ) {
\t\t\t\t\t\t\tfiringIndex--;
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t} );
\t\t\t\treturn this;
\t\t\t},

\t\t\t// Check if a given callback is in the list.
\t\t\t// If no argument is given, return whether or not list has callbacks attached.
\t\t\thas: function( fn ) {
\t\t\t\treturn fn ?
\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :
\t\t\t\t\tlist.length > 0;
\t\t\t},

\t\t\t// Remove all callbacks from the list
\t\t\tempty: function() {
\t\t\t\tif ( list ) {
\t\t\t\t\tlist = [];
\t\t\t\t}
\t\t\t\treturn this;
\t\t\t},

\t\t\t// Disable .fire and .add
\t\t\t// Abort any current/pending executions
\t\t\t// Clear all callbacks and values
\t\t\tdisable: function() {
\t\t\t\tlocked = queue = [];
\t\t\t\tlist = memory = "";
\t\t\t\treturn this;
\t\t\t},
\t\t\tdisabled: function() {
\t\t\t\treturn !list;
\t\t\t},

\t\t\t// Disable .fire
\t\t\t// Also disable .add unless we have memory (since it would have no effect)
\t\t\t// Abort any pending executions
\t\t\tlock: function() {
\t\t\t\tlocked = queue = [];
\t\t\t\tif ( !memory && !firing ) {
\t\t\t\t\tlist = memory = "";
\t\t\t\t}
\t\t\t\treturn this;
\t\t\t},
\t\t\tlocked: function() {
\t\t\t\treturn !!locked;
\t\t\t},

\t\t\t// Call all callbacks with the given context and arguments
\t\t\tfireWith: function( context, args ) {
\t\t\t\tif ( !locked ) {
\t\t\t\t\targs = args || [];
\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];
\t\t\t\t\tqueue.push( args );
\t\t\t\t\tif ( !firing ) {
\t\t\t\t\t\tfire();
\t\t\t\t\t}
\t\t\t\t}
\t\t\t\treturn this;
\t\t\t},

\t\t\t// Call all the callbacks with the given arguments
\t\t\tfire: function() {
\t\t\t\tself.fireWith( this, arguments );
\t\t\t\treturn this;
\t\t\t},

\t\t\t// To know if the callbacks have already been called at least once
\t\t\tfired: function() {
\t\t\t\treturn !!fired;
\t\t\t}
\t\t};

\treturn self;
};


function Identity( v ) {
\treturn v;
}
function Thrower( ex ) {
\tthrow ex;
}

function adoptValue( value, resolve, reject, noValue ) {
\tvar method;

\ttry {

\t\t// Check for promise aspect first to privilege synchronous behavior
\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
\t\t\tmethod.call( value ).done( resolve ).fail( reject );

\t\t// Other thenables
\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
\t\t\tmethod.call( value, resolve, reject );

\t\t// Other non-thenables
\t\t} else {

\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )
\t\t\t// * true: [ value ].slice( 1 ) => resolve()
\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );
\t\t}

\t// For Promises/A+, convert exceptions into rejections
\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
\t// Deferred#then to conditionally suppress rejection.
\t} catch ( value ) {

\t\t// Support: Android 4.0 only
\t\t// Strict mode functions invoked without .call/.apply get global-object context
\t\treject.apply( undefined, [ value ] );
\t}
}

jQuery.extend( {

\tDeferred: function( func ) {
\t\tvar tuples = [

\t\t\t\t// action, add listener, callbacks,
\t\t\t\t// ... .then handlers, argument index, [final state]
\t\t\t\t[ "notify", "progress", jQuery.Callbacks( "memory" ),
\t\t\t\t\tjQuery.Callbacks( "memory" ), 2 ],
\t\t\t\t[ "resolve", "done", jQuery.Callbacks( "once memory" ),
\t\t\t\t\tjQuery.Callbacks( "once memory" ), 0, "resolved" ],
\t\t\t\t[ "reject", "fail", jQuery.Callbacks( "once memory" ),
\t\t\t\t\tjQuery.Callbacks( "once memory" ), 1, "rejected" ]
\t\t\t],
\t\t\tstate = "pending",
\t\t\tpromise = {
\t\t\t\tstate: function() {
\t\t\t\t\treturn state;
\t\t\t\t},
\t\t\t\talways: function() {
\t\t\t\t\tdeferred.done( arguments ).fail( arguments );
\t\t\t\t\treturn this;
\t\t\t\t},
\t\t\t\t"catch": function( fn ) {
\t\t\t\t\treturn promise.then( null, fn );
\t\t\t\t},

\t\t\t\t// Keep pipe for back-compat
\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {
\t\t\t\t\tvar fns = arguments;

\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {
\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {

\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)
\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })
\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })
\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })
\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {
\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );
\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {
\t\t\t\t\t\t\t\t\treturned.promise()
\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )
\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )
\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );
\t\t\t\t\t\t\t\t} else {
\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + "With" ](
\t\t\t\t\t\t\t\t\t\tthis,
\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments
\t\t\t\t\t\t\t\t\t);
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t} );
\t\t\t\t\t\t} );
\t\t\t\t\t\tfns = null;
\t\t\t\t\t} ).promise();
\t\t\t\t},
\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {
\t\t\t\t\tvar maxDepth = 0;
\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {
\t\t\t\t\t\treturn function() {
\t\t\t\t\t\t\tvar that = this,
\t\t\t\t\t\t\t\targs = arguments,
\t\t\t\t\t\t\t\tmightThrow = function() {
\t\t\t\t\t\t\t\t\tvar returned, then;

\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3
\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59
\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts
\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {
\t\t\t\t\t\t\t\t\t\treturn;
\t\t\t\t\t\t\t\t\t}

\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );

\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1
\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48
\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {
\t\t\t\t\t\t\t\t\t\tthrow new TypeError( "Thenable self-resolution" );
\t\t\t\t\t\t\t\t\t}

\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5
\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54
\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75
\t\t\t\t\t\t\t\t\t// Retrieve `then` only once
\t\t\t\t\t\t\t\t\tthen = returned &&

\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4
\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64
\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability
\t\t\t\t\t\t\t\t\t\t( typeof returned === "object" ||
\t\t\t\t\t\t\t\t\t\t\ttypeof returned === "function" ) &&
\t\t\t\t\t\t\t\t\t\treturned.then;

\t\t\t\t\t\t\t\t\t// Handle a returned thenable
\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {

\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution
\t\t\t\t\t\t\t\t\t\tif ( special ) {
\t\t\t\t\t\t\t\t\t\t\tthen.call(
\t\t\t\t\t\t\t\t\t\t\t\treturned,
\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),
\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )
\t\t\t\t\t\t\t\t\t\t\t);

\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress
\t\t\t\t\t\t\t\t\t\t} else {

\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values
\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;

\t\t\t\t\t\t\t\t\t\t\tthen.call(
\t\t\t\t\t\t\t\t\t\t\t\treturned,
\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),
\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),
\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,
\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )
\t\t\t\t\t\t\t\t\t\t\t);
\t\t\t\t\t\t\t\t\t\t}

\t\t\t\t\t\t\t\t\t// Handle all other returned values
\t\t\t\t\t\t\t\t\t} else {

\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context
\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)
\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {
\t\t\t\t\t\t\t\t\t\t\tthat = undefined;
\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];
\t\t\t\t\t\t\t\t\t\t}

\t\t\t\t\t\t\t\t\t\t// Process the value(s)
\t\t\t\t\t\t\t\t\t\t// Default process is resolve
\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );
\t\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\t},

\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions
\t\t\t\t\t\t\t\tprocess = special ?
\t\t\t\t\t\t\t\t\tmightThrow :
\t\t\t\t\t\t\t\t\tfunction() {
\t\t\t\t\t\t\t\t\t\ttry {
\t\t\t\t\t\t\t\t\t\t\tmightThrow();
\t\t\t\t\t\t\t\t\t\t} catch ( e ) {

\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {
\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,
\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );
\t\t\t\t\t\t\t\t\t\t\t}

\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1
\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61
\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions
\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {

\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context
\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)
\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {
\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;
\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];
\t\t\t\t\t\t\t\t\t\t\t\t}

\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );
\t\t\t\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\t\t};

\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1
\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57
\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from
\t\t\t\t\t\t\t// subsequent errors
\t\t\t\t\t\t\tif ( depth ) {
\t\t\t\t\t\t\t\tprocess();
\t\t\t\t\t\t\t} else {

\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception
\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async
\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {
\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\twindow.setTimeout( process );
\t\t\t\t\t\t\t}
\t\t\t\t\t\t};
\t\t\t\t\t}

\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {

\t\t\t\t\t\t// progress_handlers.add( ... )
\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(
\t\t\t\t\t\t\tresolve(
\t\t\t\t\t\t\t\t0,
\t\t\t\t\t\t\t\tnewDefer,
\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?
\t\t\t\t\t\t\t\t\tonProgress :
\t\t\t\t\t\t\t\t\tIdentity,
\t\t\t\t\t\t\t\tnewDefer.notifyWith
\t\t\t\t\t\t\t)
\t\t\t\t\t\t);

\t\t\t\t\t\t// fulfilled_handlers.add( ... )
\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(
\t\t\t\t\t\t\tresolve(
\t\t\t\t\t\t\t\t0,
\t\t\t\t\t\t\t\tnewDefer,
\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?
\t\t\t\t\t\t\t\t\tonFulfilled :
\t\t\t\t\t\t\t\t\tIdentity
\t\t\t\t\t\t\t)
\t\t\t\t\t\t);

\t\t\t\t\t\t// rejected_handlers.add( ... )
\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(
\t\t\t\t\t\t\tresolve(
\t\t\t\t\t\t\t\t0,
\t\t\t\t\t\t\t\tnewDefer,
\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?
\t\t\t\t\t\t\t\t\tonRejected :
\t\t\t\t\t\t\t\t\tThrower
\t\t\t\t\t\t\t)
\t\t\t\t\t\t);
\t\t\t\t\t} ).promise();
\t\t\t\t},

\t\t\t\t// Get a promise for this deferred
\t\t\t\t// If obj is provided, the promise aspect is added to the object
\t\t\t\tpromise: function( obj ) {
\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;
\t\t\t\t}
\t\t\t},
\t\t\tdeferred = {};

\t\t// Add list-specific methods
\t\tjQuery.each( tuples, function( i, tuple ) {
\t\t\tvar list = tuple[ 2 ],
\t\t\t\tstateString = tuple[ 5 ];

\t\t\t// promise.progress = list.add
\t\t\t// promise.done = list.add
\t\t\t// promise.fail = list.add
\t\t\tpromise[ tuple[ 1 ] ] = list.add;

\t\t\t// Handle state
\t\t\tif ( stateString ) {
\t\t\t\tlist.add(
\t\t\t\t\tfunction() {

\t\t\t\t\t\t// state = "resolved" (i.e., fulfilled)
\t\t\t\t\t\t// state = "rejected"
\t\t\t\t\t\tstate = stateString;
\t\t\t\t\t},

\t\t\t\t\t// rejected_callbacks.disable
\t\t\t\t\t// fulfilled_callbacks.disable
\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,

\t\t\t\t\t// progress_callbacks.lock
\t\t\t\t\ttuples[ 0 ][ 2 ].lock
\t\t\t\t);
\t\t\t}

\t\t\t// progress_handlers.fire
\t\t\t// fulfilled_handlers.fire
\t\t\t// rejected_handlers.fire
\t\t\tlist.add( tuple[ 3 ].fire );

\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }
\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }
\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }
\t\t\tdeferred[ tuple[ 0 ] ] = function() {
\t\t\t\tdeferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
\t\t\t\treturn this;
\t\t\t};

\t\t\t// deferred.notifyWith = list.fireWith
\t\t\t// deferred.resolveWith = list.fireWith
\t\t\t// deferred.rejectWith = list.fireWith
\t\t\tdeferred[ tuple[ 0 ] + "With" ] = list.fireWith;
\t\t} );

\t\t// Make the deferred a promise
\t\tpromise.promise( deferred );

\t\t// Call given func if any
\t\tif ( func ) {
\t\t\tfunc.call( deferred, deferred );
\t\t}

\t\t// All done!
\t\treturn deferred;
\t},

\t// Deferred helper
\twhen: function( singleValue ) {
\t\tvar

\t\t\t// count of uncompleted subordinates
\t\t\tremaining = arguments.length,

\t\t\t// count of unprocessed arguments
\t\t\ti = remaining,

\t\t\t// subordinate fulfillment data
\t\t\tresolveContexts = Array( i ),
\t\t\tresolveValues = slice.call( arguments ),

\t\t\t// the master Deferred
\t\t\tmaster = jQuery.Deferred(),

\t\t\t// subordinate callback factory
\t\t\tupdateFunc = function( i ) {
\t\t\t\treturn function( value ) {
\t\t\t\t\tresolveContexts[ i ] = this;
\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
\t\t\t\t\tif ( !( --remaining ) ) {
\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );
\t\t\t\t\t}
\t\t\t\t};
\t\t\t};

\t\t// Single- and empty arguments are adopted like Promise.resolve
\t\tif ( remaining <= 1 ) {
\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
\t\t\t\t!remaining );

\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)
\t\t\tif ( master.state() === "pending" ||
\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

\t\t\t\treturn master.then();
\t\t\t}
\t\t}

\t\t// Multiple arguments are aggregated like Promise.all array elements
\t\twhile ( i-- ) {
\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
\t\t}

\t\treturn master.promise();
\t}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

\t// Support: IE 8 - 9 only
\t// Console exists when dev tools are open, which can happen at any time
\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
\t\twindow.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
\t}
};




jQuery.readyException = function( error ) {
\twindow.setTimeout( function() {
\t\tthrow error;
\t} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

\treadyList
\t\t.then( fn )

\t\t// Wrap jQuery.readyException in a function so that the lookup
\t\t// happens at the time of error handling instead of callback
\t\t// registration.
\t\t.catch( function( error ) {
\t\t\tjQuery.readyException( error );
\t\t} );

\treturn this;
};

jQuery.extend( {

\t// Is the DOM ready to be used? Set to true once it occurs.
\tisReady: false,

\t// A counter to track how many items to wait for before
\t// the ready event fires. See #6781
\treadyWait: 1,

\t// Handle when the DOM is ready
\tready: function( wait ) {

\t\t// Abort if there are pending holds or we're already ready
\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
\t\t\treturn;
\t\t}

\t\t// Remember that the DOM is ready
\t\tjQuery.isReady = true;

\t\t// If a normal DOM Ready event fired, decrement, and wait if need be
\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {
\t\t\treturn;
\t\t}

\t\t// If there are functions bound, to execute
\t\treadyList.resolveWith( document, [ jQuery ] );
\t}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
\tdocument.removeEventListener( "DOMContentLoaded", completed );
\twindow.removeEventListener( "load", completed );
\tjQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
\t( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

\t// Handle it asynchronously to allow scripts the opportunity to delay ready
\twindow.setTimeout( jQuery.ready );

} else {

\t// Use the handy event callback
\tdocument.addEventListener( "DOMContentLoaded", completed );

\t// A fallback to window.onload, that will always work
\twindow.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
\tvar i = 0,
\t\tlen = elems.length,
\t\tbulk = key == null;

\t// Sets many values
\tif ( jQuery.type( key ) === "object" ) {
\t\tchainable = true;
\t\tfor ( i in key ) {
\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );
\t\t}

\t// Sets one value
\t} else if ( value !== undefined ) {
\t\tchainable = true;

\t\tif ( !jQuery.isFunction( value ) ) {
\t\t\traw = true;
\t\t}

\t\tif ( bulk ) {

\t\t\t// Bulk operations run against the entire set
\t\t\tif ( raw ) {
\t\t\t\tfn.call( elems, value );
\t\t\t\tfn = null;

\t\t\t// ...except when executing function values
\t\t\t} else {
\t\t\t\tbulk = fn;
\t\t\t\tfn = function( elem, key, value ) {
\t\t\t\t\treturn bulk.call( jQuery( elem ), value );
\t\t\t\t};
\t\t\t}
\t\t}

\t\tif ( fn ) {
\t\t\tfor ( ; i < len; i++ ) {
\t\t\t\tfn(
\t\t\t\t\telems[ i ], key, raw ?
\t\t\t\t\tvalue :
\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )
\t\t\t\t);
\t\t\t}
\t\t}
\t}

\tif ( chainable ) {
\t\treturn elems;
\t}

\t// Gets
\tif ( bulk ) {
\t\treturn fn.call( elems );
\t}

\treturn len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

\t// Accepts only:
\t//  - Node
\t//    - Node.ELEMENT_NODE
\t//    - Node.DOCUMENT_NODE
\t//  - Object
\t//    - Any
\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
\tthis.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

\tcache: function( owner ) {

\t\t// Check if the owner object already has a cache
\t\tvar value = owner[ this.expando ];

\t\t// If not, create one
\t\tif ( !value ) {
\t\t\tvalue = {};

\t\t\t// We can accept data for non-element nodes in modern browsers,
\t\t\t// but we should not, see #8335.
\t\t\t// Always return an empty object.
\t\t\tif ( acceptData( owner ) ) {

\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over
\t\t\t\t// use plain assignment
\t\t\t\tif ( owner.nodeType ) {
\t\t\t\t\towner[ this.expando ] = value;

\t\t\t\t// Otherwise secure it in a non-enumerable property
\t\t\t\t// configurable must be true to allow the property to be
\t\t\t\t// deleted when data is removed
\t\t\t\t} else {
\t\t\t\t\tObject.defineProperty( owner, this.expando, {
\t\t\t\t\t\tvalue: value,
\t\t\t\t\t\tconfigurable: true
\t\t\t\t\t} );
\t\t\t\t}
\t\t\t}
\t\t}

\t\treturn value;
\t},
\tset: function( owner, data, value ) {
\t\tvar prop,
\t\t\tcache = this.cache( owner );

\t\t// Handle: [ owner, key, value ] args
\t\t// Always use camelCase key (gh-2257)
\t\tif ( typeof data === "string" ) {
\t\t\tcache[ jQuery.camelCase( data ) ] = value;

\t\t// Handle: [ owner, { properties } ] args
\t\t} else {

\t\t\t// Copy the properties one-by-one to the cache object
\t\t\tfor ( prop in data ) {
\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];
\t\t\t}
\t\t}
\t\treturn cache;
\t},
\tget: function( owner, key ) {
\t\treturn key === undefined ?
\t\t\tthis.cache( owner ) :

\t\t\t// Always use camelCase key (gh-2257)
\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
\t},
\taccess: function( owner, key, value ) {

\t\t// In cases where either:
\t\t//
\t\t//   1. No key was specified
\t\t//   2. A string key was specified, but no value provided
\t\t//
\t\t// Take the "read" path and allow the get method to determine
\t\t// which value to return, respectively either:
\t\t//
\t\t//   1. The entire cache object
\t\t//   2. The data stored at the key
\t\t//
\t\tif ( key === undefined ||
\t\t\t\t( ( key && typeof key === "string" ) && value === undefined ) ) {

\t\t\treturn this.get( owner, key );
\t\t}

\t\t// When the key is not a string, or both a key and value
\t\t// are specified, set or extend (existing objects) with either:
\t\t//
\t\t//   1. An object of properties
\t\t//   2. A key and value
\t\t//
\t\tthis.set( owner, key, value );

\t\t// Since the "set" path can have two possible entry points
\t\t// return the expected data based on which path was taken[*]
\t\treturn value !== undefined ? value : key;
\t},
\tremove: function( owner, key ) {
\t\tvar i,
\t\t\tcache = owner[ this.expando ];

\t\tif ( cache === undefined ) {
\t\t\treturn;
\t\t}

\t\tif ( key !== undefined ) {

\t\t\t// Support array or space separated string of keys
\t\t\tif ( Array.isArray( key ) ) {

\t\t\t\t// If key is an array of keys...
\t\t\t\t// We always set camelCase keys, so remove that.
\t\t\t\tkey = key.map( jQuery.camelCase );
\t\t\t} else {
\t\t\t\tkey = jQuery.camelCase( key );

\t\t\t\t// If a key with the spaces exists, use it.
\t\t\t\t// Otherwise, create an array by matching non-whitespace
\t\t\t\tkey = key in cache ?
\t\t\t\t\t[ key ] :
\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );
\t\t\t}

\t\t\ti = key.length;

\t\t\twhile ( i-- ) {
\t\t\t\tdelete cache[ key[ i ] ];
\t\t\t}
\t\t}

\t\t// Remove the expando if there's no more data
\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {

\t\t\t// Support: Chrome <=35 - 45
\t\t\t// Webkit & Blink performance suffers when deleting properties
\t\t\t// from DOM nodes, so set to undefined instead
\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
\t\t\tif ( owner.nodeType ) {
\t\t\t\towner[ this.expando ] = undefined;
\t\t\t} else {
\t\t\t\tdelete owner[ this.expando ];
\t\t\t}
\t\t}
\t},
\thasData: function( owner ) {
\t\tvar cache = owner[ this.expando ];
\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );
\t}
};
var dataPriv = new Data();

var dataUser = new Data();



//\tImplementation Summary
//
//\t1. Enforce API surface and semantic compatibility with 1.9.x branch
//\t2. Improve the module's maintainability by reducing the storage
//\t\tpaths to a single mechanism.
//\t3. Use the same single mechanism to support "private" and "user" data.
//\t4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//\t5. Avoid exposing implementation details on user objects (eg. expando properties)
//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,
\trmultiDash = /[A-Z]/g;

function getData( data ) {
\tif ( data === "true" ) {
\t\treturn true;
\t}

\tif ( data === "false" ) {
\t\treturn false;
\t}

\tif ( data === "null" ) {
\t\treturn null;
\t}

\t// Only convert to a number if it doesn't change the string
\tif ( data === +data + "" ) {
\t\treturn +data;
\t}

\tif ( rbrace.test( data ) ) {
\t\treturn JSON.parse( data );
\t}

\treturn data;
}

function dataAttr( elem, key, data ) {
\tvar name;

\t// If nothing was found internally, try to fetch any
\t// data from the HTML5 data-* attribute
\tif ( data === undefined && elem.nodeType === 1 ) {
\t\tname = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
\t\tdata = elem.getAttribute( name );

\t\tif ( typeof data === "string" ) {
\t\t\ttry {
\t\t\t\tdata = getData( data );
\t\t\t} catch ( e ) {}

\t\t\t// Make sure we set the data so it isn't changed later
\t\t\tdataUser.set( elem, key, data );
\t\t} else {
\t\t\tdata = undefined;
\t\t}
\t}
\treturn data;
}

jQuery.extend( {
\thasData: function( elem ) {
\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );
\t},

\tdata: function( elem, name, data ) {
\t\treturn dataUser.access( elem, name, data );
\t},

\tremoveData: function( elem, name ) {
\t\tdataUser.remove( elem, name );
\t},

\t// TODO: Now that all calls to _data and _removeData have been replaced
\t// with direct calls to dataPriv methods, these can be deprecated.
\t_data: function( elem, name, data ) {
\t\treturn dataPriv.access( elem, name, data );
\t},

\t_removeData: function( elem, name ) {
\t\tdataPriv.remove( elem, name );
\t}
} );

jQuery.fn.extend( {
\tdata: function( key, value ) {
\t\tvar i, name, data,
\t\t\telem = this[ 0 ],
\t\t\tattrs = elem && elem.attributes;

\t\t// Gets all values
\t\tif ( key === undefined ) {
\t\t\tif ( this.length ) {
\t\t\t\tdata = dataUser.get( elem );

\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
\t\t\t\t\ti = attrs.length;
\t\t\t\t\twhile ( i-- ) {

\t\t\t\t\t\t// Support: IE 11 only
\t\t\t\t\t\t// The attrs elements can be null (#14894)
\t\t\t\t\t\tif ( attrs[ i ] ) {
\t\t\t\t\t\t\tname = attrs[ i ].name;
\t\t\t\t\t\t\tif ( name.indexOf( "data-" ) === 0 ) {
\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );
\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t\tdataPriv.set( elem, "hasDataAttrs", true );
\t\t\t\t}
\t\t\t}

\t\t\treturn data;
\t\t}

\t\t// Sets multiple values
\t\tif ( typeof key === "object" ) {
\t\t\treturn this.each( function() {
\t\t\t\tdataUser.set( this, key );
\t\t\t} );
\t\t}

\t\treturn access( this, function( value ) {
\t\t\tvar data;

\t\t\t// The calling jQuery object (element matches) is not empty
\t\t\t// (and therefore has an element appears at this[ 0 ]) and the
\t\t\t// `value` parameter was not undefined. An empty jQuery object
\t\t\t// will result in `undefined` for elem = this[ 0 ] which will
\t\t\t// throw an exception if an attempt to read a data cache is made.
\t\t\tif ( elem && value === undefined ) {

\t\t\t\t// Attempt to get data from the cache
\t\t\t\t// The key will always be camelCased in Data
\t\t\t\tdata = dataUser.get( elem, key );
\t\t\t\tif ( data !== undefined ) {
\t\t\t\t\treturn data;
\t\t\t\t}

\t\t\t\t// Attempt to "discover" the data in
\t\t\t\t// HTML5 custom data-* attrs
\t\t\t\tdata = dataAttr( elem, key );
\t\t\t\tif ( data !== undefined ) {
\t\t\t\t\treturn data;
\t\t\t\t}

\t\t\t\t// We tried really hard, but the data doesn't exist.
\t\t\t\treturn;
\t\t\t}

\t\t\t// Set the data...
\t\t\tthis.each( function() {

\t\t\t\t// We always store the camelCased key
\t\t\t\tdataUser.set( this, key, value );
\t\t\t} );
\t\t}, null, value, arguments.length > 1, null, true );
\t},

\tremoveData: function( key ) {
\t\treturn this.each( function() {
\t\t\tdataUser.remove( this, key );
\t\t} );
\t}
} );


jQuery.extend( {
\tqueue: function( elem, type, data ) {
\t\tvar queue;

\t\tif ( elem ) {
\t\t\ttype = ( type || "fx" ) + "queue";
\t\t\tqueue = dataPriv.get( elem, type );

\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup
\t\t\tif ( data ) {
\t\t\t\tif ( !queue || Array.isArray( data ) ) {
\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
\t\t\t\t} else {
\t\t\t\t\tqueue.push( data );
\t\t\t\t}
\t\t\t}
\t\t\treturn queue || [];
\t\t}
\t},

\tdequeue: function( elem, type ) {
\t\ttype = type || "fx";

\t\tvar queue = jQuery.queue( elem, type ),
\t\t\tstartLength = queue.length,
\t\t\tfn = queue.shift(),
\t\t\thooks = jQuery._queueHooks( elem, type ),
\t\t\tnext = function() {
\t\t\t\tjQuery.dequeue( elem, type );
\t\t\t};

\t\t// If the fx queue is dequeued, always remove the progress sentinel
\t\tif ( fn === "inprogress" ) {
\t\t\tfn = queue.shift();
\t\t\tstartLength--;
\t\t}

\t\tif ( fn ) {

\t\t\t// Add a progress sentinel to prevent the fx queue from being
\t\t\t// automatically dequeued
\t\t\tif ( type === "fx" ) {
\t\t\t\tqueue.unshift( "inprogress" );
\t\t\t}

\t\t\t// Clear up the last queue stop function
\t\t\tdelete hooks.stop;
\t\t\tfn.call( elem, next, hooks );
\t\t}

\t\tif ( !startLength && hooks ) {
\t\t\thooks.empty.fire();
\t\t}
\t},

\t// Not public - generate a queueHooks object, or return the current one
\t_queueHooks: function( elem, type ) {
\t\tvar key = type + "queueHooks";
\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
\t\t\tempty: jQuery.Callbacks( "once memory" ).add( function() {
\t\t\t\tdataPriv.remove( elem, [ type + "queue", key ] );
\t\t\t} )
\t\t} );
\t}
} );

jQuery.fn.extend( {
\tqueue: function( type, data ) {
\t\tvar setter = 2;

\t\tif ( typeof type !== "string" ) {
\t\t\tdata = type;
\t\t\ttype = "fx";
\t\t\tsetter--;
\t\t}

\t\tif ( arguments.length < setter ) {
\t\t\treturn jQuery.queue( this[ 0 ], type );
\t\t}

\t\treturn data === undefined ?
\t\t\tthis :
\t\t\tthis.each( function() {
\t\t\t\tvar queue = jQuery.queue( this, type, data );

\t\t\t\t// Ensure a hooks for this queue
\t\t\t\tjQuery._queueHooks( this, type );

\t\t\t\tif ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
\t\t\t\t\tjQuery.dequeue( this, type );
\t\t\t\t}
\t\t\t} );
\t},
\tdequeue: function( type ) {
\t\treturn this.each( function() {
\t\t\tjQuery.dequeue( this, type );
\t\t} );
\t},
\tclearQueue: function( type ) {
\t\treturn this.queue( type || "fx", [] );
\t},

\t// Get a promise resolved when queues of a certain type
\t// are emptied (fx is the type by default)
\tpromise: function( type, obj ) {
\t\tvar tmp,
\t\t\tcount = 1,
\t\t\tdefer = jQuery.Deferred(),
\t\t\telements = this,
\t\t\ti = this.length,
\t\t\tresolve = function() {
\t\t\t\tif ( !( --count ) ) {
\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );
\t\t\t\t}
\t\t\t};

\t\tif ( typeof type !== "string" ) {
\t\t\tobj = type;
\t\t\ttype = undefined;
\t\t}
\t\ttype = type || "fx";

\t\twhile ( i-- ) {
\t\t\ttmp = dataPriv.get( elements[ i ], type + "queueHooks" );
\t\t\tif ( tmp && tmp.empty ) {
\t\t\t\tcount++;
\t\t\t\ttmp.empty.add( resolve );
\t\t\t}
\t\t}
\t\tresolve();
\t\treturn defer.promise( obj );
\t}
} );
var pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

\t\t// isHiddenWithinTree might be called from jQuery#filter function;
\t\t// in that case, element will be second argument
\t\telem = el || elem;

\t\t// Inline style trumps all
\t\treturn elem.style.display === "none" ||
\t\t\telem.style.display === "" &&

\t\t\t// Otherwise, check computed style
\t\t\t// Support: Firefox <=43 - 45
\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is
\t\t\t// in the document.
\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&

\t\t\tjQuery.css( elem, "display" ) === "none";
\t};

var swap = function( elem, options, callback, args ) {
\tvar ret, name,
\t\told = {};

\t// Remember the old values, and insert the new ones
\tfor ( name in options ) {
\t\told[ name ] = elem.style[ name ];
\t\telem.style[ name ] = options[ name ];
\t}

\tret = callback.apply( elem, args || [] );

\t// Revert the old values
\tfor ( name in options ) {
\t\telem.style[ name ] = old[ name ];
\t}

\treturn ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
\tvar adjusted,
\t\tscale = 1,
\t\tmaxIterations = 20,
\t\tcurrentValue = tween ?
\t\t\tfunction() {
\t\t\t\treturn tween.cur();
\t\t\t} :
\t\t\tfunction() {
\t\t\t\treturn jQuery.css( elem, prop, "" );
\t\t\t},
\t\tinitial = currentValue(),
\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

\t\t// Starting value computation is required for potential unit mismatches
\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
\t\t\trcssNum.exec( jQuery.css( elem, prop ) );

\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

\t\t// Trust units reported by jQuery.css
\t\tunit = unit || initialInUnit[ 3 ];

\t\t// Make sure we update the tween properties later on
\t\tvalueParts = valueParts || [];

\t\t// Iteratively approximate from a nonzero starting point
\t\tinitialInUnit = +initial || 1;

\t\tdo {

\t\t\t// If previous iteration zeroed out, double until we get *something*.
\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below
\t\t\tscale = scale || ".5";

\t\t\t// Adjust and apply
\t\t\tinitialInUnit = initialInUnit / scale;
\t\t\tjQuery.style( elem, prop, initialInUnit + unit );

\t\t// Update scale, tolerating zero or NaN from tween.cur()
\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.
\t\t} while (
\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
\t\t);
\t}

\tif ( valueParts ) {
\t\tinitialInUnit = +initialInUnit || +initial || 0;

\t\t// Apply relative offset (+=/-=) if specified
\t\tadjusted = valueParts[ 1 ] ?
\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
\t\t\t+valueParts[ 2 ];
\t\tif ( tween ) {
\t\t\ttween.unit = unit;
\t\t\ttween.start = initialInUnit;
\t\t\ttween.end = adjusted;
\t\t}
\t}
\treturn adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
\tvar temp,
\t\tdoc = elem.ownerDocument,
\t\tnodeName = elem.nodeName,
\t\tdisplay = defaultDisplayMap[ nodeName ];

\tif ( display ) {
\t\treturn display;
\t}

\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );
\tdisplay = jQuery.css( temp, "display" );

\ttemp.parentNode.removeChild( temp );

\tif ( display === "none" ) {
\t\tdisplay = "block";
\t}
\tdefaultDisplayMap[ nodeName ] = display;

\treturn display;
}

function showHide( elements, show ) {
\tvar display, elem,
\t\tvalues = [],
\t\tindex = 0,
\t\tlength = elements.length;

\t// Determine new display value for elements that need to change
\tfor ( ; index < length; index++ ) {
\t\telem = elements[ index ];
\t\tif ( !elem.style ) {
\t\t\tcontinue;
\t\t}

\t\tdisplay = elem.style.display;
\t\tif ( show ) {

\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
\t\t\t// check is required in this first loop unless we have a nonempty display value (either
\t\t\t// inline or about-to-be-restored)
\t\t\tif ( display === "none" ) {
\t\t\t\tvalues[ index ] = dataPriv.get( elem, "display" ) || null;
\t\t\t\tif ( !values[ index ] ) {
\t\t\t\t\telem.style.display = "";
\t\t\t\t}
\t\t\t}
\t\t\tif ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );
\t\t\t}
\t\t} else {
\t\t\tif ( display !== "none" ) {
\t\t\t\tvalues[ index ] = "none";

\t\t\t\t// Remember what we're overwriting
\t\t\t\tdataPriv.set( elem, "display", display );
\t\t\t}
\t\t}
\t}

\t// Set the display of the elements in a second loop to avoid constant reflow
\tfor ( index = 0; index < length; index++ ) {
\t\tif ( values[ index ] != null ) {
\t\t\telements[ index ].style.display = values[ index ];
\t\t}
\t}

\treturn elements;
}

jQuery.fn.extend( {
\tshow: function() {
\t\treturn showHide( this, true );
\t},
\thide: function() {
\t\treturn showHide( this );
\t},
\ttoggle: function( state ) {
\t\tif ( typeof state === "boolean" ) {
\t\t\treturn state ? this.show() : this.hide();
\t\t}

\t\treturn this.each( function() {
\t\t\tif ( isHiddenWithinTree( this ) ) {
\t\t\t\tjQuery( this ).show();
\t\t\t} else {
\t\t\t\tjQuery( this ).hide();
\t\t\t}
\t\t} );
\t}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );

var rscriptType = ( /^$|\\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

\t// Support: IE <=9 only
\toption: [ 1, "<select multiple=\'multiple\'>", "</select>" ],

\t// XHTML parsers do not magically insert elements in the
\t// same way that tag soup parsers do. So we cannot shorten
\t// this by omitting <tbody> or other required elements.
\tthead: [ 1, "<table>", "</table>" ],
\tcol: [ 2, "<table><colgroup>", "</colgroup></table>" ],
\ttr: [ 2, "<table><tbody>", "</tbody></table>" ],
\ttd: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

\t_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

\t// Support: IE <=9 - 11 only
\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)
\tvar ret;

\tif ( typeof context.getElementsByTagName !== "undefined" ) {
\t\tret = context.getElementsByTagName( tag || "*" );

\t} else if ( typeof context.querySelectorAll !== "undefined" ) {
\t\tret = context.querySelectorAll( tag || "*" );

\t} else {
\t\tret = [];
\t}

\tif ( tag === undefined || tag && nodeName( context, tag ) ) {
\t\treturn jQuery.merge( [ context ], ret );
\t}

\treturn ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
\tvar i = 0,
\t\tl = elems.length;

\tfor ( ; i < l; i++ ) {
\t\tdataPriv.set(
\t\t\telems[ i ],
\t\t\t"globalEval",
\t\t\t!refElements || dataPriv.get( refElements[ i ], "globalEval" )
\t\t);
\t}
}


var rhtml = /<|&#?\\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
\tvar elem, tmp, tag, wrap, contains, j,
\t\tfragment = context.createDocumentFragment(),
\t\tnodes = [],
\t\ti = 0,
\t\tl = elems.length;

\tfor ( ; i < l; i++ ) {
\t\telem = elems[ i ];

\t\tif ( elem || elem === 0 ) {

\t\t\t// Add nodes directly
\t\t\tif ( jQuery.type( elem ) === "object" ) {

\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only
\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit
\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

\t\t\t// Convert non-html into a text node
\t\t\t} else if ( !rhtml.test( elem ) ) {
\t\t\t\tnodes.push( context.createTextNode( elem ) );

\t\t\t// Convert html into DOM nodes
\t\t\t} else {
\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( "div" ) );

\t\t\t\t// Deserialize a standard representation
\t\t\t\ttag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;
\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

\t\t\t\t// Descend through wrappers to the right content
\t\t\t\tj = wrap[ 0 ];
\t\t\t\twhile ( j-- ) {
\t\t\t\t\ttmp = tmp.lastChild;
\t\t\t\t}

\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only
\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit
\t\t\t\tjQuery.merge( nodes, tmp.childNodes );

\t\t\t\t// Remember the top-level container
\t\t\t\ttmp = fragment.firstChild;

\t\t\t\t// Ensure the created nodes are orphaned (#12392)
\t\t\t\ttmp.textContent = "";
\t\t\t}
\t\t}
\t}

\t// Remove wrapper from fragment
\tfragment.textContent = "";

\ti = 0;
\twhile ( ( elem = nodes[ i++ ] ) ) {

\t\t// Skip elements already in the context collection (trac-4087)
\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {
\t\t\tif ( ignored ) {
\t\t\t\tignored.push( elem );
\t\t\t}
\t\t\tcontinue;
\t\t}

\t\tcontains = jQuery.contains( elem.ownerDocument, elem );

\t\t// Append to fragment
\t\ttmp = getAll( fragment.appendChild( elem ), "script" );

\t\t// Preserve script evaluation history
\t\tif ( contains ) {
\t\t\tsetGlobalEval( tmp );
\t\t}

\t\t// Capture executables
\t\tif ( scripts ) {
\t\t\tj = 0;
\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {
\t\t\t\tif ( rscriptType.test( elem.type || "" ) ) {
\t\t\t\t\tscripts.push( elem );
\t\t\t\t}
\t\t\t}
\t\t}
\t}

\treturn fragment;
}


( function() {
\tvar fragment = document.createDocumentFragment(),
\t\tdiv = fragment.appendChild( document.createElement( "div" ) ),
\t\tinput = document.createElement( "input" );

\t// Support: Android 4.0 - 4.3 only
\t// Check state lost if the name is set (#11217)
\t// Support: Windows Web Apps (WWA)
\t// `name` and `type` must use .setAttribute for WWA (#14901)
\tinput.setAttribute( "type", "radio" );
\tinput.setAttribute( "checked", "checked" );
\tinput.setAttribute( "name", "t" );

\tdiv.appendChild( input );

\t// Support: Android <=4.1 only
\t// Older WebKit doesn't clone checked state correctly in fragments
\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

\t// Support: IE <=11 only
\t// Make sure textarea (and checkbox) defaultValue is properly cloned
\tdiv.innerHTML = "<textarea>x</textarea>";
\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
\trkeyEvent = /^key/,
\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;

function returnTrue() {
\treturn true;
}

function returnFalse() {
\treturn false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
\ttry {
\t\treturn document.activeElement;
\t} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
\tvar origFn, type;

\t// Types can be a map of types/handlers
\tif ( typeof types === "object" ) {

\t\t// ( types-Object, selector, data )
\t\tif ( typeof selector !== "string" ) {

\t\t\t// ( types-Object, data )
\t\t\tdata = data || selector;
\t\t\tselector = undefined;
\t\t}
\t\tfor ( type in types ) {
\t\t\ton( elem, type, selector, data, types[ type ], one );
\t\t}
\t\treturn elem;
\t}

\tif ( data == null && fn == null ) {

\t\t// ( types, fn )
\t\tfn = selector;
\t\tdata = selector = undefined;
\t} else if ( fn == null ) {
\t\tif ( typeof selector === "string" ) {

\t\t\t// ( types, selector, fn )
\t\t\tfn = data;
\t\t\tdata = undefined;
\t\t} else {

\t\t\t// ( types, data, fn )
\t\t\tfn = data;
\t\t\tdata = selector;
\t\t\tselector = undefined;
\t\t}
\t}
\tif ( fn === false ) {
\t\tfn = returnFalse;
\t} else if ( !fn ) {
\t\treturn elem;
\t}

\tif ( one === 1 ) {
\t\torigFn = fn;
\t\tfn = function( event ) {

\t\t\t// Can use an empty set, since event contains the info
\t\t\tjQuery().off( event );
\t\t\treturn origFn.apply( this, arguments );
\t\t};

\t\t// Use same guid so caller can remove using origFn
\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
\t}
\treturn elem.each( function() {
\t\tjQuery.event.add( this, types, fn, data, selector );
\t} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

\tglobal: {},

\tadd: function( elem, types, handler, data, selector ) {

\t\tvar handleObjIn, eventHandle, tmp,
\t\t\tevents, t, handleObj,
\t\t\tspecial, handlers, type, namespaces, origType,
\t\t\telemData = dataPriv.get( elem );

\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)
\t\tif ( !elemData ) {
\t\t\treturn;
\t\t}

\t\t// Caller can pass in an object of custom data in lieu of the handler
\t\tif ( handler.handler ) {
\t\t\thandleObjIn = handler;
\t\t\thandler = handleObjIn.handler;
\t\t\tselector = handleObjIn.selector;
\t\t}

\t\t// Ensure that invalid selectors throw exceptions at attach time
\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)
\t\tif ( selector ) {
\t\t\tjQuery.find.matchesSelector( documentElement, selector );
\t\t}

\t\t// Make sure that the handler has a unique ID, used to find/remove it later
\t\tif ( !handler.guid ) {
\t\t\thandler.guid = jQuery.guid++;
\t\t}

\t\t// Init the element's event structure and main handler, if this is the first
\t\tif ( !( events = elemData.events ) ) {
\t\t\tevents = elemData.events = {};
\t\t}
\t\tif ( !( eventHandle = elemData.handle ) ) {
\t\t\teventHandle = elemData.handle = function( e ) {

\t\t\t\t// Discard the second event of a jQuery.event.trigger() and
\t\t\t\t// when an event is called after a page has unloaded
\t\t\t\treturn typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;
\t\t\t};
\t\t}

\t\t// Handle multiple events separated by a space
\t\ttypes = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
\t\tt = types.length;
\t\twhile ( t-- ) {
\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];
\t\t\ttype = origType = tmp[ 1 ];
\t\t\tnamespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

\t\t\t// There *must* be a type, no attaching namespace-only handlers
\t\t\tif ( !type ) {
\t\t\t\tcontinue;
\t\t\t}

\t\t\t// If event changes its type, use the special event handlers for the changed type
\t\t\tspecial = jQuery.event.special[ type ] || {};

\t\t\t// If selector defined, determine special event api type, otherwise given type
\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;

\t\t\t// Update special based on newly reset type
\t\t\tspecial = jQuery.event.special[ type ] || {};

\t\t\t// handleObj is passed to all event handlers
\t\t\thandleObj = jQuery.extend( {
\t\t\t\ttype: type,
\t\t\t\torigType: origType,
\t\t\t\tdata: data,
\t\t\t\thandler: handler,
\t\t\t\tguid: handler.guid,
\t\t\t\tselector: selector,
\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),
\t\t\t\tnamespace: namespaces.join( "." )
\t\t\t}, handleObjIn );

\t\t\t// Init the event handler queue if we're the first
\t\t\tif ( !( handlers = events[ type ] ) ) {
\t\t\t\thandlers = events[ type ] = [];
\t\t\t\thandlers.delegateCount = 0;

\t\t\t\t// Only use addEventListener if the special events handler returns false
\t\t\t\tif ( !special.setup ||
\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {

\t\t\t\t\tif ( elem.addEventListener ) {
\t\t\t\t\t\telem.addEventListener( type, eventHandle );
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}

\t\t\tif ( special.add ) {
\t\t\t\tspecial.add.call( elem, handleObj );

\t\t\t\tif ( !handleObj.handler.guid ) {
\t\t\t\t\thandleObj.handler.guid = handler.guid;
\t\t\t\t}
\t\t\t}

\t\t\t// Add to the element's handler list, delegates in front
\t\t\tif ( selector ) {
\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );
\t\t\t} else {
\t\t\t\thandlers.push( handleObj );
\t\t\t}

\t\t\t// Keep track of which events have ever been used, for event optimization
\t\t\tjQuery.event.global[ type ] = true;
\t\t}

\t},

\t// Detach an event or set of events from an element
\tremove: function( elem, types, handler, selector, mappedTypes ) {

\t\tvar j, origCount, tmp,
\t\t\tevents, t, handleObj,
\t\t\tspecial, handlers, type, namespaces, origType,
\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

\t\tif ( !elemData || !( events = elemData.events ) ) {
\t\t\treturn;
\t\t}

\t\t// Once for each type.namespace in types; type may be omitted
\t\ttypes = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
\t\tt = types.length;
\t\twhile ( t-- ) {
\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];
\t\t\ttype = origType = tmp[ 1 ];
\t\t\tnamespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

\t\t\t// Unbind all events (on this namespace, if provided) for the element
\t\t\tif ( !type ) {
\t\t\t\tfor ( type in events ) {
\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );
\t\t\t\t}
\t\t\t\tcontinue;
\t\t\t}

\t\t\tspecial = jQuery.event.special[ type ] || {};
\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;
\t\t\thandlers = events[ type ] || [];
\t\t\ttmp = tmp[ 2 ] &&
\t\t\t\tnew RegExp( "(^|\\\\.)" + namespaces.join( "\\\\.(?:.*\\\\.|)" ) + "(\\\\.|$)" );

\t\t\t// Remove matching events
\t\t\torigCount = j = handlers.length;
\t\t\twhile ( j-- ) {
\t\t\t\thandleObj = handlers[ j ];

\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&
\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&
\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&
\t\t\t\t\t( !selector || selector === handleObj.selector ||
\t\t\t\t\t\tselector === "**" && handleObj.selector ) ) {
\t\t\t\t\thandlers.splice( j, 1 );

\t\t\t\t\tif ( handleObj.selector ) {
\t\t\t\t\t\thandlers.delegateCount--;
\t\t\t\t\t}
\t\t\t\t\tif ( special.remove ) {
\t\t\t\t\t\tspecial.remove.call( elem, handleObj );
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}

\t\t\t// Remove generic event handler if we removed something and no more handlers exist
\t\t\t// (avoids potential for endless recursion during removal of special event handlers)
\t\t\tif ( origCount && !handlers.length ) {
\t\t\t\tif ( !special.teardown ||
\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {

\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );
\t\t\t\t}

\t\t\t\tdelete events[ type ];
\t\t\t}
\t\t}

\t\t// Remove data and the expando if it's no longer used
\t\tif ( jQuery.isEmptyObject( events ) ) {
\t\t\tdataPriv.remove( elem, "handle events" );
\t\t}
\t},

\tdispatch: function( nativeEvent ) {

\t\t// Make a writable jQuery.Event from the native event object
\t\tvar event = jQuery.event.fix( nativeEvent );

\t\tvar i, j, ret, matched, handleObj, handlerQueue,
\t\t\targs = new Array( arguments.length ),
\t\t\thandlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
\t\t\tspecial = jQuery.event.special[ event.type ] || {};

\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event
\t\targs[ 0 ] = event;

\t\tfor ( i = 1; i < arguments.length; i++ ) {
\t\t\targs[ i ] = arguments[ i ];
\t\t}

\t\tevent.delegateTarget = this;

\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired
\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
\t\t\treturn;
\t\t}

\t\t// Determine handlers
\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );

\t\t// Run delegates first; they may want to stop propagation beneath us
\t\ti = 0;
\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
\t\t\tevent.currentTarget = matched.elem;

\t\t\tj = 0;
\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&
\t\t\t\t!event.isImmediatePropagationStopped() ) {

\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)
\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).
\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

\t\t\t\t\tevent.handleObj = handleObj;
\t\t\t\t\tevent.data = handleObj.data;

\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );

\t\t\t\t\tif ( ret !== undefined ) {
\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {
\t\t\t\t\t\t\tevent.preventDefault();
\t\t\t\t\t\t\tevent.stopPropagation();
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}

\t\t// Call the postDispatch hook for the mapped type
\t\tif ( special.postDispatch ) {
\t\t\tspecial.postDispatch.call( this, event );
\t\t}

\t\treturn event.result;
\t},

\thandlers: function( event, handlers ) {
\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,
\t\t\thandlerQueue = [],
\t\t\tdelegateCount = handlers.delegateCount,
\t\t\tcur = event.target;

\t\t// Find delegate handlers
\t\tif ( delegateCount &&

\t\t\t// Support: IE <=9
\t\t\t// Black-hole SVG <use> instance trees (trac-13180)
\t\t\tcur.nodeType &&

\t\t\t// Support: Firefox <=42
\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
\t\t\t// Support: IE 11 only
\t\t\t// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
\t\t\t!( event.type === "click" && event.button >= 1 ) ) {

\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {

\t\t\t\t// Don't check non-elements (#13208)
\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
\t\t\t\tif ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
\t\t\t\t\tmatchedHandlers = [];
\t\t\t\t\tmatchedSelectors = {};
\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {
\t\t\t\t\t\thandleObj = handlers[ i ];

\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)
\t\t\t\t\t\tsel = handleObj.selector + " ";

\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {
\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?
\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :
\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;
\t\t\t\t\t\t}
\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {
\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t\tif ( matchedHandlers.length ) {
\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}

\t\t// Add the remaining (directly-bound) handlers
\t\tcur = this;
\t\tif ( delegateCount < handlers.length ) {
\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
\t\t}

\t\treturn handlerQueue;
\t},

\taddProp: function( name, hook ) {
\t\tObject.defineProperty( jQuery.Event.prototype, name, {
\t\t\tenumerable: true,
\t\t\tconfigurable: true,

\t\t\tget: jQuery.isFunction( hook ) ?
\t\t\t\tfunction() {
\t\t\t\t\tif ( this.originalEvent ) {
\t\t\t\t\t\t\treturn hook( this.originalEvent );
\t\t\t\t\t}
\t\t\t\t} :
\t\t\t\tfunction() {
\t\t\t\t\tif ( this.originalEvent ) {
\t\t\t\t\t\t\treturn this.originalEvent[ name ];
\t\t\t\t\t}
\t\t\t\t},

\t\t\tset: function( value ) {
\t\t\t\tObject.defineProperty( this, name, {
\t\t\t\t\tenumerable: true,
\t\t\t\t\tconfigurable: true,
\t\t\t\t\twritable: true,
\t\t\t\t\tvalue: value
\t\t\t\t} );
\t\t\t}
\t\t} );
\t},

\tfix: function( originalEvent ) {
\t\treturn originalEvent[ jQuery.expando ] ?
\t\t\toriginalEvent :
\t\t\tnew jQuery.Event( originalEvent );
\t},

\tspecial: {
\t\tload: {

\t\t\t// Prevent triggered image.load events from bubbling to window.load
\t\t\tnoBubble: true
\t\t},
\t\tfocus: {

\t\t\t// Fire native event if possible so blur/focus sequence is correct
\t\t\ttrigger: function() {
\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {
\t\t\t\t\tthis.focus();
\t\t\t\t\treturn false;
\t\t\t\t}
\t\t\t},
\t\t\tdelegateType: "focusin"
\t\t},
\t\tblur: {
\t\t\ttrigger: function() {
\t\t\t\tif ( this === safeActiveElement() && this.blur ) {
\t\t\t\t\tthis.blur();
\t\t\t\t\treturn false;
\t\t\t\t}
\t\t\t},
\t\t\tdelegateType: "focusout"
\t\t},
\t\tclick: {

\t\t\t// For checkbox, fire native event so checked state will be right
\t\t\ttrigger: function() {
\t\t\t\tif ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
\t\t\t\t\tthis.click();
\t\t\t\t\treturn false;
\t\t\t\t}
\t\t\t},

\t\t\t// For cross-browser consistency, don't fire native .click() on links
\t\t\t_default: function( event ) {
\t\t\t\treturn nodeName( event.target, "a" );
\t\t\t}
\t\t},

\t\tbeforeunload: {
\t\t\tpostDispatch: function( event ) {

\t\t\t\t// Support: Firefox 20+
\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.
\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {
\t\t\t\t\tevent.originalEvent.returnValue = event.result;
\t\t\t\t}
\t\t\t}
\t\t}
\t}
};

jQuery.removeEvent = function( elem, type, handle ) {

\t// This "if" is needed for plain objects
\tif ( elem.removeEventListener ) {
\t\telem.removeEventListener( type, handle );
\t}
};

jQuery.Event = function( src, props ) {

\t// Allow instantiation without the 'new' keyword
\tif ( !( this instanceof jQuery.Event ) ) {
\t\treturn new jQuery.Event( src, props );
\t}

\t// Event object
\tif ( src && src.type ) {
\t\tthis.originalEvent = src;
\t\tthis.type = src.type;

\t\t// Events bubbling up the document may have been marked as prevented
\t\t// by a handler lower down the tree; reflect the correct value.
\t\tthis.isDefaultPrevented = src.defaultPrevented ||
\t\t\t\tsrc.defaultPrevented === undefined &&

\t\t\t\t// Support: Android <=2.3 only
\t\t\t\tsrc.returnValue === false ?
\t\t\treturnTrue :
\t\t\treturnFalse;

\t\t// Create target properties
\t\t// Support: Safari <=6 - 7 only
\t\t// Target should not be a text node (#504, #13143)
\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?
\t\t\tsrc.target.parentNode :
\t\t\tsrc.target;

\t\tthis.currentTarget = src.currentTarget;
\t\tthis.relatedTarget = src.relatedTarget;

\t// Event type
\t} else {
\t\tthis.type = src;
\t}

\t// Put explicitly provided properties onto the event object
\tif ( props ) {
\t\tjQuery.extend( this, props );
\t}

\t// Create a timestamp if incoming event doesn't have one
\tthis.timeStamp = src && src.timeStamp || jQuery.now();

\t// Mark it as fixed
\tthis[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
\tconstructor: jQuery.Event,
\tisDefaultPrevented: returnFalse,
\tisPropagationStopped: returnFalse,
\tisImmediatePropagationStopped: returnFalse,
\tisSimulated: false,

\tpreventDefault: function() {
\t\tvar e = this.originalEvent;

\t\tthis.isDefaultPrevented = returnTrue;

\t\tif ( e && !this.isSimulated ) {
\t\t\te.preventDefault();
\t\t}
\t},
\tstopPropagation: function() {
\t\tvar e = this.originalEvent;

\t\tthis.isPropagationStopped = returnTrue;

\t\tif ( e && !this.isSimulated ) {
\t\t\te.stopPropagation();
\t\t}
\t},
\tstopImmediatePropagation: function() {
\t\tvar e = this.originalEvent;

\t\tthis.isImmediatePropagationStopped = returnTrue;

\t\tif ( e && !this.isSimulated ) {
\t\t\te.stopImmediatePropagation();
\t\t}

\t\tthis.stopPropagation();
\t}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
\taltKey: true,
\tbubbles: true,
\tcancelable: true,
\tchangedTouches: true,
\tctrlKey: true,
\tdetail: true,
\teventPhase: true,
\tmetaKey: true,
\tpageX: true,
\tpageY: true,
\tshiftKey: true,
\tview: true,
\t"char": true,
\tcharCode: true,
\tkey: true,
\tkeyCode: true,
\tbutton: true,
\tbuttons: true,
\tclientX: true,
\tclientY: true,
\toffsetX: true,
\toffsetY: true,
\tpointerId: true,
\tpointerType: true,
\tscreenX: true,
\tscreenY: true,
\ttargetTouches: true,
\ttoElement: true,
\ttouches: true,

\twhich: function( event ) {
\t\tvar button = event.button;

\t\t// Add which for key events
\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {
\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;
\t\t}

\t\t// Add which for click: 1 === left; 2 === middle; 3 === right
\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
\t\t\tif ( button & 1 ) {
\t\t\t\treturn 1;
\t\t\t}

\t\t\tif ( button & 2 ) {
\t\t\t\treturn 3;
\t\t\t}

\t\t\tif ( button & 4 ) {
\t\t\t\treturn 2;
\t\t\t}

\t\t\treturn 0;
\t\t}

\t\treturn event.which;
\t}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
\tmouseenter: "mouseover",
\tmouseleave: "mouseout",
\tpointerenter: "pointerover",
\tpointerleave: "pointerout"
}, function( orig, fix ) {
\tjQuery.event.special[ orig ] = {
\t\tdelegateType: fix,
\t\tbindType: fix,

\t\thandle: function( event ) {
\t\t\tvar ret,
\t\t\t\ttarget = this,
\t\t\t\trelated = event.relatedTarget,
\t\t\t\thandleObj = event.handleObj;

\t\t\t// For mouseenter/leave call the handler if related is outside the target.
\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window
\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
\t\t\t\tevent.type = handleObj.origType;
\t\t\t\tret = handleObj.handler.apply( this, arguments );
\t\t\t\tevent.type = fix;
\t\t\t}
\t\t\treturn ret;
\t\t}
\t};
} );

jQuery.fn.extend( {

\ton: function( types, selector, data, fn ) {
\t\treturn on( this, types, selector, data, fn );
\t},
\tone: function( types, selector, data, fn ) {
\t\treturn on( this, types, selector, data, fn, 1 );
\t},
\toff: function( types, selector, fn ) {
\t\tvar handleObj, type;
\t\tif ( types && types.preventDefault && types.handleObj ) {

\t\t\t// ( event )  dispatched jQuery.Event
\t\t\thandleObj = types.handleObj;
\t\t\tjQuery( types.delegateTarget ).off(
\t\t\t\thandleObj.namespace ?
\t\t\t\t\thandleObj.origType + "." + handleObj.namespace :
\t\t\t\t\thandleObj.origType,
\t\t\t\thandleObj.selector,
\t\t\t\thandleObj.handler
\t\t\t);
\t\t\treturn this;
\t\t}
\t\tif ( typeof types === "object" ) {

\t\t\t// ( types-object [, selector] )
\t\t\tfor ( type in types ) {
\t\t\t\tthis.off( type, selector, types[ type ] );
\t\t\t}
\t\t\treturn this;
\t\t}
\t\tif ( selector === false || typeof selector === "function" ) {

\t\t\t// ( types [, fn] )
\t\t\tfn = selector;
\t\t\tselector = undefined;
\t\t}
\t\tif ( fn === false ) {
\t\t\tfn = returnFalse;
\t\t}
\t\treturn this.each( function() {
\t\t\tjQuery.event.remove( this, types, fn, selector );
\t\t} );
\t}
} );


var

\t/* eslint-disable max-len */

\t// See https://github.com/eslint/eslint/issues/3229
\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,

\t/* eslint-enable */

\t// Support: IE <=10 - 11, Edge 12 - 13
\t// In IE/Edge using regex groups here causes severe slowdowns.
\t// See https://connect.microsoft.com/IE/feedback/details/1736512/
\trnoInnerhtml = /<script|<style|<link/i,

\t// checked="checked" or checked
\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,
\trscriptTypeMasked = /^true\\/(.*)/,
\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
\tif ( nodeName( elem, "table" ) &&
\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

\t\treturn jQuery( ">tbody", elem )[ 0 ] || elem;
\t}

\treturn elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
\telem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
\treturn elem;
}
function restoreScript( elem ) {
\tvar match = rscriptTypeMasked.exec( elem.type );

\tif ( match ) {
\t\telem.type = match[ 1 ];
\t} else {
\t\telem.removeAttribute( "type" );
\t}

\treturn elem;
}

function cloneCopyEvent( src, dest ) {
\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

\tif ( dest.nodeType !== 1 ) {
\t\treturn;
\t}

\t// 1. Copy private data: events, handlers, etc.
\tif ( dataPriv.hasData( src ) ) {
\t\tpdataOld = dataPriv.access( src );
\t\tpdataCur = dataPriv.set( dest, pdataOld );
\t\tevents = pdataOld.events;

\t\tif ( events ) {
\t\t\tdelete pdataCur.handle;
\t\t\tpdataCur.events = {};

\t\t\tfor ( type in events ) {
\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {
\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );
\t\t\t\t}
\t\t\t}
\t\t}
\t}

\t// 2. Copy user data
\tif ( dataUser.hasData( src ) ) {
\t\tudataOld = dataUser.access( src );
\t\tudataCur = jQuery.extend( {}, udataOld );

\t\tdataUser.set( dest, udataCur );
\t}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
\tvar nodeName = dest.nodeName.toLowerCase();

\t// Fails to persist the checked state of a cloned checkbox or radio button.
\tif ( nodeName === "input" && rcheckableType.test( src.type ) ) {
\t\tdest.checked = src.checked;

\t// Fails to return the selected option to the default selected state when cloning options
\t} else if ( nodeName === "input" || nodeName === "textarea" ) {
\t\tdest.defaultValue = src.defaultValue;
\t}
}

function domManip( collection, args, callback, ignored ) {

\t// Flatten any nested arrays
\targs = concat.apply( [], args );

\tvar fragment, first, scripts, hasScripts, node, doc,
\t\ti = 0,
\t\tl = collection.length,
\t\tiNoClone = l - 1,
\t\tvalue = args[ 0 ],
\t\tisFunction = jQuery.isFunction( value );

\t// We can't cloneNode fragments that contain checked, in WebKit
\tif ( isFunction ||
\t\t\t( l > 1 && typeof value === "string" &&
\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {
\t\treturn collection.each( function( index ) {
\t\t\tvar self = collection.eq( index );
\t\t\tif ( isFunction ) {
\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );
\t\t\t}
\t\t\tdomManip( self, args, callback, ignored );
\t\t} );
\t}

\tif ( l ) {
\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
\t\tfirst = fragment.firstChild;

\t\tif ( fragment.childNodes.length === 1 ) {
\t\t\tfragment = first;
\t\t}

\t\t// Require either new content or an interest in ignored elements to invoke the callback
\t\tif ( first || ignored ) {
\t\t\tscripts = jQuery.map( getAll( fragment, "script" ), disableScript );
\t\t\thasScripts = scripts.length;

\t\t\t// Use the original fragment for the last item
\t\t\t// instead of the first because it can end up
\t\t\t// being emptied incorrectly in certain situations (#8070).
\t\t\tfor ( ; i < l; i++ ) {
\t\t\t\tnode = fragment;

\t\t\t\tif ( i !== iNoClone ) {
\t\t\t\t\tnode = jQuery.clone( node, true, true );

\t\t\t\t\t// Keep references to cloned scripts for later restoration
\t\t\t\t\tif ( hasScripts ) {

\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only
\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit
\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, "script" ) );
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\tcallback.call( collection[ i ], node, i );
\t\t\t}

\t\t\tif ( hasScripts ) {
\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;

\t\t\t\t// Reenable scripts
\t\t\t\tjQuery.map( scripts, restoreScript );

\t\t\t\t// Evaluate executable scripts on first document insertion
\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {
\t\t\t\t\tnode = scripts[ i ];
\t\t\t\t\tif ( rscriptType.test( node.type || "" ) &&
\t\t\t\t\t\t!dataPriv.access( node, "globalEval" ) &&
\t\t\t\t\t\tjQuery.contains( doc, node ) ) {

\t\t\t\t\t\tif ( node.src ) {

\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present
\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {
\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );
\t\t\t\t\t\t\t}
\t\t\t\t\t\t} else {
\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, "" ), doc );
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}
\t}

\treturn collection;
}

function remove( elem, selector, keepData ) {
\tvar node,
\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,
\t\ti = 0;

\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {
\t\tif ( !keepData && node.nodeType === 1 ) {
\t\t\tjQuery.cleanData( getAll( node ) );
\t\t}

\t\tif ( node.parentNode ) {
\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
\t\t\t\tsetGlobalEval( getAll( node, "script" ) );
\t\t\t}
\t\t\tnode.parentNode.removeChild( node );
\t\t}
\t}

\treturn elem;
}

jQuery.extend( {
\thtmlPrefilter: function( html ) {
\t\treturn html.replace( rxhtmlTag, "<$1></$2>" );
\t},

\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {
\t\tvar i, l, srcElements, destElements,
\t\t\tclone = elem.cloneNode( true ),
\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );

\t\t// Fix IE cloning issues
\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
\t\t\t\t!jQuery.isXMLDoc( elem ) ) {

\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
\t\t\tdestElements = getAll( clone );
\t\t\tsrcElements = getAll( elem );

\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {
\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );
\t\t\t}
\t\t}

\t\t// Copy the events from the original to the clone
\t\tif ( dataAndEvents ) {
\t\t\tif ( deepDataAndEvents ) {
\t\t\t\tsrcElements = srcElements || getAll( elem );
\t\t\t\tdestElements = destElements || getAll( clone );

\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {
\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );
\t\t\t\t}
\t\t\t} else {
\t\t\t\tcloneCopyEvent( elem, clone );
\t\t\t}
\t\t}

\t\t// Preserve script evaluation history
\t\tdestElements = getAll( clone, "script" );
\t\tif ( destElements.length > 0 ) {
\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
\t\t}

\t\t// Return the cloned set
\t\treturn clone;
\t},

\tcleanData: function( elems ) {
\t\tvar data, elem, type,
\t\t\tspecial = jQuery.event.special,
\t\t\ti = 0;

\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
\t\t\tif ( acceptData( elem ) ) {
\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {
\t\t\t\t\tif ( data.events ) {
\t\t\t\t\t\tfor ( type in data.events ) {
\t\t\t\t\t\t\tif ( special[ type ] ) {
\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );

\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead
\t\t\t\t\t\t\t} else {
\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t}

\t\t\t\t\t// Support: Chrome <=35 - 45+
\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove
\t\t\t\t\telem[ dataPriv.expando ] = undefined;
\t\t\t\t}
\t\t\t\tif ( elem[ dataUser.expando ] ) {

\t\t\t\t\t// Support: Chrome <=35 - 45+
\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove
\t\t\t\t\telem[ dataUser.expando ] = undefined;
\t\t\t\t}
\t\t\t}
\t\t}
\t}
} );

jQuery.fn.extend( {
\tdetach: function( selector ) {
\t\treturn remove( this, selector, true );
\t},

\tremove: function( selector ) {
\t\treturn remove( this, selector );
\t},

\ttext: function( value ) {
\t\treturn access( this, function( value ) {
\t\t\treturn value === undefined ?
\t\t\t\tjQuery.text( this ) :
\t\t\t\tthis.empty().each( function() {
\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
\t\t\t\t\t\tthis.textContent = value;
\t\t\t\t\t}
\t\t\t\t} );
\t\t}, null, value, arguments.length );
\t},

\tappend: function() {
\t\treturn domManip( this, arguments, function( elem ) {
\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
\t\t\t\tvar target = manipulationTarget( this, elem );
\t\t\t\ttarget.appendChild( elem );
\t\t\t}
\t\t} );
\t},

\tprepend: function() {
\t\treturn domManip( this, arguments, function( elem ) {
\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
\t\t\t\tvar target = manipulationTarget( this, elem );
\t\t\t\ttarget.insertBefore( elem, target.firstChild );
\t\t\t}
\t\t} );
\t},

\tbefore: function() {
\t\treturn domManip( this, arguments, function( elem ) {
\t\t\tif ( this.parentNode ) {
\t\t\t\tthis.parentNode.insertBefore( elem, this );
\t\t\t}
\t\t} );
\t},

\tafter: function() {
\t\treturn domManip( this, arguments, function( elem ) {
\t\t\tif ( this.parentNode ) {
\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );
\t\t\t}
\t\t} );
\t},

\tempty: function() {
\t\tvar elem,
\t\t\ti = 0;

\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {
\t\t\tif ( elem.nodeType === 1 ) {

\t\t\t\t// Prevent memory leaks
\t\t\t\tjQuery.cleanData( getAll( elem, false ) );

\t\t\t\t// Remove any remaining nodes
\t\t\t\telem.textContent = "";
\t\t\t}
\t\t}

\t\treturn this;
\t},

\tclone: function( dataAndEvents, deepDataAndEvents ) {
\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;
\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

\t\treturn this.map( function() {
\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );
\t\t} );
\t},

\thtml: function( value ) {
\t\treturn access( this, function( value ) {
\t\t\tvar elem = this[ 0 ] || {},
\t\t\t\ti = 0,
\t\t\t\tl = this.length;

\t\t\tif ( value === undefined && elem.nodeType === 1 ) {
\t\t\t\treturn elem.innerHTML;
\t\t\t}

\t\t\t// See if we can take a shortcut and just use innerHTML
\t\t\tif ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

\t\t\t\tvalue = jQuery.htmlPrefilter( value );

\t\t\t\ttry {
\t\t\t\t\tfor ( ; i < l; i++ ) {
\t\t\t\t\t\telem = this[ i ] || {};

\t\t\t\t\t\t// Remove element nodes and prevent memory leaks
\t\t\t\t\t\tif ( elem.nodeType === 1 ) {
\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );
\t\t\t\t\t\t\telem.innerHTML = value;
\t\t\t\t\t\t}
\t\t\t\t\t}

\t\t\t\t\telem = 0;

\t\t\t\t// If using innerHTML throws an exception, use the fallback method
\t\t\t\t} catch ( e ) {}
\t\t\t}

\t\t\tif ( elem ) {
\t\t\t\tthis.empty().append( value );
\t\t\t}
\t\t}, null, value, arguments.length );
\t},

\treplaceWith: function() {
\t\tvar ignored = [];

\t\t// Make the changes, replacing each non-ignored context element with the new content
\t\treturn domManip( this, arguments, function( elem ) {
\t\t\tvar parent = this.parentNode;

\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {
\t\t\t\tjQuery.cleanData( getAll( this ) );
\t\t\t\tif ( parent ) {
\t\t\t\t\tparent.replaceChild( elem, this );
\t\t\t\t}
\t\t\t}

\t\t// Force callback invocation
\t\t}, ignored );
\t}
} );

jQuery.each( {
\tappendTo: "append",
\tprependTo: "prepend",
\tinsertBefore: "before",
\tinsertAfter: "after",
\treplaceAll: "replaceWith"
}, function( name, original ) {
\tjQuery.fn[ name ] = function( selector ) {
\t\tvar elems,
\t\t\tret = [],
\t\t\tinsert = jQuery( selector ),
\t\t\tlast = insert.length - 1,
\t\t\ti = 0;

\t\tfor ( ; i <= last; i++ ) {
\t\t\telems = i === last ? this : this.clone( true );
\t\t\tjQuery( insert[ i ] )[ original ]( elems );

\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only
\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit
\t\t\tpush.apply( ret, elems.get() );
\t\t}

\t\treturn this.pushStack( ret );
\t};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
\t\t// IE throws on elements created in popups
\t\t// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
\t\tvar view = elem.ownerDocument.defaultView;

\t\tif ( !view || !view.opener ) {
\t\t\tview = window;
\t\t}

\t\treturn view.getComputedStyle( elem );
\t};



( function() {

\t// Executing both pixelPosition & boxSizingReliable tests require only one layout
\t// so they're executed at the same time to save the second computation.
\tfunction computeStyleTests() {

\t\t// This is a singleton, we need to execute it only once
\t\tif ( !div ) {
\t\t\treturn;
\t\t}

\t\tdiv.style.cssText =
\t\t\t"box-sizing:border-box;" +
\t\t\t"position:relative;display:block;" +
\t\t\t"margin:auto;border:1px;padding:1px;" +
\t\t\t"top:1%;width:50%";
\t\tdiv.innerHTML = "";
\t\tdocumentElement.appendChild( container );

\t\tvar divStyle = window.getComputedStyle( div );
\t\tpixelPositionVal = divStyle.top !== "1%";

\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
\t\treliableMarginLeftVal = divStyle.marginLeft === "2px";
\t\tboxSizingReliableVal = divStyle.width === "4px";

\t\t// Support: Android 4.0 - 4.3 only
\t\t// Some styles come back with percentage values, even though they shouldn't
\t\tdiv.style.marginRight = "50%";
\t\tpixelMarginRightVal = divStyle.marginRight === "4px";

\t\tdocumentElement.removeChild( container );

\t\t// Nullify the div so it wouldn't be stored in the memory and
\t\t// it will also be a sign that checks already performed
\t\tdiv = null;
\t}

\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
\t\tcontainer = document.createElement( "div" ),
\t\tdiv = document.createElement( "div" );

\t// Finish early in limited (non-browser) environments
\tif ( !div.style ) {
\t\treturn;
\t}

\t// Support: IE <=9 - 11 only
\t// Style of cloned element affects source element cloned (#8908)
\tdiv.style.backgroundClip = "content-box";
\tdiv.cloneNode( true ).style.backgroundClip = "";
\tsupport.clearCloneStyle = div.style.backgroundClip === "content-box";

\tcontainer.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
\t\t"padding:0;margin-top:1px;position:absolute";
\tcontainer.appendChild( div );

\tjQuery.extend( support, {
\t\tpixelPosition: function() {
\t\t\tcomputeStyleTests();
\t\t\treturn pixelPositionVal;
\t\t},
\t\tboxSizingReliable: function() {
\t\t\tcomputeStyleTests();
\t\t\treturn boxSizingReliableVal;
\t\t},
\t\tpixelMarginRight: function() {
\t\t\tcomputeStyleTests();
\t\t\treturn pixelMarginRightVal;
\t\t},
\t\treliableMarginLeft: function() {
\t\t\tcomputeStyleTests();
\t\t\treturn reliableMarginLeftVal;
\t\t}
\t} );
} )();


function curCSS( elem, name, computed ) {
\tvar width, minWidth, maxWidth, ret,

\t\t// Support: Firefox 51+
\t\t// Retrieving style before computed somehow
\t\t// fixes an issue with getting wrong values
\t\t// on detached elements
\t\tstyle = elem.style;

\tcomputed = computed || getStyles( elem );

\t// getPropertyValue is needed for:
\t//   .css('filter') (IE 9 only, #12537)
\t//   .css('--customProperty) (#3144)
\tif ( computed ) {
\t\tret = computed.getPropertyValue( name ) || computed[ name ];

\t\tif ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
\t\t\tret = jQuery.style( elem, name );
\t\t}

\t\t// A tribute to the "awesome hack by Dean Edwards"
\t\t// Android Browser returns percentage for some values,
\t\t// but width seems to be reliably pixels.
\t\t// This is against the CSSOM draft spec:
\t\t// https://drafts.csswg.org/cssom/#resolved-values
\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

\t\t\t// Remember the original values
\t\t\twidth = style.width;
\t\t\tminWidth = style.minWidth;
\t\t\tmaxWidth = style.maxWidth;

\t\t\t// Put in the new values to get a computed value out
\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;
\t\t\tret = computed.width;

\t\t\t// Revert the changed values
\t\t\tstyle.width = width;
\t\t\tstyle.minWidth = minWidth;
\t\t\tstyle.maxWidth = maxWidth;
\t\t}
\t}

\treturn ret !== undefined ?

\t\t// Support: IE <=9 - 11 only
\t\t// IE returns zIndex value as an integer.
\t\tret + "" :
\t\tret;
}


function addGetHookIf( conditionFn, hookFn ) {

\t// Define the hook, we'll check on the first run if it's really needed.
\treturn {
\t\tget: function() {
\t\t\tif ( conditionFn() ) {

\t\t\t\t// Hook not needed (or it's not possible to use it due
\t\t\t\t// to missing dependency), remove it.
\t\t\t\tdelete this.get;
\t\t\t\treturn;
\t\t\t}

\t\t\t// Hook needed; redefine it so that the support test is not executed again.
\t\t\treturn ( this.get = hookFn ).apply( this, arguments );
\t\t}
\t};
}


var

\t// Swappable if display is none or starts with table
\t// except "table", "table-cell", or "table-caption"
\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
\trdisplayswap = /^(none|table(?!-c[ea]).+)/,
\trcustomProp = /^--/,
\tcssShow = { position: "absolute", visibility: "hidden", display: "block" },
\tcssNormalTransform = {
\t\tletterSpacing: "0",
\t\tfontWeight: "400"
\t},

\tcssPrefixes = [ "Webkit", "Moz", "ms" ],
\temptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

\t// Shortcut for names that are not vendor prefixed
\tif ( name in emptyStyle ) {
\t\treturn name;
\t}

\t// Check for vendor prefixed names
\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
\t\ti = cssPrefixes.length;

\twhile ( i-- ) {
\t\tname = cssPrefixes[ i ] + capName;
\t\tif ( name in emptyStyle ) {
\t\t\treturn name;
\t\t}
\t}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
\tvar ret = jQuery.cssProps[ name ];
\tif ( !ret ) {
\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
\t}
\treturn ret;
}

function setPositiveNumber( elem, value, subtract ) {

\t// Any relative (+/-) values have already been
\t// normalized at this point
\tvar matches = rcssNum.exec( value );
\treturn matches ?

\t\t// Guard against undefined "subtract", e.g., when used as in cssHooks
\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
\t\tvalue;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
\tvar i,
\t\tval = 0;

\t// If we already have the right measurement, avoid augmentation
\tif ( extra === ( isBorderBox ? "border" : "content" ) ) {
\t\ti = 4;

\t// Otherwise initialize for horizontal or vertical properties
\t} else {
\t\ti = name === "width" ? 1 : 0;
\t}

\tfor ( ; i < 4; i += 2 ) {

\t\t// Both box models exclude margin, so add it if we want it
\t\tif ( extra === "margin" ) {
\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
\t\t}

\t\tif ( isBorderBox ) {

\t\t\t// border-box includes padding, so remove it if we want content
\t\t\tif ( extra === "content" ) {
\t\t\t\tval -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
\t\t\t}

\t\t\t// At this point, extra isn't border nor margin, so remove border
\t\t\tif ( extra !== "margin" ) {
\t\t\t\tval -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
\t\t\t}
\t\t} else {

\t\t\t// At this point, extra isn't content, so add padding
\t\t\tval += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

\t\t\t// At this point, extra isn't content nor padding, so add border
\t\t\tif ( extra !== "padding" ) {
\t\t\t\tval += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
\t\t\t}
\t\t}
\t}

\treturn val;
}

function getWidthOrHeight( elem, name, extra ) {

\t// Start with computed style
\tvar valueIsBorderBox,
\t\tstyles = getStyles( elem ),
\t\tval = curCSS( elem, name, styles ),
\t\tisBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

\t// Computed unit is not pixels. Stop here and return.
\tif ( rnumnonpx.test( val ) ) {
\t\treturn val;
\t}

\t// Check for style in case a browser which returns unreliable values
\t// for getComputedStyle silently falls back to the reliable elem.style
\tvalueIsBorderBox = isBorderBox &&
\t\t( support.boxSizingReliable() || val === elem.style[ name ] );

\t// Fall back to offsetWidth/Height when value is "auto"
\t// This happens for inline elements with no explicit setting (gh-3571)
\tif ( val === "auto" ) {
\t\tval = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
\t}

\t// Normalize "", auto, and prepare for extra
\tval = parseFloat( val ) || 0;

\t// Use the active box-sizing model to add/subtract irrelevant styles
\treturn ( val +
\t\taugmentWidthOrHeight(
\t\t\telem,
\t\t\tname,
\t\t\textra || ( isBorderBox ? "border" : "content" ),
\t\t\tvalueIsBorderBox,
\t\t\tstyles
\t\t)
\t) + "px";
}

jQuery.extend( {

\t// Add in style property hooks for overriding the default
\t// behavior of getting and setting a style property
\tcssHooks: {
\t\topacity: {
\t\t\tget: function( elem, computed ) {
\t\t\t\tif ( computed ) {

\t\t\t\t\t// We should always get a number back from opacity
\t\t\t\t\tvar ret = curCSS( elem, "opacity" );
\t\t\t\t\treturn ret === "" ? "1" : ret;
\t\t\t\t}
\t\t\t}
\t\t}
\t},

\t// Don\'t automatically add "px" to these possibly-unitless properties
\tcssNumber: {
\t\t"animationIterationCount": true,
\t\t"columnCount": true,
\t\t"fillOpacity": true,
\t\t"flexGrow": true,
\t\t"flexShrink": true,
\t\t"fontWeight": true,
\t\t"lineHeight": true,
\t\t"opacity": true,
\t\t"order": true,
\t\t"orphans": true,
\t\t"widows": true,
\t\t"zIndex": true,
\t\t"zoom": true
\t},

\t// Add in properties whose names you wish to fix before
\t// setting or getting the value
\tcssProps: {
\t\t"float": "cssFloat"
\t},

\t// Get and set the style property on a DOM Node
\tstyle: function( elem, name, value, extra ) {

\t\t// Don't set styles on text and comment nodes
\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
\t\t\treturn;
\t\t}

\t\t// Make sure that we're working with the right name
\t\tvar ret, type, hooks,
\t\t\torigName = jQuery.camelCase( name ),
\t\t\tisCustomProp = rcustomProp.test( name ),
\t\t\tstyle = elem.style;

\t\t// Make sure that we're working with the right name. We don't
\t\t// want to query the value if it is a CSS custom property
\t\t// since they are user-defined.
\t\tif ( !isCustomProp ) {
\t\t\tname = finalPropName( origName );
\t\t}

\t\t// Gets hook for the prefixed version, then unprefixed version
\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

\t\t// Check if we're setting a value
\t\tif ( value !== undefined ) {
\t\t\ttype = typeof value;

\t\t\t// Convert "+=" or "-=" to relative numbers (#7345)
\t\t\tif ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
\t\t\t\tvalue = adjustCSS( elem, name, ret );

\t\t\t\t// Fixes bug #9237
\t\t\t\ttype = "number";
\t\t\t}

\t\t\t// Make sure that null and NaN values aren't set (#7116)
\t\t\tif ( value == null || value !== value ) {
\t\t\t\treturn;
\t\t\t}

\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)
\t\t\tif ( type === "number" ) {
\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
\t\t\t}

\t\t\t// background-* props affect original clone's values
\t\t\tif ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
\t\t\t\tstyle[ name ] = "inherit";
\t\t\t}

\t\t\t// If a hook was provided, use that value, otherwise just set the specified value
\t\t\tif ( !hooks || !( "set" in hooks ) ||
\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {

\t\t\t\tif ( isCustomProp ) {
\t\t\t\t\tstyle.setProperty( name, value );
\t\t\t\t} else {
\t\t\t\t\tstyle[ name ] = value;
\t\t\t\t}
\t\t\t}

\t\t} else {

\t\t\t// If a hook was provided get the non-computed value from there
\t\t\tif ( hooks && "get" in hooks &&
\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

\t\t\t\treturn ret;
\t\t\t}

\t\t\t// Otherwise just get the value from the style object
\t\t\treturn style[ name ];
\t\t}
\t},

\tcss: function( elem, name, extra, styles ) {
\t\tvar val, num, hooks,
\t\t\torigName = jQuery.camelCase( name ),
\t\t\tisCustomProp = rcustomProp.test( name );

\t\t// Make sure that we're working with the right name. We don't
\t\t// want to modify the value if it is a CSS custom property
\t\t// since they are user-defined.
\t\tif ( !isCustomProp ) {
\t\t\tname = finalPropName( origName );
\t\t}

\t\t// Try prefixed name followed by the unprefixed name
\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

\t\t// If a hook was provided get the computed value from there
\t\tif ( hooks && "get" in hooks ) {
\t\t\tval = hooks.get( elem, true, extra );
\t\t}

\t\t// Otherwise, if a way to get the computed value exists, use that
\t\tif ( val === undefined ) {
\t\t\tval = curCSS( elem, name, styles );
\t\t}

\t\t// Convert "normal" to computed value
\t\tif ( val === "normal" && name in cssNormalTransform ) {
\t\t\tval = cssNormalTransform[ name ];
\t\t}

\t\t// Make numeric if forced or a qualifier was provided and val looks numeric
\t\tif ( extra === "" || extra ) {
\t\t\tnum = parseFloat( val );
\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;
\t\t}

\t\treturn val;
\t}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
\tjQuery.cssHooks[ name ] = {
\t\tget: function( elem, computed, extra ) {
\t\t\tif ( computed ) {

\t\t\t\t// Certain elements can have dimension info if we invisibly show them
\t\t\t\t// but it must have a current display style that would benefit
\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

\t\t\t\t\t// Support: Safari 8+
\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero
\t\t\t\t\t// getBoundingClientRect().width unless display is changed.
\t\t\t\t\t// Support: IE <=11 only
\t\t\t\t\t// Running getBoundingClientRect on a disconnected node
\t\t\t\t\t// in IE throws an error.
\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
\t\t\t\t\t\tswap( elem, cssShow, function() {
\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );
\t\t\t\t\t\t} ) :
\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );
\t\t\t}
\t\t},

\t\tset: function( elem, value, extra ) {
\t\t\tvar matches,
\t\t\t\tstyles = extra && getStyles( elem ),
\t\t\t\tsubtract = extra && augmentWidthOrHeight(
\t\t\t\t\telem,
\t\t\t\t\tname,
\t\t\t\t\textra,
\t\t\t\t\tjQuery.css( elem, "boxSizing", false, styles ) === "border-box",
\t\t\t\t\tstyles
\t\t\t\t);

\t\t\t// Convert to pixels if value adjustment is needed
\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&
\t\t\t\t( matches[ 3 ] || "px" ) !== "px" ) {

\t\t\t\telem.style[ name ] = value;
\t\t\t\tvalue = jQuery.css( elem, name );
\t\t\t}

\t\t\treturn setPositiveNumber( elem, value, subtract );
\t\t}
\t};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
\tfunction( elem, computed ) {
\t\tif ( computed ) {
\t\t\treturn ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
\t\t\t\telem.getBoundingClientRect().left -
\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {
\t\t\t\t\t\treturn elem.getBoundingClientRect().left;
\t\t\t\t\t} )
\t\t\t\t) + "px";
\t\t}
\t}
);

// These hooks are used by animate to expand properties
jQuery.each( {
\tmargin: "",
\tpadding: "",
\tborder: "Width"
}, function( prefix, suffix ) {
\tjQuery.cssHooks[ prefix + suffix ] = {
\t\texpand: function( value ) {
\t\t\tvar i = 0,
\t\t\t\texpanded = {},

\t\t\t\t// Assumes a single number if not a string
\t\t\t\tparts = typeof value === "string" ? value.split( " " ) : [ value ];

\t\t\tfor ( ; i < 4; i++ ) {
\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =
\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];
\t\t\t}

\t\t\treturn expanded;
\t\t}
\t};

\tif ( !rmargin.test( prefix ) ) {
\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
\t}
} );

jQuery.fn.extend( {
\tcss: function( name, value ) {
\t\treturn access( this, function( elem, name, value ) {
\t\t\tvar styles, len,
\t\t\t\tmap = {},
\t\t\t\ti = 0;

\t\t\tif ( Array.isArray( name ) ) {
\t\t\t\tstyles = getStyles( elem );
\t\t\t\tlen = name.length;

\t\t\t\tfor ( ; i < len; i++ ) {
\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
\t\t\t\t}

\t\t\t\treturn map;
\t\t\t}

\t\t\treturn value !== undefined ?
\t\t\t\tjQuery.style( elem, name, value ) :
\t\t\t\tjQuery.css( elem, name );
\t\t}, name, value, arguments.length > 1 );
\t}
} );


function Tween( elem, options, prop, end, easing ) {
\treturn new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
\tconstructor: Tween,
\tinit: function( elem, options, prop, end, easing, unit ) {
\t\tthis.elem = elem;
\t\tthis.prop = prop;
\t\tthis.easing = easing || jQuery.easing._default;
\t\tthis.options = options;
\t\tthis.start = this.now = this.cur();
\t\tthis.end = end;
\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
\t},
\tcur: function() {
\t\tvar hooks = Tween.propHooks[ this.prop ];

\t\treturn hooks && hooks.get ?
\t\t\thooks.get( this ) :
\t\t\tTween.propHooks._default.get( this );
\t},
\trun: function( percent ) {
\t\tvar eased,
\t\t\thooks = Tween.propHooks[ this.prop ];

\t\tif ( this.options.duration ) {
\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](
\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration
\t\t\t);
\t\t} else {
\t\t\tthis.pos = eased = percent;
\t\t}
\t\tthis.now = ( this.end - this.start ) * eased + this.start;

\t\tif ( this.options.step ) {
\t\t\tthis.options.step.call( this.elem, this.now, this );
\t\t}

\t\tif ( hooks && hooks.set ) {
\t\t\thooks.set( this );
\t\t} else {
\t\t\tTween.propHooks._default.set( this );
\t\t}
\t\treturn this;
\t}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
\t_default: {
\t\tget: function( tween ) {
\t\t\tvar result;

\t\t\t// Use a property on the element directly when it is not a DOM element,
\t\t\t// or when there is no matching style property that exists.
\t\t\tif ( tween.elem.nodeType !== 1 ||
\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
\t\t\t\treturn tween.elem[ tween.prop ];
\t\t\t}

\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically
\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.
\t\t\t// Simple values such as "10px" are parsed to Float;
\t\t\t// complex values such as "rotate(1rad)" are returned as-is.
\t\t\tresult = jQuery.css( tween.elem, tween.prop, "" );

\t\t\t// Empty strings, null, undefined and "auto" are converted to 0.
\t\t\treturn !result || result === "auto" ? 0 : result;
\t\t},
\t\tset: function( tween ) {

\t\t\t// Use step hook for back compat.
\t\t\t// Use cssHook if its there.
\t\t\t// Use .style if available and use plain properties where available.
\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {
\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );
\t\t\t} else if ( tween.elem.nodeType === 1 &&
\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {
\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
\t\t\t} else {
\t\t\t\ttween.elem[ tween.prop ] = tween.now;
\t\t\t}
\t\t}
\t}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
\tset: function( tween ) {
\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {
\t\t\ttween.elem[ tween.prop ] = tween.now;
\t\t}
\t}
};

jQuery.easing = {
\tlinear: function( p ) {
\t\treturn p;
\t},
\tswing: function( p ) {
\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;
\t},
\t_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
\tfxNow, inProgress,
\trfxtypes = /^(?:toggle|show|hide)$/,
\trrun = /queueHooks$/;

function schedule() {
\tif ( inProgress ) {
\t\tif ( document.hidden === false && window.requestAnimationFrame ) {
\t\t\twindow.requestAnimationFrame( schedule );
\t\t} else {
\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );
\t\t}

\t\tjQuery.fx.tick();
\t}
}

// Animations created synchronously will run synchronously
function createFxNow() {
\twindow.setTimeout( function() {
\t\tfxNow = undefined;
\t} );
\treturn ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
\tvar which,
\t\ti = 0,
\t\tattrs = { height: type };

\t// If we include width, step value is 1 to do all cssExpand values,
\t// otherwise step value is 2 to skip over Left and Right
\tincludeWidth = includeWidth ? 1 : 0;
\tfor ( ; i < 4; i += 2 - includeWidth ) {
\t\twhich = cssExpand[ i ];
\t\tattrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
\t}

\tif ( includeWidth ) {
\t\tattrs.opacity = attrs.width = type;
\t}

\treturn attrs;
}

function createTween( value, prop, animation ) {
\tvar tween,
\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
\t\tindex = 0,
\t\tlength = collection.length;
\tfor ( ; index < length; index++ ) {
\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

\t\t\t// We're done with this property
\t\t\treturn tween;
\t\t}
\t}
}

function defaultPrefilter( elem, props, opts ) {
\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
\t\tisBox = "width" in props || "height" in props,
\t\tanim = this,
\t\torig = {},
\t\tstyle = elem.style,
\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),
\t\tdataShow = dataPriv.get( elem, "fxshow" );

\t// Queue-skipping animations hijack the fx hooks
\tif ( !opts.queue ) {
\t\thooks = jQuery._queueHooks( elem, "fx" );
\t\tif ( hooks.unqueued == null ) {
\t\t\thooks.unqueued = 0;
\t\t\toldfire = hooks.empty.fire;
\t\t\thooks.empty.fire = function() {
\t\t\t\tif ( !hooks.unqueued ) {
\t\t\t\t\toldfire();
\t\t\t\t}
\t\t\t};
\t\t}
\t\thooks.unqueued++;

\t\tanim.always( function() {

\t\t\t// Ensure the complete handler is called before this completes
\t\t\tanim.always( function() {
\t\t\t\thooks.unqueued--;
\t\t\t\tif ( !jQuery.queue( elem, "fx" ).length ) {
\t\t\t\t\thooks.empty.fire();
\t\t\t\t}
\t\t\t} );
\t\t} );
\t}

\t// Detect show/hide animations
\tfor ( prop in props ) {
\t\tvalue = props[ prop ];
\t\tif ( rfxtypes.test( value ) ) {
\t\t\tdelete props[ prop ];
\t\t\ttoggle = toggle || value === "toggle";
\t\t\tif ( value === ( hidden ? "hide" : "show" ) ) {

\t\t\t\t// Pretend to be hidden if this is a "show" and
\t\t\t\t// there is still data from a stopped show/hide
\t\t\t\tif ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
\t\t\t\t\thidden = true;

\t\t\t\t// Ignore all other no-op show/hide data
\t\t\t\t} else {
\t\t\t\t\tcontinue;
\t\t\t\t}
\t\t\t}
\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
\t\t}
\t}

\t// Bail out if this is a no-op like .hide().hide()
\tpropTween = !jQuery.isEmptyObject( props );
\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {
\t\treturn;
\t}

\t// Restrict "overflow" and "display" styles during box animations
\tif ( isBox && elem.nodeType === 1 ) {

\t\t// Support: IE <=9 - 11, Edge 12 - 13
\t\t// Record all 3 overflow attributes because IE does not infer the shorthand
\t\t// from identically-valued overflowX and overflowY
\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

\t\t// Identify a display type, preferring old show/hide data over the CSS cascade
\t\trestoreDisplay = dataShow && dataShow.display;
\t\tif ( restoreDisplay == null ) {
\t\t\trestoreDisplay = dataPriv.get( elem, "display" );
\t\t}
\t\tdisplay = jQuery.css( elem, "display" );
\t\tif ( display === "none" ) {
\t\t\tif ( restoreDisplay ) {
\t\t\t\tdisplay = restoreDisplay;
\t\t\t} else {

\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility
\t\t\t\tshowHide( [ elem ], true );
\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;
\t\t\t\tdisplay = jQuery.css( elem, "display" );
\t\t\t\tshowHide( [ elem ] );
\t\t\t}
\t\t}

\t\t// Animate inline elements as inline-block
\t\tif ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
\t\t\tif ( jQuery.css( elem, "float" ) === "none" ) {

\t\t\t\t// Restore the original display value at the end of pure show/hide animations
\t\t\t\tif ( !propTween ) {
\t\t\t\t\tanim.done( function() {
\t\t\t\t\t\tstyle.display = restoreDisplay;
\t\t\t\t\t} );
\t\t\t\t\tif ( restoreDisplay == null ) {
\t\t\t\t\t\tdisplay = style.display;
\t\t\t\t\t\trestoreDisplay = display === "none" ? "" : display;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t\tstyle.display = "inline-block";
\t\t\t}
\t\t}
\t}

\tif ( opts.overflow ) {
\t\tstyle.overflow = "hidden";
\t\tanim.always( function() {
\t\t\tstyle.overflow = opts.overflow[ 0 ];
\t\t\tstyle.overflowX = opts.overflow[ 1 ];
\t\t\tstyle.overflowY = opts.overflow[ 2 ];
\t\t} );
\t}

\t// Implement show/hide animations
\tpropTween = false;
\tfor ( prop in orig ) {

\t\t// General show/hide setup for this element animation
\t\tif ( !propTween ) {
\t\t\tif ( dataShow ) {
\t\t\t\tif ( "hidden" in dataShow ) {
\t\t\t\t\thidden = dataShow.hidden;
\t\t\t\t}
\t\t\t} else {
\t\t\t\tdataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
\t\t\t}

\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
\t\t\tif ( toggle ) {
\t\t\t\tdataShow.hidden = !hidden;
\t\t\t}

\t\t\t// Show elements before animating them
\t\t\tif ( hidden ) {
\t\t\t\tshowHide( [ elem ], true );
\t\t\t}

\t\t\t/* eslint-disable no-loop-func */

\t\t\tanim.done( function() {

\t\t\t/* eslint-enable no-loop-func */

\t\t\t\t// The final step of a "hide" animation is actually hiding the element
\t\t\t\tif ( !hidden ) {
\t\t\t\t\tshowHide( [ elem ] );
\t\t\t\t}
\t\t\t\tdataPriv.remove( elem, "fxshow" );
\t\t\t\tfor ( prop in orig ) {
\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );
\t\t\t\t}
\t\t\t} );
\t\t}

\t\t// Per-property setup
\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
\t\tif ( !( prop in dataShow ) ) {
\t\t\tdataShow[ prop ] = propTween.start;
\t\t\tif ( hidden ) {
\t\t\t\tpropTween.end = propTween.start;
\t\t\t\tpropTween.start = 0;
\t\t\t}
\t\t}
\t}
}

function propFilter( props, specialEasing ) {
\tvar index, name, easing, value, hooks;

\t// camelCase, specialEasing and expand cssHook pass
\tfor ( index in props ) {
\t\tname = jQuery.camelCase( index );
\t\teasing = specialEasing[ name ];
\t\tvalue = props[ index ];
\t\tif ( Array.isArray( value ) ) {
\t\t\teasing = value[ 1 ];
\t\t\tvalue = props[ index ] = value[ 0 ];
\t\t}

\t\tif ( index !== name ) {
\t\t\tprops[ name ] = value;
\t\t\tdelete props[ index ];
\t\t}

\t\thooks = jQuery.cssHooks[ name ];
\t\tif ( hooks && "expand" in hooks ) {
\t\t\tvalue = hooks.expand( value );
\t\t\tdelete props[ name ];

\t\t\t// Not quite $.extend, this won't overwrite existing keys.
\t\t\t// Reusing \'index\' because we have the correct "name"
\t\t\tfor ( index in value ) {
\t\t\t\tif ( !( index in props ) ) {
\t\t\t\t\tprops[ index ] = value[ index ];
\t\t\t\t\tspecialEasing[ index ] = easing;
\t\t\t\t}
\t\t\t}
\t\t} else {
\t\t\tspecialEasing[ name ] = easing;
\t\t}
\t}
}

function Animation( elem, properties, options ) {
\tvar result,
\t\tstopped,
\t\tindex = 0,
\t\tlength = Animation.prefilters.length,
\t\tdeferred = jQuery.Deferred().always( function() {

\t\t\t// Don't match elem in the :animated selector
\t\t\tdelete tick.elem;
\t\t} ),
\t\ttick = function() {
\t\t\tif ( stopped ) {
\t\t\t\treturn false;
\t\t\t}
\t\t\tvar currentTime = fxNow || createFxNow(),
\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

\t\t\t\t// Support: Android 2.3 only
\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
\t\t\t\ttemp = remaining / animation.duration || 0,
\t\t\t\tpercent = 1 - temp,
\t\t\t\tindex = 0,
\t\t\t\tlength = animation.tweens.length;

\t\t\tfor ( ; index < length; index++ ) {
\t\t\t\tanimation.tweens[ index ].run( percent );
\t\t\t}

\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );

\t\t\t// If there's more to do, yield
\t\t\tif ( percent < 1 && length ) {
\t\t\t\treturn remaining;
\t\t\t}

\t\t\t// If this was an empty animation, synthesize a final progress notification
\t\t\tif ( !length ) {
\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );
\t\t\t}

\t\t\t// Resolve the animation and report its conclusion
\t\t\tdeferred.resolveWith( elem, [ animation ] );
\t\t\treturn false;
\t\t},
\t\tanimation = deferred.promise( {
\t\t\telem: elem,
\t\t\tprops: jQuery.extend( {}, properties ),
\t\t\topts: jQuery.extend( true, {
\t\t\t\tspecialEasing: {},
\t\t\t\teasing: jQuery.easing._default
\t\t\t}, options ),
\t\t\toriginalProperties: properties,
\t\t\toriginalOptions: options,
\t\t\tstartTime: fxNow || createFxNow(),
\t\t\tduration: options.duration,
\t\t\ttweens: [],
\t\t\tcreateTween: function( prop, end ) {
\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,
\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );
\t\t\t\tanimation.tweens.push( tween );
\t\t\t\treturn tween;
\t\t\t},
\t\t\tstop: function( gotoEnd ) {
\t\t\t\tvar index = 0,

\t\t\t\t\t// If we are going to the end, we want to run all the tweens
\t\t\t\t\t// otherwise we skip this part
\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;
\t\t\t\tif ( stopped ) {
\t\t\t\t\treturn this;
\t\t\t\t}
\t\t\t\tstopped = true;
\t\t\t\tfor ( ; index < length; index++ ) {
\t\t\t\t\tanimation.tweens[ index ].run( 1 );
\t\t\t\t}

\t\t\t\t// Resolve when we played the last frame; otherwise, reject
\t\t\t\tif ( gotoEnd ) {
\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );
\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );
\t\t\t\t} else {
\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );
\t\t\t\t}
\t\t\t\treturn this;
\t\t\t}
\t\t} ),
\t\tprops = animation.props;

\tpropFilter( props, animation.opts.specialEasing );

\tfor ( ; index < length; index++ ) {
\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
\t\tif ( result ) {
\t\t\tif ( jQuery.isFunction( result.stop ) ) {
\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
\t\t\t\t\tjQuery.proxy( result.stop, result );
\t\t\t}
\t\t\treturn result;
\t\t}
\t}

\tjQuery.map( props, createTween, animation );

\tif ( jQuery.isFunction( animation.opts.start ) ) {
\t\tanimation.opts.start.call( elem, animation );
\t}

\t// Attach callbacks from options
\tanimation
\t\t.progress( animation.opts.progress )
\t\t.done( animation.opts.done, animation.opts.complete )
\t\t.fail( animation.opts.fail )
\t\t.always( animation.opts.always );

\tjQuery.fx.timer(
\t\tjQuery.extend( tick, {
\t\t\telem: elem,
\t\t\tanim: animation,
\t\t\tqueue: animation.opts.queue
\t\t} )
\t);

\treturn animation;
}

jQuery.Animation = jQuery.extend( Animation, {

\ttweeners: {
\t\t"*": [ function( prop, value ) {
\t\t\tvar tween = this.createTween( prop, value );
\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
\t\t\treturn tween;
\t\t} ]
\t},

\ttweener: function( props, callback ) {
\t\tif ( jQuery.isFunction( props ) ) {
\t\t\tcallback = props;
\t\t\tprops = [ "*" ];
\t\t} else {
\t\t\tprops = props.match( rnothtmlwhite );
\t\t}

\t\tvar prop,
\t\t\tindex = 0,
\t\t\tlength = props.length;

\t\tfor ( ; index < length; index++ ) {
\t\t\tprop = props[ index ];
\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
\t\t\tAnimation.tweeners[ prop ].unshift( callback );
\t\t}
\t},

\tprefilters: [ defaultPrefilter ],

\tprefilter: function( callback, prepend ) {
\t\tif ( prepend ) {
\t\t\tAnimation.prefilters.unshift( callback );
\t\t} else {
\t\t\tAnimation.prefilters.push( callback );
\t\t}
\t}
} );

jQuery.speed = function( speed, easing, fn ) {
\tvar opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
\t\tcomplete: fn || !fn && easing ||
\t\t\tjQuery.isFunction( speed ) && speed,
\t\tduration: speed,
\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
\t};

\t// Go to the end state if fx are off
\tif ( jQuery.fx.off ) {
\t\topt.duration = 0;

\t} else {
\t\tif ( typeof opt.duration !== "number" ) {
\t\t\tif ( opt.duration in jQuery.fx.speeds ) {
\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];

\t\t\t} else {
\t\t\t\topt.duration = jQuery.fx.speeds._default;
\t\t\t}
\t\t}
\t}

\t// Normalize opt.queue - true/undefined/null -> "fx"
\tif ( opt.queue == null || opt.queue === true ) {
\t\topt.queue = "fx";
\t}

\t// Queueing
\topt.old = opt.complete;

\topt.complete = function() {
\t\tif ( jQuery.isFunction( opt.old ) ) {
\t\t\topt.old.call( this );
\t\t}

\t\tif ( opt.queue ) {
\t\t\tjQuery.dequeue( this, opt.queue );
\t\t}
\t};

\treturn opt;
};

jQuery.fn.extend( {
\tfadeTo: function( speed, to, easing, callback ) {

\t\t// Show any hidden elements after setting opacity to 0
\t\treturn this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

\t\t\t// Animate to the value specified
\t\t\t.end().animate( { opacity: to }, speed, easing, callback );
\t},
\tanimate: function( prop, speed, easing, callback ) {
\t\tvar empty = jQuery.isEmptyObject( prop ),
\t\t\toptall = jQuery.speed( speed, easing, callback ),
\t\t\tdoAnimation = function() {

\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost
\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );

\t\t\t\t// Empty animations, or finishing resolves immediately
\t\t\t\tif ( empty || dataPriv.get( this, "finish" ) ) {
\t\t\t\t\tanim.stop( true );
\t\t\t\t}
\t\t\t};
\t\t\tdoAnimation.finish = doAnimation;

\t\treturn empty || optall.queue === false ?
\t\t\tthis.each( doAnimation ) :
\t\t\tthis.queue( optall.queue, doAnimation );
\t},
\tstop: function( type, clearQueue, gotoEnd ) {
\t\tvar stopQueue = function( hooks ) {
\t\t\tvar stop = hooks.stop;
\t\t\tdelete hooks.stop;
\t\t\tstop( gotoEnd );
\t\t};

\t\tif ( typeof type !== "string" ) {
\t\t\tgotoEnd = clearQueue;
\t\t\tclearQueue = type;
\t\t\ttype = undefined;
\t\t}
\t\tif ( clearQueue && type !== false ) {
\t\t\tthis.queue( type || "fx", [] );
\t\t}

\t\treturn this.each( function() {
\t\t\tvar dequeue = true,
\t\t\t\tindex = type != null && type + "queueHooks",
\t\t\t\ttimers = jQuery.timers,
\t\t\t\tdata = dataPriv.get( this );

\t\t\tif ( index ) {
\t\t\t\tif ( data[ index ] && data[ index ].stop ) {
\t\t\t\t\tstopQueue( data[ index ] );
\t\t\t\t}
\t\t\t} else {
\t\t\t\tfor ( index in data ) {
\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
\t\t\t\t\t\tstopQueue( data[ index ] );
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}

\t\t\tfor ( index = timers.length; index--; ) {
\t\t\t\tif ( timers[ index ].elem === this &&
\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {

\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );
\t\t\t\t\tdequeue = false;
\t\t\t\t\ttimers.splice( index, 1 );
\t\t\t\t}
\t\t\t}

\t\t\t// Start the next in the queue if the last step wasn't forced.
\t\t\t// Timers currently will call their complete callbacks, which
\t\t\t// will dequeue but only if they were gotoEnd.
\t\t\tif ( dequeue || !gotoEnd ) {
\t\t\t\tjQuery.dequeue( this, type );
\t\t\t}
\t\t} );
\t},
\tfinish: function( type ) {
\t\tif ( type !== false ) {
\t\t\ttype = type || "fx";
\t\t}
\t\treturn this.each( function() {
\t\t\tvar index,
\t\t\t\tdata = dataPriv.get( this ),
\t\t\t\tqueue = data[ type + "queue" ],
\t\t\t\thooks = data[ type + "queueHooks" ],
\t\t\t\ttimers = jQuery.timers,
\t\t\t\tlength = queue ? queue.length : 0;

\t\t\t// Enable finishing flag on private data
\t\t\tdata.finish = true;

\t\t\t// Empty the queue first
\t\t\tjQuery.queue( this, type, [] );

\t\t\tif ( hooks && hooks.stop ) {
\t\t\t\thooks.stop.call( this, true );
\t\t\t}

\t\t\t// Look for any active animations, and finish them
\t\t\tfor ( index = timers.length; index--; ) {
\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {
\t\t\t\t\ttimers[ index ].anim.stop( true );
\t\t\t\t\ttimers.splice( index, 1 );
\t\t\t\t}
\t\t\t}

\t\t\t// Look for any animations in the old queue and finish them
\t\t\tfor ( index = 0; index < length; index++ ) {
\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {
\t\t\t\t\tqueue[ index ].finish.call( this );
\t\t\t\t}
\t\t\t}

\t\t\t// Turn off finishing flag
\t\t\tdelete data.finish;
\t\t} );
\t}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
\tvar cssFn = jQuery.fn[ name ];
\tjQuery.fn[ name ] = function( speed, easing, callback ) {
\t\treturn speed == null || typeof speed === "boolean" ?
\t\t\tcssFn.apply( this, arguments ) :
\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );
\t};
} );

// Generate shortcuts for custom animations
jQuery.each( {
\tslideDown: genFx( "show" ),
\tslideUp: genFx( "hide" ),
\tslideToggle: genFx( "toggle" ),
\tfadeIn: { opacity: "show" },
\tfadeOut: { opacity: "hide" },
\tfadeToggle: { opacity: "toggle" }
}, function( name, props ) {
\tjQuery.fn[ name ] = function( speed, easing, callback ) {
\t\treturn this.animate( props, speed, easing, callback );
\t};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
\tvar timer,
\t\ti = 0,
\t\ttimers = jQuery.timers;

\tfxNow = jQuery.now();

\tfor ( ; i < timers.length; i++ ) {
\t\ttimer = timers[ i ];

\t\t// Run the timer and safely remove it when done (allowing for external removal)
\t\tif ( !timer() && timers[ i ] === timer ) {
\t\t\ttimers.splice( i--, 1 );
\t\t}
\t}

\tif ( !timers.length ) {
\t\tjQuery.fx.stop();
\t}
\tfxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
\tjQuery.timers.push( timer );
\tjQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
\tif ( inProgress ) {
\t\treturn;
\t}

\tinProgress = true;
\tschedule();
};

jQuery.fx.stop = function() {
\tinProgress = null;
};

jQuery.fx.speeds = {
\tslow: 600,
\tfast: 200,

\t// Default speed
\t_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
\ttype = type || "fx";

\treturn this.queue( type, function( next, hooks ) {
\t\tvar timeout = window.setTimeout( next, time );
\t\thooks.stop = function() {
\t\t\twindow.clearTimeout( timeout );
\t\t};
\t} );
};


( function() {
\tvar input = document.createElement( "input" ),
\t\tselect = document.createElement( "select" ),
\t\topt = select.appendChild( document.createElement( "option" ) );

\tinput.type = "checkbox";

\t// Support: Android <=4.3 only
\t// Default value for a checkbox should be "on"
\tsupport.checkOn = input.value !== "";

\t// Support: IE <=11 only
\t// Must access selectedIndex to make default options select
\tsupport.optSelected = opt.selected;

\t// Support: IE <=11 only
\t// An input loses its value after becoming a radio
\tinput = document.createElement( "input" );
\tinput.value = "t";
\tinput.type = "radio";
\tsupport.radioValue = input.value === "t";
} )();


var boolHook,
\tattrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
\tattr: function( name, value ) {
\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );
\t},

\tremoveAttr: function( name ) {
\t\treturn this.each( function() {
\t\t\tjQuery.removeAttr( this, name );
\t\t} );
\t}
} );

jQuery.extend( {
\tattr: function( elem, name, value ) {
\t\tvar ret, hooks,
\t\t\tnType = elem.nodeType;

\t\t// Don't get/set attributes on text, comment and attribute nodes
\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {
\t\t\treturn;
\t\t}

\t\t// Fallback to prop when attributes are not supported
\t\tif ( typeof elem.getAttribute === "undefined" ) {
\t\t\treturn jQuery.prop( elem, name, value );
\t\t}

\t\t// Attribute hooks are determined by the lowercase version
\t\t// Grab necessary hook if one is defined
\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||
\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
\t\t}

\t\tif ( value !== undefined ) {
\t\t\tif ( value === null ) {
\t\t\t\tjQuery.removeAttr( elem, name );
\t\t\t\treturn;
\t\t\t}

\t\t\tif ( hooks && "set" in hooks &&
\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {
\t\t\t\treturn ret;
\t\t\t}

\t\t\telem.setAttribute( name, value + "" );
\t\t\treturn value;
\t\t}

\t\tif ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
\t\t\treturn ret;
\t\t}

\t\tret = jQuery.find.attr( elem, name );

\t\t// Non-existent attributes return null, we normalize to undefined
\t\treturn ret == null ? undefined : ret;
\t},

\tattrHooks: {
\t\ttype: {
\t\t\tset: function( elem, value ) {
\t\t\t\tif ( !support.radioValue && value === "radio" &&
\t\t\t\t\tnodeName( elem, "input" ) ) {
\t\t\t\t\tvar val = elem.value;
\t\t\t\t\telem.setAttribute( "type", value );
\t\t\t\t\tif ( val ) {
\t\t\t\t\t\telem.value = val;
\t\t\t\t\t}
\t\t\t\t\treturn value;
\t\t\t\t}
\t\t\t}
\t\t}
\t},

\tremoveAttr: function( elem, value ) {
\t\tvar name,
\t\t\ti = 0,

\t\t\t// Attribute names can contain non-HTML whitespace characters
\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
\t\t\tattrNames = value && value.match( rnothtmlwhite );

\t\tif ( attrNames && elem.nodeType === 1 ) {
\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {
\t\t\t\telem.removeAttribute( name );
\t\t\t}
\t\t}
\t}
} );

// Hooks for boolean attributes
boolHook = {
\tset: function( elem, value, name ) {
\t\tif ( value === false ) {

\t\t\t// Remove boolean attributes when set to false
\t\t\tjQuery.removeAttr( elem, name );
\t\t} else {
\t\t\telem.setAttribute( name, name );
\t\t}
\t\treturn name;
\t}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {
\tvar getter = attrHandle[ name ] || jQuery.find.attr;

\tattrHandle[ name ] = function( elem, name, isXML ) {
\t\tvar ret, handle,
\t\t\tlowercaseName = name.toLowerCase();

\t\tif ( !isXML ) {

\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter
\t\t\thandle = attrHandle[ lowercaseName ];
\t\t\tattrHandle[ lowercaseName ] = ret;
\t\t\tret = getter( elem, name, isXML ) != null ?
\t\t\t\tlowercaseName :
\t\t\t\tnull;
\t\t\tattrHandle[ lowercaseName ] = handle;
\t\t}
\t\treturn ret;
\t};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
\trclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
\tprop: function( name, value ) {
\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );
\t},

\tremoveProp: function( name ) {
\t\treturn this.each( function() {
\t\t\tdelete this[ jQuery.propFix[ name ] || name ];
\t\t} );
\t}
} );

jQuery.extend( {
\tprop: function( elem, name, value ) {
\t\tvar ret, hooks,
\t\t\tnType = elem.nodeType;

\t\t// Don't get/set properties on text, comment and attribute nodes
\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {
\t\t\treturn;
\t\t}

\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

\t\t\t// Fix name and attach hooks
\t\t\tname = jQuery.propFix[ name ] || name;
\t\t\thooks = jQuery.propHooks[ name ];
\t\t}

\t\tif ( value !== undefined ) {
\t\t\tif ( hooks && "set" in hooks &&
\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {
\t\t\t\treturn ret;
\t\t\t}

\t\t\treturn ( elem[ name ] = value );
\t\t}

\t\tif ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
\t\t\treturn ret;
\t\t}

\t\treturn elem[ name ];
\t},

\tpropHooks: {
\t\ttabIndex: {
\t\t\tget: function( elem ) {

\t\t\t\t// Support: IE <=9 - 11 only
\t\t\t\t// elem.tabIndex doesn't always return the
\t\t\t\t// correct value when it hasn't been explicitly set
\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
\t\t\t\t// Use proper attribute retrieval(#12072)
\t\t\t\tvar tabindex = jQuery.find.attr( elem, "tabindex" );

\t\t\t\tif ( tabindex ) {
\t\t\t\t\treturn parseInt( tabindex, 10 );
\t\t\t\t}

\t\t\t\tif (
\t\t\t\t\trfocusable.test( elem.nodeName ) ||
\t\t\t\t\trclickable.test( elem.nodeName ) &&
\t\t\t\t\telem.href
\t\t\t\t) {
\t\t\t\t\treturn 0;
\t\t\t\t}

\t\t\t\treturn -1;
\t\t\t}
\t\t}
\t},

\tpropFix: {
\t\t"for": "htmlFor",
\t\t"class": "className"
\t}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
\tjQuery.propHooks.selected = {
\t\tget: function( elem ) {

\t\t\t/* eslint no-unused-expressions: "off" */

\t\t\tvar parent = elem.parentNode;
\t\t\tif ( parent && parent.parentNode ) {
\t\t\t\tparent.parentNode.selectedIndex;
\t\t\t}
\t\t\treturn null;
\t\t},
\t\tset: function( elem ) {

\t\t\t/* eslint no-unused-expressions: "off" */

\t\t\tvar parent = elem.parentNode;
\t\t\tif ( parent ) {
\t\t\t\tparent.selectedIndex;

\t\t\t\tif ( parent.parentNode ) {
\t\t\t\t\tparent.parentNode.selectedIndex;
\t\t\t\t}
\t\t\t}
\t\t}
\t};
}

jQuery.each( [
\t"tabIndex",
\t"readOnly",
\t"maxLength",
\t"cellSpacing",
\t"cellPadding",
\t"rowSpan",
\t"colSpan",
\t"useMap",
\t"frameBorder",
\t"contentEditable"
], function() {
\tjQuery.propFix[ this.toLowerCase() ] = this;
} );




\t// Strip and collapse whitespace according to HTML spec
\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
\tfunction stripAndCollapse( value ) {
\t\tvar tokens = value.match( rnothtmlwhite ) || [];
\t\treturn tokens.join( " " );
\t}


function getClass( elem ) {
\treturn elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
\taddClass: function( value ) {
\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,
\t\t\ti = 0;

\t\tif ( jQuery.isFunction( value ) ) {
\t\t\treturn this.each( function( j ) {
\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
\t\t\t} );
\t\t}

\t\tif ( typeof value === "string" && value ) {
\t\t\tclasses = value.match( rnothtmlwhite ) || [];

\t\t\twhile ( ( elem = this[ i++ ] ) ) {
\t\t\t\tcurValue = getClass( elem );
\t\t\t\tcur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

\t\t\t\tif ( cur ) {
\t\t\t\t\tj = 0;
\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {
\t\t\t\t\t\tif ( cur.indexOf( " " + clazz + " " ) < 0 ) {
\t\t\t\t\t\t\tcur += clazz + " ";
\t\t\t\t\t\t}
\t\t\t\t\t}

\t\t\t\t\t// Only assign if different to avoid unneeded rendering.
\t\t\t\t\tfinalValue = stripAndCollapse( cur );
\t\t\t\t\tif ( curValue !== finalValue ) {
\t\t\t\t\t\telem.setAttribute( "class", finalValue );
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}

\t\treturn this;
\t},

\tremoveClass: function( value ) {
\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,
\t\t\ti = 0;

\t\tif ( jQuery.isFunction( value ) ) {
\t\t\treturn this.each( function( j ) {
\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
\t\t\t} );
\t\t}

\t\tif ( !arguments.length ) {
\t\t\treturn this.attr( "class", "" );
\t\t}

\t\tif ( typeof value === "string" && value ) {
\t\t\tclasses = value.match( rnothtmlwhite ) || [];

\t\t\twhile ( ( elem = this[ i++ ] ) ) {
\t\t\t\tcurValue = getClass( elem );

\t\t\t\t// This expression is here for better compressibility (see addClass)
\t\t\t\tcur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

\t\t\t\tif ( cur ) {
\t\t\t\t\tj = 0;
\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {

\t\t\t\t\t\t// Remove *all* instances
\t\t\t\t\t\twhile ( cur.indexOf( " " + clazz + " " ) > -1 ) {
\t\t\t\t\t\t\tcur = cur.replace( " " + clazz + " ", " " );
\t\t\t\t\t\t}
\t\t\t\t\t}

\t\t\t\t\t// Only assign if different to avoid unneeded rendering.
\t\t\t\t\tfinalValue = stripAndCollapse( cur );
\t\t\t\t\tif ( curValue !== finalValue ) {
\t\t\t\t\t\telem.setAttribute( "class", finalValue );
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}

\t\treturn this;
\t},

\ttoggleClass: function( value, stateVal ) {
\t\tvar type = typeof value;

\t\tif ( typeof stateVal === "boolean" && type === "string" ) {
\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );
\t\t}

\t\tif ( jQuery.isFunction( value ) ) {
\t\t\treturn this.each( function( i ) {
\t\t\t\tjQuery( this ).toggleClass(
\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),
\t\t\t\t\tstateVal
\t\t\t\t);
\t\t\t} );
\t\t}

\t\treturn this.each( function() {
\t\t\tvar className, i, self, classNames;

\t\t\tif ( type === "string" ) {

\t\t\t\t// Toggle individual class names
\t\t\t\ti = 0;
\t\t\t\tself = jQuery( this );
\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];

\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {

\t\t\t\t\t// Check each className given, space separated list
\t\t\t\t\tif ( self.hasClass( className ) ) {
\t\t\t\t\t\tself.removeClass( className );
\t\t\t\t\t} else {
\t\t\t\t\t\tself.addClass( className );
\t\t\t\t\t}
\t\t\t\t}

\t\t\t// Toggle whole class name
\t\t\t} else if ( value === undefined || type === "boolean" ) {
\t\t\t\tclassName = getClass( this );
\t\t\t\tif ( className ) {

\t\t\t\t\t// Store className if set
\t\t\t\t\tdataPriv.set( this, "__className__", className );
\t\t\t\t}

\t\t\t\t// If the element has a class name or if we're passed `false`,
\t\t\t\t// then remove the whole classname (if there was one, the above saved it).
\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),
\t\t\t\t// falling back to the empty string if nothing was stored.
\t\t\t\tif ( this.setAttribute ) {
\t\t\t\t\tthis.setAttribute( "class",
\t\t\t\t\t\tclassName || value === false ?
\t\t\t\t\t\t"" :
\t\t\t\t\t\tdataPriv.get( this, "__className__" ) || ""
\t\t\t\t\t);
\t\t\t\t}
\t\t\t}
\t\t} );
\t},

\thasClass: function( selector ) {
\t\tvar className, elem,
\t\t\ti = 0;

\t\tclassName = " " + selector + " ";
\t\twhile ( ( elem = this[ i++ ] ) ) {
\t\t\tif ( elem.nodeType === 1 &&
\t\t\t\t( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
\t\t\t\t\treturn true;
\t\t\t}
\t\t}

\t\treturn false;
\t}
} );




var rreturn = /\\r/g;

jQuery.fn.extend( {
\tval: function( value ) {
\t\tvar hooks, ret, isFunction,
\t\t\telem = this[ 0 ];

\t\tif ( !arguments.length ) {
\t\t\tif ( elem ) {
\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||
\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];

\t\t\t\tif ( hooks &&
\t\t\t\t\t"get" in hooks &&
\t\t\t\t\t( ret = hooks.get( elem, "value" ) ) !== undefined
\t\t\t\t) {
\t\t\t\t\treturn ret;
\t\t\t\t}

\t\t\t\tret = elem.value;

\t\t\t\t// Handle most common string cases
\t\t\t\tif ( typeof ret === "string" ) {
\t\t\t\t\treturn ret.replace( rreturn, "" );
\t\t\t\t}

\t\t\t\t// Handle cases where value is null/undef or number
\t\t\t\treturn ret == null ? "" : ret;
\t\t\t}

\t\t\treturn;
\t\t}

\t\tisFunction = jQuery.isFunction( value );

\t\treturn this.each( function( i ) {
\t\t\tvar val;

\t\t\tif ( this.nodeType !== 1 ) {
\t\t\t\treturn;
\t\t\t}

\t\t\tif ( isFunction ) {
\t\t\t\tval = value.call( this, i, jQuery( this ).val() );
\t\t\t} else {
\t\t\t\tval = value;
\t\t\t}

\t\t\t// Treat null/undefined as ""; convert numbers to string
\t\t\tif ( val == null ) {
\t\t\t\tval = "";

\t\t\t} else if ( typeof val === "number" ) {
\t\t\t\tval += "";

\t\t\t} else if ( Array.isArray( val ) ) {
\t\t\t\tval = jQuery.map( val, function( value ) {
\t\t\t\t\treturn value == null ? "" : value + "";
\t\t\t\t} );
\t\t\t}

\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

\t\t\t// If set returns undefined, fall back to normal setting
\t\t\tif ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
\t\t\t\tthis.value = val;
\t\t\t}
\t\t} );
\t}
} );

jQuery.extend( {
\tvalHooks: {
\t\toption: {
\t\t\tget: function( elem ) {

\t\t\t\tvar val = jQuery.find.attr( elem, "value" );
\t\t\t\treturn val != null ?
\t\t\t\t\tval :

\t\t\t\t\t// Support: IE <=10 - 11 only
\t\t\t\t\t// option.text throws exceptions (#14686, #14858)
\t\t\t\t\t// Strip and collapse whitespace
\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );
\t\t\t}
\t\t},
\t\tselect: {
\t\t\tget: function( elem ) {
\t\t\t\tvar value, option, i,
\t\t\t\t\toptions = elem.options,
\t\t\t\t\tindex = elem.selectedIndex,
\t\t\t\t\tone = elem.type === "select-one",
\t\t\t\t\tvalues = one ? null : [],
\t\t\t\t\tmax = one ? index + 1 : options.length;

\t\t\t\tif ( index < 0 ) {
\t\t\t\t\ti = max;

\t\t\t\t} else {
\t\t\t\t\ti = one ? index : 0;
\t\t\t\t}

\t\t\t\t// Loop through all the selected options
\t\t\t\tfor ( ; i < max; i++ ) {
\t\t\t\t\toption = options[ i ];

\t\t\t\t\t// Support: IE <=9 only
\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)
\t\t\t\t\tif ( ( option.selected || i === index ) &&

\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup
\t\t\t\t\t\t\t!option.disabled &&
\t\t\t\t\t\t\t( !option.parentNode.disabled ||
\t\t\t\t\t\t\t\t!nodeName( option.parentNode, "optgroup" ) ) ) {

\t\t\t\t\t\t// Get the specific value for the option
\t\t\t\t\t\tvalue = jQuery( option ).val();

\t\t\t\t\t\t// We don't need an array for one selects
\t\t\t\t\t\tif ( one ) {
\t\t\t\t\t\t\treturn value;
\t\t\t\t\t\t}

\t\t\t\t\t\t// Multi-Selects return an array
\t\t\t\t\t\tvalues.push( value );
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\treturn values;
\t\t\t},

\t\t\tset: function( elem, value ) {
\t\t\t\tvar optionSet, option,
\t\t\t\t\toptions = elem.options,
\t\t\t\t\tvalues = jQuery.makeArray( value ),
\t\t\t\t\ti = options.length;

\t\t\t\twhile ( i-- ) {
\t\t\t\t\toption = options[ i ];

\t\t\t\t\t/* eslint-disable no-cond-assign */

\t\t\t\t\tif ( option.selected =
\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
\t\t\t\t\t) {
\t\t\t\t\t\toptionSet = true;
\t\t\t\t\t}

\t\t\t\t\t/* eslint-enable no-cond-assign */
\t\t\t\t}

\t\t\t\t// Force browsers to behave consistently when non-matching value is set
\t\t\t\tif ( !optionSet ) {
\t\t\t\t\telem.selectedIndex = -1;
\t\t\t\t}
\t\t\t\treturn values;
\t\t\t}
\t\t}
\t}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
\tjQuery.valHooks[ this ] = {
\t\tset: function( elem, value ) {
\t\t\tif ( Array.isArray( value ) ) {
\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
\t\t\t}
\t\t}
\t};
\tif ( !support.checkOn ) {
\t\tjQuery.valHooks[ this ].get = function( elem ) {
\t\t\treturn elem.getAttribute( "value" ) === null ? "on" : elem.value;
\t\t};
\t}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

\ttrigger: function( event, data, elem, onlyHandlers ) {

\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,
\t\t\teventPath = [ elem || document ],
\t\t\ttype = hasOwn.call( event, "type" ) ? event.type : event,
\t\t\tnamespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

\t\tcur = tmp = elem = elem || document;

\t\t// Don't do events on text and comment nodes
\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {
\t\t\treturn;
\t\t}

\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now
\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
\t\t\treturn;
\t\t}

\t\tif ( type.indexOf( "." ) > -1 ) {

\t\t\t// Namespaced trigger; create a regexp to match event type in handle()
\t\t\tnamespaces = type.split( "." );
\t\t\ttype = namespaces.shift();
\t\t\tnamespaces.sort();
\t\t}
\t\tontype = type.indexOf( ":" ) < 0 && "on" + type;

\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string
\t\tevent = event[ jQuery.expando ] ?
\t\t\tevent :
\t\t\tnew jQuery.Event( type, typeof event === "object" && event );

\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
\t\tevent.isTrigger = onlyHandlers ? 2 : 3;
\t\tevent.namespace = namespaces.join( "." );
\t\tevent.rnamespace = event.namespace ?
\t\t\tnew RegExp( "(^|\\\\.)" + namespaces.join( "\\\\.(?:.*\\\\.|)" ) + "(\\\\.|$)" ) :
\t\t\tnull;

\t\t// Clean up the event in case it is being reused
\t\tevent.result = undefined;
\t\tif ( !event.target ) {
\t\t\tevent.target = elem;
\t\t}

\t\t// Clone any incoming data and prepend the event, creating the handler arg list
\t\tdata = data == null ?
\t\t\t[ event ] :
\t\t\tjQuery.makeArray( data, [ event ] );

\t\t// Allow special events to draw outside the lines
\t\tspecial = jQuery.event.special[ type ] || {};
\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
\t\t\treturn;
\t\t}

\t\t// Determine event propagation path in advance, per W3C events spec (#9951)
\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

\t\t\tbubbleType = special.delegateType || type;
\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {
\t\t\t\tcur = cur.parentNode;
\t\t\t}
\t\t\tfor ( ; cur; cur = cur.parentNode ) {
\t\t\t\teventPath.push( cur );
\t\t\t\ttmp = cur;
\t\t\t}

\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)
\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {
\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );
\t\t\t}
\t\t}

\t\t// Fire handlers on the event path
\t\ti = 0;
\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

\t\t\tevent.type = i > 1 ?
\t\t\t\tbubbleType :
\t\t\t\tspecial.bindType || type;

\t\t\t// jQuery handler
\t\t\thandle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
\t\t\t\tdataPriv.get( cur, "handle" );
\t\t\tif ( handle ) {
\t\t\t\thandle.apply( cur, data );
\t\t\t}

\t\t\t// Native handler
\t\t\thandle = ontype && cur[ ontype ];
\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {
\t\t\t\tevent.result = handle.apply( cur, data );
\t\t\t\tif ( event.result === false ) {
\t\t\t\t\tevent.preventDefault();
\t\t\t\t}
\t\t\t}
\t\t}
\t\tevent.type = type;

\t\t// If nobody prevented the default action, do it now
\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {

\t\t\tif ( ( !special._default ||
\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&
\t\t\t\tacceptData( elem ) ) {

\t\t\t\t// Call a native DOM method on the target with the same name as the event.
\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)
\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method
\t\t\t\t\ttmp = elem[ ontype ];

\t\t\t\t\tif ( tmp ) {
\t\t\t\t\t\telem[ ontype ] = null;
\t\t\t\t\t}

\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above
\t\t\t\t\tjQuery.event.triggered = type;
\t\t\t\t\telem[ type ]();
\t\t\t\t\tjQuery.event.triggered = undefined;

\t\t\t\t\tif ( tmp ) {
\t\t\t\t\t\telem[ ontype ] = tmp;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}

\t\treturn event.result;
\t},

\t// Piggyback on a donor event to simulate a different one
\t// Used only for `focus(in | out)` events
\tsimulate: function( type, elem, event ) {
\t\tvar e = jQuery.extend(
\t\t\tnew jQuery.Event(),
\t\t\tevent,
\t\t\t{
\t\t\t\ttype: type,
\t\t\t\tisSimulated: true
\t\t\t}
\t\t);

\t\tjQuery.event.trigger( e, null, elem );
\t}

} );

jQuery.fn.extend( {

\ttrigger: function( type, data ) {
\t\treturn this.each( function() {
\t\t\tjQuery.event.trigger( type, data, this );
\t\t} );
\t},
\ttriggerHandler: function( type, data ) {
\t\tvar elem = this[ 0 ];
\t\tif ( elem ) {
\t\t\treturn jQuery.event.trigger( type, data, elem, true );
\t\t}
\t}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
\t"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
\t"change select submit keydown keypress keyup contextmenu" ).split( " " ),
\tfunction( i, name ) {

\t// Handle event binding
\tjQuery.fn[ name ] = function( data, fn ) {
\t\treturn arguments.length > 0 ?
\t\t\tthis.on( name, null, data, fn ) :
\t\t\tthis.trigger( name );
\t};
} );

jQuery.fn.extend( {
\thover: function( fnOver, fnOut ) {
\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
\t}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
\tjQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout
\t\tvar handler = function( event ) {
\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
\t\t};

\t\tjQuery.event.special[ fix ] = {
\t\t\tsetup: function() {
\t\t\t\tvar doc = this.ownerDocument || this,
\t\t\t\t\tattaches = dataPriv.access( doc, fix );

\t\t\t\tif ( !attaches ) {
\t\t\t\t\tdoc.addEventListener( orig, handler, true );
\t\t\t\t}
\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
\t\t\t},
\t\t\tteardown: function() {
\t\t\t\tvar doc = this.ownerDocument || this,
\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;

\t\t\t\tif ( !attaches ) {
\t\t\t\t\tdoc.removeEventListener( orig, handler, true );
\t\t\t\t\tdataPriv.remove( doc, fix );

\t\t\t\t} else {
\t\t\t\t\tdataPriv.access( doc, fix, attaches );
\t\t\t\t}
\t\t\t}
\t\t};
\t} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
\tvar xml;
\tif ( !data || typeof data !== "string" ) {
\t\treturn null;
\t}

\t// Support: IE 9 - 11 only
\t// IE throws on parseFromString with invalid input.
\ttry {
\t\txml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
\t} catch ( e ) {
\t\txml = undefined;
\t}

\tif ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
\t\tjQuery.error( "Invalid XML: " + data );
\t}
\treturn xml;
};


var
\trbracket = /\\[\\]$/,
\trCRLF = /\\r?\\n/g,
\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
\trsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
\tvar name;

\tif ( Array.isArray( obj ) ) {

\t\t// Serialize array item.
\t\tjQuery.each( obj, function( i, v ) {
\t\t\tif ( traditional || rbracket.test( prefix ) ) {

\t\t\t\t// Treat each array item as a scalar.
\t\t\t\tadd( prefix, v );

\t\t\t} else {

\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.
\t\t\t\tbuildParams(
\t\t\t\t\tprefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
\t\t\t\t\tv,
\t\t\t\t\ttraditional,
\t\t\t\t\tadd
\t\t\t\t);
\t\t\t}
\t\t} );

\t} else if ( !traditional && jQuery.type( obj ) === "object" ) {

\t\t// Serialize object item.
\t\tfor ( name in obj ) {
\t\t\tbuildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
\t\t}

\t} else {

\t\t// Serialize scalar item.
\t\tadd( prefix, obj );
\t}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
\tvar prefix,
\t\ts = [],
\t\tadd = function( key, valueOrFunction ) {

\t\t\t// If value is a function, invoke it and use its return value
\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?
\t\t\t\tvalueOrFunction() :
\t\t\t\tvalueOrFunction;

\t\t\ts[ s.length ] = encodeURIComponent( key ) + "=" +
\t\t\t\tencodeURIComponent( value == null ? "" : value );
\t\t};

\t// If an array was passed in, assume that it is an array of form elements.
\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

\t\t// Serialize the form elements
\t\tjQuery.each( a, function() {
\t\t\tadd( this.name, this.value );
\t\t} );

\t} else {

\t\t// If traditional, encode the "old" way (the way 1.3.2 or older
\t\t// did it), otherwise encode params recursively.
\t\tfor ( prefix in a ) {
\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );
\t\t}
\t}

\t// Return the resulting serialization
\treturn s.join( "&" );
};

jQuery.fn.extend( {
\tserialize: function() {
\t\treturn jQuery.param( this.serializeArray() );
\t},
\tserializeArray: function() {
\t\treturn this.map( function() {

\t\t\t// Can add propHook for "elements" to filter or add form elements
\t\t\tvar elements = jQuery.prop( this, "elements" );
\t\t\treturn elements ? jQuery.makeArray( elements ) : this;
\t\t} )
\t\t.filter( function() {
\t\t\tvar type = this.type;

\t\t\t// Use .is( ":disabled" ) so that fieldset[disabled] works
\t\t\treturn this.name && !jQuery( this ).is( ":disabled" ) &&
\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
\t\t\t\t( this.checked || !rcheckableType.test( type ) );
\t\t} )
\t\t.map( function( i, elem ) {
\t\t\tvar val = jQuery( this ).val();

\t\t\tif ( val == null ) {
\t\t\t\treturn null;
\t\t\t}

\t\t\tif ( Array.isArray( val ) ) {
\t\t\t\treturn jQuery.map( val, function( val ) {
\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, "\\r\\n" ) };
\t\t\t\t} );
\t\t\t}

\t\t\treturn { name: elem.name, value: val.replace( rCRLF, "\\r\\n" ) };
\t\t} ).get();
\t}
} );


var
\tr20 = /%20/g,
\trhash = /#.*$/,
\trantiCache = /([?&])_=[^&]*/,
\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,

\t// #7653, #8125, #8152: local protocol detection
\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
\trnoContent = /^(?:GET|HEAD)$/,
\trprotocol = /^\\/\\//,

\t/* Prefilters
\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
\t * 2) These are called:
\t *    - BEFORE asking for a transport
\t *    - AFTER param serialization (s.data is a string if s.processData is true)
\t * 3) key is the dataType
\t * 4) the catchall symbol "*" can be used
\t * 5) execution will start with transport dataType and THEN continue down to "*" if needed
\t */
\tprefilters = {},

\t/* Transports bindings
\t * 1) key is the dataType
\t * 2) the catchall symbol "*" can be used
\t * 3) selection will start with transport dataType and THEN go to "*" if needed
\t */
\ttransports = {},

\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
\tallTypes = "*/".concat( "*" ),

\t// Anchor tag for parsing the document origin
\toriginAnchor = document.createElement( "a" );
\toriginAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

\t// dataTypeExpression is optional and defaults to "*"
\treturn function( dataTypeExpression, func ) {

\t\tif ( typeof dataTypeExpression !== "string" ) {
\t\t\tfunc = dataTypeExpression;
\t\t\tdataTypeExpression = "*";
\t\t}

\t\tvar dataType,
\t\t\ti = 0,
\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

\t\tif ( jQuery.isFunction( func ) ) {

\t\t\t// For each dataType in the dataTypeExpression
\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {

\t\t\t\t// Prepend if requested
\t\t\t\tif ( dataType[ 0 ] === "+" ) {
\t\t\t\t\tdataType = dataType.slice( 1 ) || "*";
\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

\t\t\t\t// Otherwise append
\t\t\t\t} else {
\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
\t\t\t\t}
\t\t\t}
\t\t}
\t};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

\tvar inspected = {},
\t\tseekingTransport = ( structure === transports );

\tfunction inspect( dataType ) {
\t\tvar selected;
\t\tinspected[ dataType ] = true;
\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
\t\t\tif ( typeof dataTypeOrTransport === "string" &&
\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );
\t\t\t\tinspect( dataTypeOrTransport );
\t\t\t\treturn false;
\t\t\t} else if ( seekingTransport ) {
\t\t\t\treturn !( selected = dataTypeOrTransport );
\t\t\t}
\t\t} );
\t\treturn selected;
\t}

\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
\tvar key, deep,
\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};

\tfor ( key in src ) {
\t\tif ( src[ key ] !== undefined ) {
\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
\t\t}
\t}
\tif ( deep ) {
\t\tjQuery.extend( true, target, deep );
\t}

\treturn target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

\tvar ct, type, finalDataType, firstDataType,
\t\tcontents = s.contents,
\t\tdataTypes = s.dataTypes;

\t// Remove auto dataType and get content-type in the process
\twhile ( dataTypes[ 0 ] === "*" ) {
\t\tdataTypes.shift();
\t\tif ( ct === undefined ) {
\t\t\tct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
\t\t}
\t}

\t// Check if we're dealing with a known content-type
\tif ( ct ) {
\t\tfor ( type in contents ) {
\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {
\t\t\t\tdataTypes.unshift( type );
\t\t\t\tbreak;
\t\t\t}
\t\t}
\t}

\t// Check to see if we have a response for the expected dataType
\tif ( dataTypes[ 0 ] in responses ) {
\t\tfinalDataType = dataTypes[ 0 ];
\t} else {

\t\t// Try convertible dataTypes
\t\tfor ( type in responses ) {
\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
\t\t\t\tfinalDataType = type;
\t\t\t\tbreak;
\t\t\t}
\t\t\tif ( !firstDataType ) {
\t\t\t\tfirstDataType = type;
\t\t\t}
\t\t}

\t\t// Or just use first one
\t\tfinalDataType = finalDataType || firstDataType;
\t}

\t// If we found a dataType
\t// We add the dataType to the list if needed
\t// and return the corresponding response
\tif ( finalDataType ) {
\t\tif ( finalDataType !== dataTypes[ 0 ] ) {
\t\t\tdataTypes.unshift( finalDataType );
\t\t}
\t\treturn responses[ finalDataType ];
\t}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
\tvar conv2, current, conv, tmp, prev,
\t\tconverters = {},

\t\t// Work with a copy of dataTypes in case we need to modify it for conversion
\t\tdataTypes = s.dataTypes.slice();

\t// Create converters map with lowercased keys
\tif ( dataTypes[ 1 ] ) {
\t\tfor ( conv in s.converters ) {
\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];
\t\t}
\t}

\tcurrent = dataTypes.shift();

\t// Convert to each sequential dataType
\twhile ( current ) {

\t\tif ( s.responseFields[ current ] ) {
\t\t\tjqXHR[ s.responseFields[ current ] ] = response;
\t\t}

\t\t// Apply the dataFilter if provided
\t\tif ( !prev && isSuccess && s.dataFilter ) {
\t\t\tresponse = s.dataFilter( response, s.dataType );
\t\t}

\t\tprev = current;
\t\tcurrent = dataTypes.shift();

\t\tif ( current ) {

\t\t\t// There's only work to do if current dataType is non-auto
\t\t\tif ( current === "*" ) {

\t\t\t\tcurrent = prev;

\t\t\t// Convert response if prev dataType is non-auto and differs from current
\t\t\t} else if ( prev !== "*" && prev !== current ) {

\t\t\t\t// Seek a direct converter
\t\t\t\tconv = converters[ prev + " " + current ] || converters[ "* " + current ];

\t\t\t\t// If none found, seek a pair
\t\t\t\tif ( !conv ) {
\t\t\t\t\tfor ( conv2 in converters ) {

\t\t\t\t\t\t// If conv2 outputs current
\t\t\t\t\t\ttmp = conv2.split( " " );
\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {

\t\t\t\t\t\t\t// If prev can be converted to accepted input
\t\t\t\t\t\t\tconv = converters[ prev + " " + tmp[ 0 ] ] ||
\t\t\t\t\t\t\t\tconverters[ "* " + tmp[ 0 ] ];
\t\t\t\t\t\t\tif ( conv ) {

\t\t\t\t\t\t\t\t// Condense equivalence converters
\t\t\t\t\t\t\t\tif ( conv === true ) {
\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];

\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType
\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {
\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];
\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t\tbreak;
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\t// Apply converter (if not an equivalence)
\t\t\t\tif ( conv !== true ) {

\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them
\t\t\t\t\tif ( conv && s.throws ) {
\t\t\t\t\t\tresponse = conv( response );
\t\t\t\t\t} else {
\t\t\t\t\t\ttry {
\t\t\t\t\t\t\tresponse = conv( response );
\t\t\t\t\t\t} catch ( e ) {
\t\t\t\t\t\t\treturn {
\t\t\t\t\t\t\t\tstate: "parsererror",
\t\t\t\t\t\t\t\terror: conv ? e : "No conversion from " + prev + " to " + current
\t\t\t\t\t\t\t};
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}
\t\t}
\t}

\treturn { state: "success", data: response };
}

jQuery.extend( {

\t// Counter for holding the number of active queries
\tactive: 0,

\t// Last-Modified header cache for next request
\tlastModified: {},
\tetag: {},

\tajaxSettings: {
\t\turl: location.href,
\t\ttype: "GET",
\t\tisLocal: rlocalProtocol.test( location.protocol ),
\t\tglobal: true,
\t\tprocessData: true,
\t\tasync: true,
\t\tcontentType: "application/x-www-form-urlencoded; charset=UTF-8",

\t\t/*
\t\ttimeout: 0,
\t\tdata: null,
\t\tdataType: null,
\t\tusername: null,
\t\tpassword: null,
\t\tcache: null,
\t\tthrows: false,
\t\ttraditional: false,
\t\theaders: {},
\t\t*/

\t\taccepts: {
\t\t\t"*": allTypes,
\t\t\ttext: "text/plain",
\t\t\thtml: "text/html",
\t\t\txml: "application/xml, text/xml",
\t\t\tjson: "application/json, text/javascript"
\t\t},

\t\tcontents: {
\t\t\txml: /\\bxml\\b/,
\t\t\thtml: /\\bhtml/,
\t\t\tjson: /\\bjson\\b/
\t\t},

\t\tresponseFields: {
\t\t\txml: "responseXML",
\t\t\ttext: "responseText",
\t\t\tjson: "responseJSON"
\t\t},

\t\t// Data converters
\t\t// Keys separate source (or catchall "*") and destination types with a single space
\t\tconverters: {

\t\t\t// Convert anything to text
\t\t\t"* text": String,

\t\t\t// Text to html (true = no transformation)
\t\t\t"text html": true,

\t\t\t// Evaluate text as a json expression
\t\t\t"text json": JSON.parse,

\t\t\t// Parse text as xml
\t\t\t"text xml": jQuery.parseXML
\t\t},

\t\t// For options that shouldn't be deep extended:
\t\t// you can add your own custom options here if
\t\t// and when you create one that shouldn't be
\t\t// deep extended (see ajaxExtend)
\t\tflatOptions: {
\t\t\turl: true,
\t\t\tcontext: true
\t\t}
\t},

\t// Creates a full fledged settings object into target
\t// with both ajaxSettings and settings fields.
\t// If target is omitted, writes into ajaxSettings.
\tajaxSetup: function( target, settings ) {
\t\treturn settings ?

\t\t\t// Building a settings object
\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

\t\t\t// Extending ajaxSettings
\t\t\tajaxExtend( jQuery.ajaxSettings, target );
\t},

\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
\tajaxTransport: addToPrefiltersOrTransports( transports ),

\t// Main method
\tajax: function( url, options ) {

\t\t// If url is an object, simulate pre-1.5 signature
\t\tif ( typeof url === "object" ) {
\t\t\toptions = url;
\t\t\turl = undefined;
\t\t}

\t\t// Force options to be an object
\t\toptions = options || {};

\t\tvar transport,

\t\t\t// URL without anti-cache param
\t\t\tcacheURL,

\t\t\t// Response headers
\t\t\tresponseHeadersString,
\t\t\tresponseHeaders,

\t\t\t// timeout handle
\t\t\ttimeoutTimer,

\t\t\t// Url cleanup var
\t\t\turlAnchor,

\t\t\t// Request state (becomes false upon send and true upon completion)
\t\t\tcompleted,

\t\t\t// To know if global events are to be dispatched
\t\t\tfireGlobals,

\t\t\t// Loop variable
\t\t\ti,

\t\t\t// uncached part of the url
\t\t\tuncached,

\t\t\t// Create the final options object
\t\t\ts = jQuery.ajaxSetup( {}, options ),

\t\t\t// Callbacks context
\t\t\tcallbackContext = s.context || s,

\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection
\t\t\tglobalEventContext = s.context &&
\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?
\t\t\t\t\tjQuery( callbackContext ) :
\t\t\t\t\tjQuery.event,

\t\t\t// Deferreds
\t\t\tdeferred = jQuery.Deferred(),
\t\t\tcompleteDeferred = jQuery.Callbacks( "once memory" ),

\t\t\t// Status-dependent callbacks
\t\t\tstatusCode = s.statusCode || {},

\t\t\t// Headers (they are sent all at once)
\t\t\trequestHeaders = {},
\t\t\trequestHeadersNames = {},

\t\t\t// Default abort message
\t\t\tstrAbort = "canceled",

\t\t\t// Fake xhr
\t\t\tjqXHR = {
\t\t\t\treadyState: 0,

\t\t\t\t// Builds headers hashtable if needed
\t\t\t\tgetResponseHeader: function( key ) {
\t\t\t\t\tvar match;
\t\t\t\t\tif ( completed ) {
\t\t\t\t\t\tif ( !responseHeaders ) {
\t\t\t\t\t\t\tresponseHeaders = {};
\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {
\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];
\t\t\t\t\t}
\t\t\t\t\treturn match == null ? null : match;
\t\t\t\t},

\t\t\t\t// Raw string
\t\t\t\tgetAllResponseHeaders: function() {
\t\t\t\t\treturn completed ? responseHeadersString : null;
\t\t\t\t},

\t\t\t\t// Caches the header
\t\t\t\tsetRequestHeader: function( name, value ) {
\t\t\t\t\tif ( completed == null ) {
\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =
\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;
\t\t\t\t\t\trequestHeaders[ name ] = value;
\t\t\t\t\t}
\t\t\t\t\treturn this;
\t\t\t\t},

\t\t\t\t// Overrides response content-type header
\t\t\t\toverrideMimeType: function( type ) {
\t\t\t\t\tif ( completed == null ) {
\t\t\t\t\t\ts.mimeType = type;
\t\t\t\t\t}
\t\t\t\t\treturn this;
\t\t\t\t},

\t\t\t\t// Status-dependent callbacks
\t\t\t\tstatusCode: function( map ) {
\t\t\t\t\tvar code;
\t\t\t\t\tif ( map ) {
\t\t\t\t\t\tif ( completed ) {

\t\t\t\t\t\t\t// Execute the appropriate callbacks
\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );
\t\t\t\t\t\t} else {

\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones
\t\t\t\t\t\t\tfor ( code in map ) {
\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t\treturn this;
\t\t\t\t},

\t\t\t\t// Cancel the request
\t\t\t\tabort: function( statusText ) {
\t\t\t\t\tvar finalText = statusText || strAbort;
\t\t\t\t\tif ( transport ) {
\t\t\t\t\t\ttransport.abort( finalText );
\t\t\t\t\t}
\t\t\t\t\tdone( 0, finalText );
\t\t\t\t\treturn this;
\t\t\t\t}
\t\t\t};

\t\t// Attach deferreds
\t\tdeferred.promise( jqXHR );

\t\t// Add protocol if not provided (prefilters might expect it)
\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)
\t\t// We also use the url parameter if available
\t\ts.url = ( ( url || s.url || location.href ) + "" )
\t\t\t.replace( rprotocol, location.protocol + "//" );

\t\t// Alias method option to type as per ticket #12004
\t\ts.type = options.method || options.type || s.method || s.type;

\t\t// Extract dataTypes list
\t\ts.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

\t\t// A cross-domain request is in order when the origin doesn't match the current origin.
\t\tif ( s.crossDomain == null ) {
\t\t\turlAnchor = document.createElement( "a" );

\t\t\t// Support: IE <=8 - 11, Edge 12 - 13
\t\t\t// IE throws exception on accessing the href property if url is malformed,
\t\t\t// e.g. http://example.com:80x/
\t\t\ttry {
\t\t\t\turlAnchor.href = s.url;

\t\t\t\t// Support: IE <=8 - 11 only
\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative
\t\t\t\turlAnchor.href = urlAnchor.href;
\t\t\t\ts.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
\t\t\t\t\turlAnchor.protocol + "//" + urlAnchor.host;
\t\t\t} catch ( e ) {

\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,
\t\t\t\t// it can be rejected by the transport if it is invalid
\t\t\t\ts.crossDomain = true;
\t\t\t}
\t\t}

\t\t// Convert data if not already a string
\t\tif ( s.data && s.processData && typeof s.data !== "string" ) {
\t\t\ts.data = jQuery.param( s.data, s.traditional );
\t\t}

\t\t// Apply prefilters
\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

\t\t// If request was aborted inside a prefilter, stop there
\t\tif ( completed ) {
\t\t\treturn jqXHR;
\t\t}

\t\t// We can fire global events as of now if asked to
\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
\t\tfireGlobals = jQuery.event && s.global;

\t\t// Watch for a new set of requests
\t\tif ( fireGlobals && jQuery.active++ === 0 ) {
\t\t\tjQuery.event.trigger( "ajaxStart" );
\t\t}

\t\t// Uppercase the type
\t\ts.type = s.type.toUpperCase();

\t\t// Determine if request has content
\t\ts.hasContent = !rnoContent.test( s.type );

\t\t// Save the URL in case we're toying with the If-Modified-Since
\t\t// and/or If-None-Match header later on
\t\t// Remove hash to simplify url manipulation
\t\tcacheURL = s.url.replace( rhash, "" );

\t\t// More options handling for requests with no content
\t\tif ( !s.hasContent ) {

\t\t\t// Remember the hash so we can put it back
\t\t\tuncached = s.url.slice( cacheURL.length );

\t\t\t// If data is available, append data to url
\t\t\tif ( s.data ) {
\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

\t\t\t\t// #9682: remove data so that it's not used in an eventual retry
\t\t\t\tdelete s.data;
\t\t\t}

\t\t\t// Add or update anti-cache param if needed
\t\t\tif ( s.cache === false ) {
\t\t\t\tcacheURL = cacheURL.replace( rantiCache, "$1" );
\t\t\t\tuncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
\t\t\t}

\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)
\t\t\ts.url = cacheURL + uncached;

\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)
\t\t} else if ( s.data && s.processData &&
\t\t\t( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
\t\t\ts.data = s.data.replace( r20, "+" );
\t\t}

\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
\t\tif ( s.ifModified ) {
\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {
\t\t\t\tjqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
\t\t\t}
\t\t\tif ( jQuery.etag[ cacheURL ] ) {
\t\t\t\tjqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
\t\t\t}
\t\t}

\t\t// Set the correct header, if data is being sent
\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
\t\t\tjqXHR.setRequestHeader( "Content-Type", s.contentType );
\t\t}

\t\t// Set the Accepts header for the server, depending on the dataType
\t\tjqXHR.setRequestHeader(
\t\t\t"Accept",
\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +
\t\t\t\t\t( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
\t\t\t\ts.accepts[ "*" ]
\t\t);

\t\t// Check for headers option
\t\tfor ( i in s.headers ) {
\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );
\t\t}

\t\t// Allow custom headers/mimetypes and early abort
\t\tif ( s.beforeSend &&
\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

\t\t\t// Abort if not done already and return
\t\t\treturn jqXHR.abort();
\t\t}

\t\t// Aborting is no longer a cancellation
\t\tstrAbort = "abort";

\t\t// Install callbacks on deferreds
\t\tcompleteDeferred.add( s.complete );
\t\tjqXHR.done( s.success );
\t\tjqXHR.fail( s.error );

\t\t// Get transport
\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

\t\t// If no transport, we auto-abort
\t\tif ( !transport ) {
\t\t\tdone( -1, "No Transport" );
\t\t} else {
\t\t\tjqXHR.readyState = 1;

\t\t\t// Send global event
\t\t\tif ( fireGlobals ) {
\t\t\t\tglobalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
\t\t\t}

\t\t\t// If request was aborted inside ajaxSend, stop there
\t\t\tif ( completed ) {
\t\t\t\treturn jqXHR;
\t\t\t}

\t\t\t// Timeout
\t\t\tif ( s.async && s.timeout > 0 ) {
\t\t\t\ttimeoutTimer = window.setTimeout( function() {
\t\t\t\t\tjqXHR.abort( "timeout" );
\t\t\t\t}, s.timeout );
\t\t\t}

\t\t\ttry {
\t\t\t\tcompleted = false;
\t\t\t\ttransport.send( requestHeaders, done );
\t\t\t} catch ( e ) {

\t\t\t\t// Rethrow post-completion exceptions
\t\t\t\tif ( completed ) {
\t\t\t\t\tthrow e;
\t\t\t\t}

\t\t\t\t// Propagate others as results
\t\t\t\tdone( -1, e );
\t\t\t}
\t\t}

\t\t// Callback for when everything is done
\t\tfunction done( status, nativeStatusText, responses, headers ) {
\t\t\tvar isSuccess, success, error, response, modified,
\t\t\t\tstatusText = nativeStatusText;

\t\t\t// Ignore repeat invocations
\t\t\tif ( completed ) {
\t\t\t\treturn;
\t\t\t}

\t\t\tcompleted = true;

\t\t\t// Clear timeout if it exists
\t\t\tif ( timeoutTimer ) {
\t\t\t\twindow.clearTimeout( timeoutTimer );
\t\t\t}

\t\t\t// Dereference transport for early garbage collection
\t\t\t// (no matter how long the jqXHR object will be used)
\t\t\ttransport = undefined;

\t\t\t// Cache response headers
\t\t\tresponseHeadersString = headers || "";

\t\t\t// Set readyState
\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;

\t\t\t// Determine if successful
\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;

\t\t\t// Get response data
\t\t\tif ( responses ) {
\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );
\t\t\t}

\t\t\t// Convert no matter what (that way responseXXX fields are always set)
\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );

\t\t\t// If successful, handle type chaining
\t\t\tif ( isSuccess ) {

\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
\t\t\t\tif ( s.ifModified ) {
\t\t\t\t\tmodified = jqXHR.getResponseHeader( "Last-Modified" );
\t\t\t\t\tif ( modified ) {
\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;
\t\t\t\t\t}
\t\t\t\t\tmodified = jqXHR.getResponseHeader( "etag" );
\t\t\t\t\tif ( modified ) {
\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\t// if no content
\t\t\t\tif ( status === 204 || s.type === "HEAD" ) {
\t\t\t\t\tstatusText = "nocontent";

\t\t\t\t// if not modified
\t\t\t\t} else if ( status === 304 ) {
\t\t\t\t\tstatusText = "notmodified";

\t\t\t\t// If we have data, let's convert it
\t\t\t\t} else {
\t\t\t\t\tstatusText = response.state;
\t\t\t\t\tsuccess = response.data;
\t\t\t\t\terror = response.error;
\t\t\t\t\tisSuccess = !error;
\t\t\t\t}
\t\t\t} else {

\t\t\t\t// Extract error from statusText and normalize for non-aborts
\t\t\t\terror = statusText;
\t\t\t\tif ( status || !statusText ) {
\t\t\t\t\tstatusText = "error";
\t\t\t\t\tif ( status < 0 ) {
\t\t\t\t\t\tstatus = 0;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t}

\t\t\t// Set data for the fake xhr object
\t\t\tjqXHR.status = status;
\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + "";

\t\t\t// Success/Error
\t\t\tif ( isSuccess ) {
\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
\t\t\t} else {
\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
\t\t\t}

\t\t\t// Status-dependent callbacks
\t\t\tjqXHR.statusCode( statusCode );
\t\t\tstatusCode = undefined;

\t\t\tif ( fireGlobals ) {
\t\t\t\tglobalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );
\t\t\t}

\t\t\t// Complete
\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

\t\t\tif ( fireGlobals ) {
\t\t\t\tglobalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

\t\t\t\t// Handle the global AJAX counter
\t\t\t\tif ( !( --jQuery.active ) ) {
\t\t\t\t\tjQuery.event.trigger( "ajaxStop" );
\t\t\t\t}
\t\t\t}
\t\t}

\t\treturn jqXHR;
\t},

\tgetJSON: function( url, data, callback ) {
\t\treturn jQuery.get( url, data, callback, "json" );
\t},

\tgetScript: function( url, callback ) {
\t\treturn jQuery.get( url, undefined, callback, "script" );
\t}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
\tjQuery[ method ] = function( url, data, callback, type ) {

\t\t// Shift arguments if data argument was omitted
\t\tif ( jQuery.isFunction( data ) ) {
\t\t\ttype = type || callback;
\t\t\tcallback = data;
\t\t\tdata = undefined;
\t\t}

\t\t// The url can be an options object (which then must have .url)
\t\treturn jQuery.ajax( jQuery.extend( {
\t\t\turl: url,
\t\t\ttype: method,
\t\t\tdataType: type,
\t\t\tdata: data,
\t\t\tsuccess: callback
\t\t}, jQuery.isPlainObject( url ) && url ) );
\t};
} );


jQuery._evalUrl = function( url ) {
\treturn jQuery.ajax( {
\t\turl: url,

\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)
\t\ttype: "GET",
\t\tdataType: "script",
\t\tcache: true,
\t\tasync: false,
\t\tglobal: false,
\t\t"throws": true
\t} );
};


jQuery.fn.extend( {
\twrapAll: function( html ) {
\t\tvar wrap;

\t\tif ( this[ 0 ] ) {
\t\t\tif ( jQuery.isFunction( html ) ) {
\t\t\t\thtml = html.call( this[ 0 ] );
\t\t\t}

\t\t\t// The elements to wrap the target around
\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

\t\t\tif ( this[ 0 ].parentNode ) {
\t\t\t\twrap.insertBefore( this[ 0 ] );
\t\t\t}

\t\t\twrap.map( function() {
\t\t\t\tvar elem = this;

\t\t\t\twhile ( elem.firstElementChild ) {
\t\t\t\t\telem = elem.firstElementChild;
\t\t\t\t}

\t\t\t\treturn elem;
\t\t\t} ).append( this );
\t\t}

\t\treturn this;
\t},

\twrapInner: function( html ) {
\t\tif ( jQuery.isFunction( html ) ) {
\t\t\treturn this.each( function( i ) {
\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );
\t\t\t} );
\t\t}

\t\treturn this.each( function() {
\t\t\tvar self = jQuery( this ),
\t\t\t\tcontents = self.contents();

\t\t\tif ( contents.length ) {
\t\t\t\tcontents.wrapAll( html );

\t\t\t} else {
\t\t\t\tself.append( html );
\t\t\t}
\t\t} );
\t},

\twrap: function( html ) {
\t\tvar isFunction = jQuery.isFunction( html );

\t\treturn this.each( function( i ) {
\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
\t\t} );
\t},

\tunwrap: function( selector ) {
\t\tthis.parent( selector ).not( "body" ).each( function() {
\t\t\tjQuery( this ).replaceWith( this.childNodes );
\t\t} );
\t\treturn this;
\t}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
\treturn !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
\ttry {
\t\treturn new window.XMLHttpRequest();
\t} catch ( e ) {}
};

var xhrSuccessStatus = {

\t\t// File protocol always yields status code 0, assume 200
\t\t0: 200,

\t\t// Support: IE <=9 only
\t\t// #1450: sometimes IE returns 1223 when it should be 204
\t\t1223: 204
\t},
\txhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
\tvar callback, errorCallback;

\t// Cross domain only allowed if supported through XMLHttpRequest
\tif ( support.cors || xhrSupported && !options.crossDomain ) {
\t\treturn {
\t\t\tsend: function( headers, complete ) {
\t\t\t\tvar i,
\t\t\t\t\txhr = options.xhr();

\t\t\t\txhr.open(
\t\t\t\t\toptions.type,
\t\t\t\t\toptions.url,
\t\t\t\t\toptions.async,
\t\t\t\t\toptions.username,
\t\t\t\t\toptions.password
\t\t\t\t);

\t\t\t\t// Apply custom fields if provided
\t\t\t\tif ( options.xhrFields ) {
\t\t\t\t\tfor ( i in options.xhrFields ) {
\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];
\t\t\t\t\t}
\t\t\t\t}

\t\t\t\t// Override mime type if needed
\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {
\t\t\t\t\txhr.overrideMimeType( options.mimeType );
\t\t\t\t}

\t\t\t\t// X-Requested-With header
\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are
\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.
\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)
\t\t\t\t// For same-domain requests, won't change header if already provided.
\t\t\t\tif ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
\t\t\t\t\theaders[ "X-Requested-With" ] = "XMLHttpRequest";
\t\t\t\t}

\t\t\t\t// Set headers
\t\t\t\tfor ( i in headers ) {
\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );
\t\t\t\t}

\t\t\t\t// Callback
\t\t\t\tcallback = function( type ) {
\t\t\t\t\treturn function() {
\t\t\t\t\t\tif ( callback ) {
\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =
\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

\t\t\t\t\t\t\tif ( type === "abort" ) {
\t\t\t\t\t\t\t\txhr.abort();
\t\t\t\t\t\t\t} else if ( type === "error" ) {

\t\t\t\t\t\t\t\t// Support: IE <=9 only
\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws
\t\t\t\t\t\t\t\t// errors on any property access that is not readyState
\t\t\t\t\t\t\t\tif ( typeof xhr.status !== "number" ) {
\t\t\t\t\t\t\t\t\tcomplete( 0, "error" );
\t\t\t\t\t\t\t\t} else {
\t\t\t\t\t\t\t\t\tcomplete(

\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207
\t\t\t\t\t\t\t\t\t\txhr.status,
\t\t\t\t\t\t\t\t\t\txhr.statusText
\t\t\t\t\t\t\t\t\t);
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t} else {
\t\t\t\t\t\t\t\tcomplete(
\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,
\t\t\t\t\t\t\t\t\txhr.statusText,

\t\t\t\t\t\t\t\t\t// Support: IE <=9 only
\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)
\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)
\t\t\t\t\t\t\t\t\t( xhr.responseType || "text" ) !== "text"  ||
\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== "string" ?
\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :
\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },
\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()
\t\t\t\t\t\t\t\t);
\t\t\t\t\t\t\t}
\t\t\t\t\t\t}
\t\t\t\t\t};
\t\t\t\t};

\t\t\t\t// Listen to events
\t\t\t\txhr.onload = callback();
\t\t\t\terrorCallback = xhr.onerror = callback( "error" );

\t\t\t\t// Support: IE 9 only
\t\t\t\t// Use onreadystatechange to replace onabort
\t\t\t\t// to handle uncaught aborts
\t\t\t\tif ( xhr.onabort !== undefined ) {
\t\t\t\t\txhr.onabort = errorCallback;
\t\t\t\t} else {
\t\t\t\t\txhr.onreadystatechange = function() {

\t\t\t\t\t\t// Check readyState before timeout as it changes
\t\t\t\t\t\tif ( xhr.readyState === 4 ) {

\t\t\t\t\t\t\t// Allow onerror to be called first,
\t\t\t\t\t\t\t// but that will not handle a native abort
\t\t\t\t\t\t\t// Also, save errorCallback to a variable
\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed
\t\t\t\t\t\t\twindow.setTimeout( function() {
\t\t\t\t\t\t\t\tif ( callback ) {
\t\t\t\t\t\t\t\t\terrorCallback();
\t\t\t\t\t\t\t\t}
\t\t\t\t\t\t\t} );
\t\t\t\t\t\t}
\t\t\t\t\t};
\t\t\t\t}

\t\t\t\t// Create the abort callback
\t\t\t\tcallback = callback( "abort" );

\t\t\t\ttry {

\t\t\t\t\t// Do send the request (this may raise an exception)
\t\t\t\t\txhr.send( options.hasContent && options.data || null );
\t\t\t\t} catch ( e ) {

\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet
\t\t\t\t\tif ( callback ) {
\t\t\t\t\t\tthrow e;
\t\t\t\t\t}
\t\t\t\t}
\t\t\t},

\t\t\tabort: function() {
\t\t\t\tif ( callback ) {
\t\t\t\t\tcallback();
\t\t\t\t}
\t\t\t}
\t\t};
\t}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
\tif ( s.crossDomain ) {
\t\ts.contents.script = false;
\t}
} );

// Install script dataType
jQuery.ajaxSetup( {
\taccepts: {
\t\tscript: "text/javascript, application/javascript, " +
\t\t\t"application/ecmascript, application/x-ecmascript"
\t},
\tcontents: {
\t\tscript: /\\b(?:java|ecma)script\\b/
\t},
\tconverters: {
\t\t"text script": function( text ) {
\t\t\tjQuery.globalEval( text );
\t\t\treturn text;
\t\t}
\t}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
\tif ( s.cache === undefined ) {
\t\ts.cache = false;
\t}
\tif ( s.crossDomain ) {
\t\ts.type = "GET";
\t}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

\t// This transport only deals with cross domain requests
\tif ( s.crossDomain ) {
\t\tvar script, callback;
\t\treturn {
\t\t\tsend: function( _, complete ) {
\t\t\t\tscript = jQuery( "<script>" ).prop( {
\t\t\t\t\tcharset: s.scriptCharset,
\t\t\t\t\tsrc: s.url
\t\t\t\t} ).on(
\t\t\t\t\t"load error",
\t\t\t\t\tcallback = function( evt ) {
\t\t\t\t\t\tscript.remove();
\t\t\t\t\t\tcallback = null;
\t\t\t\t\t\tif ( evt ) {
\t\t\t\t\t\t\tcomplete( evt.type === "error" ? 404 : 200, evt.type );
\t\t\t\t\t\t}
\t\t\t\t\t}
\t\t\t\t);

\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery
\t\t\t\tdocument.head.appendChild( script[ 0 ] );
\t\t\t},
\t\t\tabort: function() {
\t\t\t\tif ( callback ) {
\t\t\t\t\tcallback();
\t\t\t\t}
\t\t\t}
\t\t};
\t}
} );




var oldCallbacks = [],
\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
\tjsonp: "callback",
\tjsonpCallback: function() {
\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
\t\tthis[ callback ] = true;
\t\treturn callback;
\t}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

\tvar callbackName, overwritten, responseContainer,
\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
\t\t\t"url" :
\t\t\ttypeof s.data === "string" &&
\t\t\t\t( s.contentType || "" )
\t\t\t\t\t.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
\t\t\t\trjsonp.test( s.data ) && "data"
\t\t);

\t// Handle iff the expected data type is "jsonp" or we have a parameter to set
\tif ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

\t\t// Get callback name, remembering preexisting value associated with it
\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
\t\t\ts.jsonpCallback() :
\t\t\ts.jsonpCallback;

\t\t// Insert callback into url or form data
\t\tif ( jsonProp ) {
\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
\t\t} else if ( s.jsonp !== false ) {
\t\t\ts.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
\t\t}

\t\t// Use data converter to retrieve json after script execution
\t\ts.converters[ "script json" ] = function() {
\t\t\tif ( !responseContainer ) {
\t\t\t\tjQuery.error( callbackName + " was not called" );
\t\t\t}
\t\t\treturn responseContainer[ 0 ];
\t\t};

\t\t// Force json dataType
\t\ts.dataTypes[ 0 ] = "json";

\t\t// Install callback
\t\toverwritten = window[ callbackName ];
\t\twindow[ callbackName ] = function() {
\t\t\tresponseContainer = arguments;
\t\t};

\t\t// Clean-up function (fires after converters)
\t\tjqXHR.always( function() {

\t\t\t// If previous value didn't exist - remove it
\t\t\tif ( overwritten === undefined ) {
\t\t\t\tjQuery( window ).removeProp( callbackName );

\t\t\t// Otherwise restore preexisting value
\t\t\t} else {
\t\t\t\twindow[ callbackName ] = overwritten;
\t\t\t}

\t\t\t// Save back as free
\t\t\tif ( s[ callbackName ] ) {

\t\t\t\t// Make sure that re-using the options doesn't screw things around
\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;

\t\t\t\t// Save the callback name for future use
\t\t\t\toldCallbacks.push( callbackName );
\t\t\t}

\t\t\t// Call if it was a function and we have a response
\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {
\t\t\t\toverwritten( responseContainer[ 0 ] );
\t\t\t}

\t\t\tresponseContainer = overwritten = undefined;
\t\t} );

\t\t// Delegate to script
\t\treturn "script";
\t}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
\tvar body = document.implementation.createHTMLDocument( "" ).body;
\tbody.innerHTML = "<form></form><form></form>";
\treturn body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
\tif ( typeof data !== "string" ) {
\t\treturn [];
\t}
\tif ( typeof context === "boolean" ) {
\t\tkeepScripts = context;
\t\tcontext = false;
\t}

\tvar base, parsed, scripts;

\tif ( !context ) {

\t\t// Stop scripts or inline event handlers from being executed immediately
\t\t// by using document.implementation
\t\tif ( support.createHTMLDocument ) {
\t\t\tcontext = document.implementation.createHTMLDocument( "" );

\t\t\t// Set the base href for the created document
\t\t\t// so any parsed elements with URLs
\t\t\t// are based on the document's URL (gh-2965)
\t\t\tbase = context.createElement( "base" );
\t\t\tbase.href = document.location.href;
\t\t\tcontext.head.appendChild( base );
\t\t} else {
\t\t\tcontext = document;
\t\t}
\t}

\tparsed = rsingleTag.exec( data );
\tscripts = !keepScripts && [];

\t// Single tag
\tif ( parsed ) {
\t\treturn [ context.createElement( parsed[ 1 ] ) ];
\t}

\tparsed = buildFragment( [ data ], context, scripts );

\tif ( scripts && scripts.length ) {
\t\tjQuery( scripts ).remove();
\t}

\treturn jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
\tvar selector, type, response,
\t\tself = this,
\t\toff = url.indexOf( " " );

\tif ( off > -1 ) {
\t\tselector = stripAndCollapse( url.slice( off ) );
\t\turl = url.slice( 0, off );
\t}

\t// If it's a function
\tif ( jQuery.isFunction( params ) ) {

\t\t// We assume that it's the callback
\t\tcallback = params;
\t\tparams = undefined;

\t// Otherwise, build a param string
\t} else if ( params && typeof params === "object" ) {
\t\ttype = "POST";
\t}

\t// If we have elements to modify, make the request
\tif ( self.length > 0 ) {
\t\tjQuery.ajax( {
\t\t\turl: url,

\t\t\t// If "type" variable is undefined, then "GET" method will be used.
\t\t\t// Make value of this field explicit since
\t\t\t// user can override it through ajaxSetup method
\t\t\ttype: type || "GET",
\t\t\tdataType: "html",
\t\t\tdata: params
\t\t} ).done( function( responseText ) {

\t\t\t// Save response for use in complete callback
\t\t\tresponse = arguments;

\t\t\tself.html( selector ?

\t\t\t\t// If a selector was specified, locate the right elements in a dummy div
\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors
\t\t\t\tjQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

\t\t\t\t// Otherwise use the full result
\t\t\t\tresponseText );

\t\t// If the request succeeds, this function gets "data", "status", "jqXHR"
\t\t// but they are ignored because response was set above.
\t\t// If it fails, this function gets "jqXHR", "status", "error"
\t\t} ).always( callback && function( jqXHR, status ) {
\t\t\tself.each( function() {
\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
\t\t\t} );
\t\t} );
\t}

\treturn this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
\t"ajaxStart",
\t"ajaxStop",
\t"ajaxComplete",
\t"ajaxError",
\t"ajaxSuccess",
\t"ajaxSend"
], function( i, type ) {
\tjQuery.fn[ type ] = function( fn ) {
\t\treturn this.on( type, fn );
\t};
} );




jQuery.expr.pseudos.animated = function( elem ) {
\treturn jQuery.grep( jQuery.timers, function( fn ) {
\t\treturn elem === fn.elem;
\t} ).length;
};




jQuery.offset = {
\tsetOffset: function( elem, options, i ) {
\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
\t\t\tposition = jQuery.css( elem, "position" ),
\t\t\tcurElem = jQuery( elem ),
\t\t\tprops = {};

\t\t// Set position first, in-case top/left are set even on static elem
\t\tif ( position === "static" ) {
\t\t\telem.style.position = "relative";
\t\t}

\t\tcurOffset = curElem.offset();
\t\tcurCSSTop = jQuery.css( elem, "top" );
\t\tcurCSSLeft = jQuery.css( elem, "left" );
\t\tcalculatePosition = ( position === "absolute" || position === "fixed" ) &&
\t\t\t( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

\t\t// Need to be able to calculate position if either
\t\t// top or left is auto and position is either absolute or fixed
\t\tif ( calculatePosition ) {
\t\t\tcurPosition = curElem.position();
\t\t\tcurTop = curPosition.top;
\t\t\tcurLeft = curPosition.left;

\t\t} else {
\t\t\tcurTop = parseFloat( curCSSTop ) || 0;
\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;
\t\t}

\t\tif ( jQuery.isFunction( options ) ) {

\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );
\t\t}

\t\tif ( options.top != null ) {
\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;
\t\t}
\t\tif ( options.left != null ) {
\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;
\t\t}

\t\tif ( "using" in options ) {
\t\t\toptions.using.call( elem, props );

\t\t} else {
\t\t\tcurElem.css( props );
\t\t}
\t}
};

jQuery.fn.extend( {
\toffset: function( options ) {

\t\t// Preserve chaining for setter
\t\tif ( arguments.length ) {
\t\t\treturn options === undefined ?
\t\t\t\tthis :
\t\t\t\tthis.each( function( i ) {
\t\t\t\t\tjQuery.offset.setOffset( this, options, i );
\t\t\t\t} );
\t\t}

\t\tvar doc, docElem, rect, win,
\t\t\telem = this[ 0 ];

\t\tif ( !elem ) {
\t\t\treturn;
\t\t}

\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
\t\t// Support: IE <=11 only
\t\t// Running getBoundingClientRect on a
\t\t// disconnected node in IE throws an error
\t\tif ( !elem.getClientRects().length ) {
\t\t\treturn { top: 0, left: 0 };
\t\t}

\t\trect = elem.getBoundingClientRect();

\t\tdoc = elem.ownerDocument;
\t\tdocElem = doc.documentElement;
\t\twin = doc.defaultView;

\t\treturn {
\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,
\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft
\t\t};
\t},

\tposition: function() {
\t\tif ( !this[ 0 ] ) {
\t\t\treturn;
\t\t}

\t\tvar offsetParent, offset,
\t\t\telem = this[ 0 ],
\t\t\tparentOffset = { top: 0, left: 0 };

\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
\t\t// because it is its only offset parent
\t\tif ( jQuery.css( elem, "position" ) === "fixed" ) {

\t\t\t// Assume getBoundingClientRect is there when computed position is fixed
\t\t\toffset = elem.getBoundingClientRect();

\t\t} else {

\t\t\t// Get *real* offsetParent
\t\t\toffsetParent = this.offsetParent();

\t\t\t// Get correct offsets
\t\t\toffset = this.offset();
\t\t\tif ( !nodeName( offsetParent[ 0 ], "html" ) ) {
\t\t\t\tparentOffset = offsetParent.offset();
\t\t\t}

\t\t\t// Add offsetParent borders
\t\t\tparentOffset = {
\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
\t\t\t};
\t\t}

\t\t// Subtract parent offsets and element margins
\t\treturn {
\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
\t\t};
\t},

\t// This method will return documentElement in the following cases:
\t// 1) For the element inside the iframe without offsetParent, this method will return
\t//    documentElement of the parent window
\t// 2) For the hidden or detached element
\t// 3) For body or html element, i.e. in case of the html node - it will return itself
\t//
\t// but those exceptions were never presented as a real life use-cases
\t// and might be considered as more preferable results.
\t//
\t// This logic, however, is not guaranteed and can change at any point in the future
\toffsetParent: function() {
\t\treturn this.map( function() {
\t\t\tvar offsetParent = this.offsetParent;

\t\t\twhile ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
\t\t\t\toffsetParent = offsetParent.offsetParent;
\t\t\t}

\t\t\treturn offsetParent || documentElement;
\t\t} );
\t}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
\tvar top = "pageYOffset" === prop;

\tjQuery.fn[ method ] = function( val ) {
\t\treturn access( this, function( elem, method, val ) {

\t\t\t// Coalesce documents and windows
\t\t\tvar win;
\t\t\tif ( jQuery.isWindow( elem ) ) {
\t\t\t\twin = elem;
\t\t\t} else if ( elem.nodeType === 9 ) {
\t\t\t\twin = elem.defaultView;
\t\t\t}

\t\t\tif ( val === undefined ) {
\t\t\t\treturn win ? win[ prop ] : elem[ method ];
\t\t\t}

\t\t\tif ( win ) {
\t\t\t\twin.scrollTo(
\t\t\t\t\t!top ? val : win.pageXOffset,
\t\t\t\t\ttop ? val : win.pageYOffset
\t\t\t\t);

\t\t\t} else {
\t\t\t\telem[ method ] = val;
\t\t\t}
\t\t}, method, val, arguments.length );
\t};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
\t\tfunction( elem, computed ) {
\t\t\tif ( computed ) {
\t\t\t\tcomputed = curCSS( elem, prop );

\t\t\t\t// If curCSS returns percentage, fallback to offset
\t\t\t\treturn rnumnonpx.test( computed ) ?
\t\t\t\t\tjQuery( elem ).position()[ prop ] + "px" :
\t\t\t\t\tcomputed;
\t\t\t}
\t\t}
\t);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
\tjQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
\t\tfunction( defaultExtra, funcName ) {

\t\t// Margin is only for outerHeight, outerWidth
\t\tjQuery.fn[ funcName ] = function( margin, value ) {
\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
\t\t\t\textra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

\t\t\treturn access( this, function( elem, type, value ) {
\t\t\t\tvar doc;

\t\t\t\tif ( jQuery.isWindow( elem ) ) {

\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
\t\t\t\t\treturn funcName.indexOf( "outer" ) === 0 ?
\t\t\t\t\t\telem[ "inner" + name ] :
\t\t\t\t\t\telem.document.documentElement[ "client" + name ];
\t\t\t\t}

\t\t\t\t// Get document width or height
\t\t\t\tif ( elem.nodeType === 9 ) {
\t\t\t\t\tdoc = elem.documentElement;

\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
\t\t\t\t\t// whichever is greatest
\t\t\t\t\treturn Math.max(
\t\t\t\t\t\telem.body[ "scroll" + name ], doc[ "scroll" + name ],
\t\t\t\t\t\telem.body[ "offset" + name ], doc[ "offset" + name ],
\t\t\t\t\t\tdoc[ "client" + name ]
\t\t\t\t\t);
\t\t\t\t}

\t\t\t\treturn value === undefined ?

\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat
\t\t\t\t\tjQuery.css( elem, type, extra ) :

\t\t\t\t\t// Set width or height on the element
\t\t\t\t\tjQuery.style( elem, type, value, extra );
\t\t\t}, type, chainable ? margin : undefined, chainable );
\t\t};
\t} );
} );


jQuery.fn.extend( {

\tbind: function( types, data, fn ) {
\t\treturn this.on( types, null, data, fn );
\t},
\tunbind: function( types, fn ) {
\t\treturn this.off( types, null, fn );
\t},

\tdelegate: function( selector, types, data, fn ) {
\t\treturn this.on( types, selector, data, fn );
\t},
\tundelegate: function( selector, types, fn ) {

\t\t// ( namespace ) or ( selector, types [, fn] )
\t\treturn arguments.length === 1 ?
\t\t\tthis.off( selector, "**" ) :
\t\t\tthis.off( types, selector || "**", fn );
\t}
} );

jQuery.holdReady = function( hold ) {
\tif ( hold ) {
\t\tjQuery.readyWait++;
\t} else {
\t\tjQuery.ready( true );
\t}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
\tdefine( "jquery", [], function() {
\t\treturn jQuery;
\t} );
}




var

\t// Map over jQuery in case of overwrite
\t_jQuery = window.jQuery,

\t// Map over the $ in case of overwrite
\t_$ = window.$;

jQuery.noConflict = function( deep ) {
\tif ( window.$ === jQuery ) {
\t\twindow.$ = _$;
\t}

\tif ( deep && window.jQuery === jQuery ) {
\t\twindow.jQuery = _jQuery;
\t}

\treturn jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
\twindow.jQuery = window.$ = jQuery;
}




return jQuery;
} );
'''

snapshots['test_build_all_docs 43'] = '''/*! jQuery v3.2.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(a,b){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){"use strict";var c=[],d=a.document,e=Object.getPrototypeOf,f=c.slice,g=c.concat,h=c.push,i=c.indexOf,j={},k=j.toString,l=j.hasOwnProperty,m=l.toString,n=m.call(Object),o={};function p(a,b){b=b||d;var c=b.createElement("script");c.text=a,b.head.appendChild(c).parentNode.removeChild(c)}var q="3.2.1",r=function(a,b){return new r.fn.init(a,b)},s=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,t=/^-ms-/,u=/-([a-z])/g,v=function(a,b){return b.toUpperCase()};r.fn=r.prototype={jquery:q,constructor:r,length:0,toArray:function(){return f.call(this)},get:function(a){return null==a?f.call(this):a<0?this[a+this.length]:this[a]},pushStack:function(a){var b=r.merge(this.constructor(),a);return b.prevObject=this,b},each:function(a){return r.each(this,a)},map:function(a){return this.pushStack(r.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(f.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(a<0?b:0);return this.pushStack(c>=0&&c<b?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:c.sort,splice:c.splice},r.extend=r.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||r.isFunction(g)||(g={}),h===i&&(g=this,h--);h<i;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(r.isPlainObject(d)||(e=Array.isArray(d)))?(e?(e=!1,f=c&&Array.isArray(c)?c:[]):f=c&&r.isPlainObject(c)?c:{},g[b]=r.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},r.extend({expando:"jQuery"+(q+Math.random()).replace(/\\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===r.type(a)},isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=r.type(a);return("number"===b||"string"===b)&&!isNaN(a-parseFloat(a))},isPlainObject:function(a){var b,c;return!(!a||"[object Object]"!==k.call(a))&&(!(b=e(a))||(c=l.call(b,"constructor")&&b.constructor,"function"==typeof c&&m.call(c)===n))},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?j[k.call(a)]||"object":typeof a},globalEval:function(a){p(a)},camelCase:function(a){return a.replace(t,"ms-").replace(u,v)},each:function(a,b){var c,d=0;if(w(a)){for(c=a.length;d<c;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(s,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(w(Object(a))?r.merge(c,"string"==typeof a?[a]:a):h.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:i.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;d<c;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;f<g;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,f=0,h=[];if(w(a))for(d=a.length;f<d;f++)e=b(a[f],f,c),null!=e&&h.push(e);else for(f in a)e=b(a[f],f,c),null!=e&&h.push(e);return g.apply([],h)},guid:1,proxy:function(a,b){var c,d,e;if("string"==typeof b&&(c=a[b],b=a,a=c),r.isFunction(a))return d=f.call(arguments,2),e=function(){return a.apply(b||this,d.concat(f.call(arguments)))},e.guid=a.guid=a.guid||r.guid++,e},now:Date.now,support:o}),"function"==typeof Symbol&&(r.fn[Symbol.iterator]=c[Symbol.iterator]),r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){j["[object "+b+"]"]=b.toLowerCase()});function w(a){var b=!!a&&"length"in a&&a.length,c=r.type(a);return"function"!==c&&!r.isWindow(a)&&("array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a)}var x=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=function(a,b){for(var c=0,d=a.length;c<d;c++)if(a[c]===b)return c;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\\\x20\\\\t\\\\r\\\\n\\\\f]",L="(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",M="\\\\["+K+"*("+L+")(?:"+K+"*([*^$|!~]?=)"+K+"*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|("+L+"))|)"+K+"*\\\\]",N=":("+L+")(?:\\\\(((\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|"+M+")*)|.*)\\\\)|)",O=new RegExp(K+"+","g"),P=new RegExp("^"+K+"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\\\]\'\\"]*?)"+K+"*\\\\]","g"),T=new RegExp(N),U=new RegExp("^"+L+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\("+K+"*(even|odd|(([+-]|)(\\\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\\\d+)|))"+K+"*\\\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\("+K+"*((?:-\\\\d)?\\\\d*)"+K+"*\\\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\\d$/i,Y=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,$=/[+~]/,_=new RegExp("\\\\\\\\([\\\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),aa=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:d<0?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ba=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ca=function(a,b){return b?"\\0"===a?"\\ufffd":a.slice(0,-1)+"\\\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\\\"+a},da=function(){m()},ea=ta(function(a){return a.disabled===!0&&("form"in a||"label"in a)},{dir:"parentNode",next:"legend"});try{G.apply(D=H.call(v.childNodes),v.childNodes),D[v.childNodes.length].nodeType}catch(fa){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s=b&&b.ownerDocument,w=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==w&&9!==w&&11!==w)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==w&&(l=Z.exec(a)))if(f=l[1]){if(9===w){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(s&&(j=s.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(l[2])return G.apply(d,b.getElementsByTagName(a)),d;if((f=l[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==w)s=b,r=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(ba,ca):b.setAttribute("id",k=u),o=g(a),h=o.length;while(h--)o[h]="#"+k+" "+sa(o[h]);r=o.join(","),s=$.test(a)&&qa(b.parentNode)||b}if(r)try{return G.apply(d,s.querySelectorAll(r)),d}catch(x){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(P,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("fieldset");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return function(b){return"form"in b?b.parentNode&&b.disabled===!1?"label"in b?"label"in b.parentNode?b.parentNode.disabled===a:b.disabled===a:b.isDisabled===a||b.isDisabled!==!a&&ea(b)===a:b.disabled===a:"label"in b&&b.disabled===a}}function pa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function qa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return!!b&&"HTML"!==b.nodeName},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),v!==n&&(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(n.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){return a.getAttribute("id")===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}}):(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c,d,e,f=b.getElementById(a);if(f){if(c=f.getAttributeNode("id"),c&&c.value===a)return[f];e=b.getElementsByName(a),d=0;while(f=e[d++])if(c=f.getAttributeNode("id"),c&&c.value===a)return[f]}return[]}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){if("undefined"!=typeof b.getElementsByClassName&&p)return b.getElementsByClassName(a)},r=[],q=[],(c.qsa=Y.test(n.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id=\'"+u+"\'></a><select id=\'"+u+"-\\r\\\\\' msallowcapture=\'\'><option selected=\'\'></option></select>",a.querySelectorAll("[msallowcapture^=\'\']").length&&q.push("[*^$]="+K+"*(?:\'\'|\\"\\")"),a.querySelectorAll("[selected]").length||q.push("\\\\["+K+"*(?:value|"+J+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){a.innerHTML="<a href=\'\' disabled=\'disabled\'></a><select disabled=\'disabled\'><option/></select>";var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+K+"*[*^$|!~]?="),2!==a.querySelectorAll(":enabled").length&&q.push(":enabled",":disabled"),o.appendChild(a).disabled=!0,2!==a.querySelectorAll(":disabled").length&&q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Y.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"*"),s.call(a,"[s!=\'\']:x"),r.push("!=",N)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Y.test(o.compareDocumentPosition),t=b||Y.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?I(k,a)-I(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?I(k,a)-I(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?la(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(S,"=\'$1\']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.escape=function(a){return(a+"").replace(ba,ca)},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(_,aa),a[3]=(a[3]||a[4]||a[5]||"").replace(_,aa),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return V.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&T.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(_,aa).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:!b||(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(O," ")+" ").indexOf(c)>-1:"|="===b&&(e===c||e.slice(0,c.length+1)===c+"-"))}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(P,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(_,aa),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return U.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(_,aa).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:oa(!1),disabled:oa(!0),checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:pa(function(){return[0]}),last:pa(function(a,b){return[b-1]}),eq:pa(function(a,b,c){return[c<0?c+b:c]}),even:pa(function(a,b){for(var c=0;c<b;c+=2)a.push(c);return a}),odd:pa(function(a,b){for(var c=1;c<b;c+=2)a.push(c);return a}),lt:pa(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:pa(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function ra(){}ra.prototype=d.filters=d.pseudos,d.setFilters=new ra,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=Q.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function sa(a){for(var b=0,c=a.length,d="";b<c;b++)d+=a[b].value;return d}function ta(a,b,c){var d=b.dir,e=b.next,f=e||d,g=c&&"parentNode"===f,h=x++;return b.first?function(b,c,e){while(b=b[d])if(1===b.nodeType||g)return a(b,c,e);return!1}:function(b,c,i){var j,k,l,m=[w,h];if(i){while(b=b[d])if((1===b.nodeType||g)&&a(b,c,i))return!0}else while(b=b[d])if(1===b.nodeType||g)if(l=b[u]||(b[u]={}),k=l[b.uniqueID]||(l[b.uniqueID]={}),e&&e===b.nodeName.toLowerCase())b=b[d]||b;else{if((j=k[f])&&j[0]===w&&j[1]===h)return m[2]=j[2];if(k[f]=m,m[2]=a(b,c,i))return!0}return!1}}function ua(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function va(a,b,c){for(var d=0,e=b.length;d<e;d++)ga(a,b[d],c);return c}function wa(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;h<i;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function xa(a,b,c,d,e,f){return d&&!d[u]&&(d=xa(d)),e&&!e[u]&&(e=xa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||va(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:wa(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=wa(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=wa(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ya(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ta(function(a){return a===b},h,!0),l=ta(function(a){return I(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];i<f;i++)if(c=d.relative[a[i].type])m=[ta(ua(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;e<f;e++)if(d.relative[a[e].type])break;return xa(i>1&&ua(m),i>1&&sa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(P,"$1"),c,i<e&&ya(a.slice(i,e)),e<f&&ya(a=a.slice(e)),e<f&&sa(a))}m.push(c)}return ua(m)}function za(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=E.call(i));u=wa(u)}G.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&ga.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=ya(b[c]),f[u]?d.push(f):e.push(f);f=A(a,za(e,d)),f.selector=a}return f},i=ga.select=function(a,b,c,e){var f,i,j,k,l,m="function"==typeof a&&a,n=!e&&g(a=m.selector||a);if(c=c||[],1===n.length){if(i=n[0]=n[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&9===b.nodeType&&p&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(_,aa),b)||[])[0],!b)return c;m&&(b=b.parentNode),a=a.slice(i.shift().value.length)}f=V.needsContext.test(a)?0:i.length;while(f--){if(j=i[f],d.relative[k=j.type])break;if((l=d.find[k])&&(e=l(j.matches[0].replace(_,aa),$.test(i[0].type)&&qa(b.parentNode)||b))){if(i.splice(f,1),a=e.length&&sa(i),!a)return G.apply(c,e),c;break}}}return(m||h(a,n))(e,b,!p,c,!b||$.test(a)&&qa(b.parentNode)||b),c},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("fieldset"))}),ja(function(a){return a.innerHTML="<a href=\'#\'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){if(!c)return a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){if(!c&&"input"===a.nodeName.toLowerCase())return a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(J,function(a,b,c){var d;if(!c)return a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);r.find=x,r.expr=x.selectors,r.expr[":"]=r.expr.pseudos,r.uniqueSort=r.unique=x.uniqueSort,r.text=x.getText,r.isXMLDoc=x.isXML,r.contains=x.contains,r.escapeSelector=x.escape;var y=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&r(a).is(c))break;d.push(a)}return d},z=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},A=r.expr.match.needsContext;function B(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()}var C=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i,D=/^.[^:#\\[\\.,]*$/;function E(a,b,c){return r.isFunction(b)?r.grep(a,function(a,d){return!!b.call(a,d,a)!==c}):b.nodeType?r.grep(a,function(a){return a===b!==c}):"string"!=typeof b?r.grep(a,function(a){return i.call(b,a)>-1!==c}):D.test(b)?r.filter(b,a,c):(b=r.filter(b,a),r.grep(a,function(a){return i.call(b,a)>-1!==c&&1===a.nodeType}))}r.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?r.find.matchesSelector(d,a)?[d]:[]:r.find.matches(a,r.grep(b,function(a){return 1===a.nodeType}))},r.fn.extend({find:function(a){var b,c,d=this.length,e=this;if("string"!=typeof a)return this.pushStack(r(a).filter(function(){for(b=0;b<d;b++)if(r.contains(e[b],this))return!0}));for(c=this.pushStack([]),b=0;b<d;b++)r.find(a,e[b],c);return d>1?r.uniqueSort(c):c},filter:function(a){return this.pushStack(E(this,a||[],!1))},not:function(a){return this.pushStack(E(this,a||[],!0))},is:function(a){return!!E(this,"string"==typeof a&&A.test(a)?r(a):a||[],!1).length}});var F,G=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,H=r.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||F,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:G.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof r?b[0]:b,r.merge(this,r.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),C.test(e[1])&&r.isPlainObject(b))for(e in b)r.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&(this[0]=f,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):r.isFunction(a)?void 0!==c.ready?c.ready(a):a(r):r.makeArray(a,this)};H.prototype=r.fn,F=r(d);var I=/^(?:parents|prev(?:Until|All))/,J={children:!0,contents:!0,next:!0,prev:!0};r.fn.extend({has:function(a){var b=r(a,this),c=b.length;return this.filter(function(){for(var a=0;a<c;a++)if(r.contains(this,b[a]))return!0})},closest:function(a,b){var c,d=0,e=this.length,f=[],g="string"!=typeof a&&r(a);if(!A.test(a))for(;d<e;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&r.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?r.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?i.call(r(a),this[0]):i.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(r.uniqueSort(r.merge(this.get(),r(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function K(a,b){while((a=a[b])&&1!==a.nodeType);return a}r.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return y(a,"parentNode")},parentsUntil:function(a,b,c){return y(a,"parentNode",c)},next:function(a){return K(a,"nextSibling")},prev:function(a){return K(a,"previousSibling")},nextAll:function(a){return y(a,"nextSibling")},prevAll:function(a){return y(a,"previousSibling")},nextUntil:function(a,b,c){return y(a,"nextSibling",c)},prevUntil:function(a,b,c){return y(a,"previousSibling",c)},siblings:function(a){return z((a.parentNode||{}).firstChild,a)},children:function(a){return z(a.firstChild)},contents:function(a){return B(a,"iframe")?a.contentDocument:(B(a,"template")&&(a=a.content||a),r.merge([],a.childNodes))}},function(a,b){r.fn[a]=function(c,d){var e=r.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=r.filter(d,e)),this.length>1&&(J[a]||r.uniqueSort(e),I.test(a)&&e.reverse()),this.pushStack(e)}});var L=/[^\\x20\\t\\r\\n\\f]+/g;function M(a){var b={};return r.each(a.match(L)||[],function(a,c){b[c]=!0}),b}r.Callbacks=function(a){a="string"==typeof a?M(a):r.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=e||a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){r.each(b,function(b,c){r.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==r.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return r.each(arguments,function(a,b){var c;while((c=r.inArray(b,f,c))>-1)f.splice(c,1),c<=h&&h--}),this},has:function(a){return a?r.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||b||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j};function N(a){return a}function O(a){throw a}function P(a,b,c,d){var e;try{a&&r.isFunction(e=a.promise)?e.call(a).done(b).fail(c):a&&r.isFunction(e=a.then)?e.call(a,b,c):b.apply(void 0,[a].slice(d))}catch(a){c.apply(void 0,[a])}}r.extend({Deferred:function(b){var c=[["notify","progress",r.Callbacks("memory"),r.Callbacks("memory"),2],["resolve","done",r.Callbacks("once memory"),r.Callbacks("once memory"),0,"resolved"],["reject","fail",r.Callbacks("once memory"),r.Callbacks("once memory"),1,"rejected"]],d="pending",e={state:function(){return d},always:function(){return f.done(arguments).fail(arguments),this},"catch":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return r.Deferred(function(b){r.each(c,function(c,d){var e=r.isFunction(a[d[4]])&&a[d[4]];f[d[1]](function(){var a=e&&e.apply(this,arguments);a&&r.isFunction(a.promise)?a.promise().progress(b.notify).done(b.resolve).fail(b.reject):b[d[0]+"With"](this,e?[a]:arguments)})}),a=null}).promise()},then:function(b,d,e){var f=0;function g(b,c,d,e){return function(){var h=this,i=arguments,j=function(){var a,j;if(!(b<f)){if(a=d.apply(h,i),a===c.promise())throw new TypeError("Thenable self-resolution");j=a&&("object"==typeof a||"function"==typeof a)&&a.then,r.isFunction(j)?e?j.call(a,g(f,c,N,e),g(f,c,O,e)):(f++,j.call(a,g(f,c,N,e),g(f,c,O,e),g(f,c,N,c.notifyWith))):(d!==N&&(h=void 0,i=[a]),(e||c.resolveWith)(h,i))}},k=e?j:function(){try{j()}catch(a){r.Deferred.exceptionHook&&r.Deferred.exceptionHook(a,k.stackTrace),b+1>=f&&(d!==O&&(h=void 0,i=[a]),c.rejectWith(h,i))}};b?k():(r.Deferred.getStackHook&&(k.stackTrace=r.Deferred.getStackHook()),a.setTimeout(k))}}return r.Deferred(function(a){c[0][3].add(g(0,a,r.isFunction(e)?e:N,a.notifyWith)),c[1][3].add(g(0,a,r.isFunction(b)?b:N)),c[2][3].add(g(0,a,r.isFunction(d)?d:O))}).promise()},promise:function(a){return null!=a?r.extend(a,e):e}},f={};return r.each(c,function(a,b){var g=b[2],h=b[5];e[b[1]]=g.add,h&&g.add(function(){d=h},c[3-a][2].disable,c[0][2].lock),g.add(b[3].fire),f[b[0]]=function(){return f[b[0]+"With"](this===f?void 0:this,arguments),this},f[b[0]+"With"]=g.fireWith}),e.promise(f),b&&b.call(f,f),f},when:function(a){var b=arguments.length,c=b,d=Array(c),e=f.call(arguments),g=r.Deferred(),h=function(a){return function(c){d[a]=this,e[a]=arguments.length>1?f.call(arguments):c,--b||g.resolveWith(d,e)}};if(b<=1&&(P(a,g.done(h(c)).resolve,g.reject,!b),"pending"===g.state()||r.isFunction(e[c]&&e[c].then)))return g.then();while(c--)P(e[c],h(c),g.reject);return g.promise()}});var Q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook=function(b,c){a.console&&a.console.warn&&b&&Q.test(b.name)&&a.console.warn("jQuery.Deferred exception: "+b.message,b.stack,c)},r.readyException=function(b){a.setTimeout(function(){throw b})};var R=r.Deferred();r.fn.ready=function(a){return R.then(a)["catch"](function(a){r.readyException(a)}),this},r.extend({isReady:!1,readyWait:1,ready:function(a){(a===!0?--r.readyWait:r.isReady)||(r.isReady=!0,a!==!0&&--r.readyWait>0||R.resolveWith(d,[r]))}}),r.ready.then=R.then;function S(){d.removeEventListener("DOMContentLoaded",S),
a.removeEventListener("load",S),r.ready()}"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(r.ready):(d.addEventListener("DOMContentLoaded",S),a.addEventListener("load",S));var T=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===r.type(c)){e=!0;for(h in c)T(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,r.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(r(a),c)})),b))for(;h<i;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},U=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function V(){this.expando=r.expando+V.uid++}V.uid=1,V.prototype={cache:function(a){var b=a[this.expando];return b||(b={},U(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[r.camelCase(b)]=c;else for(d in b)e[r.camelCase(d)]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][r.camelCase(b)]},access:function(a,b,c){return void 0===b||b&&"string"==typeof b&&void 0===c?this.get(a,b):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d=a[this.expando];if(void 0!==d){if(void 0!==b){Array.isArray(b)?b=b.map(r.camelCase):(b=r.camelCase(b),b=b in d?[b]:b.match(L)||[]),c=b.length;while(c--)delete d[b[c]]}(void 0===b||r.isEmptyObject(d))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!r.isEmptyObject(b)}};var W=new V,X=new V,Y=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,Z=/[A-Z]/g;function $(a){return"true"===a||"false"!==a&&("null"===a?null:a===+a+""?+a:Y.test(a)?JSON.parse(a):a)}function _(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Z,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c=$(c)}catch(e){}X.set(a,b,c)}else c=void 0;return c}r.extend({hasData:function(a){return X.hasData(a)||W.hasData(a)},data:function(a,b,c){return X.access(a,b,c)},removeData:function(a,b){X.remove(a,b)},_data:function(a,b,c){return W.access(a,b,c)},_removeData:function(a,b){W.remove(a,b)}}),r.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=X.get(f),1===f.nodeType&&!W.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=r.camelCase(d.slice(5)),_(f,d,e[d])));W.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){X.set(this,a)}):T(this,function(b){var c;if(f&&void 0===b){if(c=X.get(f,a),void 0!==c)return c;if(c=_(f,a),void 0!==c)return c}else this.each(function(){X.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){X.remove(this,a)})}}),r.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=W.get(a,b),c&&(!d||Array.isArray(c)?d=W.access(a,b,r.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=r.queue(a,b),d=c.length,e=c.shift(),f=r._queueHooks(a,b),g=function(){r.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return W.get(a,c)||W.access(a,c,{empty:r.Callbacks("once memory").add(function(){W.remove(a,[b+"queue",c])})})}}),r.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?r.queue(this[0],a):void 0===b?this:this.each(function(){var c=r.queue(this,a,b);r._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&r.dequeue(this,a)})},dequeue:function(a){return this.each(function(){r.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=r.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=W.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var aa=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,ba=new RegExp("^(?:([+-])=|)("+aa+")([a-z%]*)$","i"),ca=["Top","Right","Bottom","Left"],da=function(a,b){return a=b||a,"none"===a.style.display||""===a.style.display&&r.contains(a.ownerDocument,a)&&"none"===r.css(a,"display")},ea=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};function fa(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return r.css(a,b,"")},i=h(),j=c&&c[3]||(r.cssNumber[b]?"":"px"),k=(r.cssNumber[b]||"px"!==j&&+i)&&ba.exec(r.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,r.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var ga={};function ha(a){var b,c=a.ownerDocument,d=a.nodeName,e=ga[d];return e?e:(b=c.body.appendChild(c.createElement(d)),e=r.css(b,"display"),b.parentNode.removeChild(b),"none"===e&&(e="block"),ga[d]=e,e)}function ia(a,b){for(var c,d,e=[],f=0,g=a.length;f<g;f++)d=a[f],d.style&&(c=d.style.display,b?("none"===c&&(e[f]=W.get(d,"display")||null,e[f]||(d.style.display="")),""===d.style.display&&da(d)&&(e[f]=ha(d))):"none"!==c&&(e[f]="none",W.set(d,"display",c)));for(f=0;f<g;f++)null!=e[f]&&(a[f].style.display=e[f]);return a}r.fn.extend({show:function(){return ia(this,!0)},hide:function(){return ia(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){da(this)?r(this).show():r(this).hide()})}});var ja=/^(?:checkbox|radio)$/i,ka=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i,la=/^$|\\/(?:java|ecma)script/i,ma={option:[1,"<select multiple=\'multiple\'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ma.optgroup=ma.option,ma.tbody=ma.tfoot=ma.colgroup=ma.caption=ma.thead,ma.th=ma.td;function na(a,b){var c;return c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[],void 0===b||b&&B(a,b)?r.merge([a],c):c}function oa(a,b){for(var c=0,d=a.length;c<d;c++)W.set(a[c],"globalEval",!b||W.get(b[c],"globalEval"))}var pa=/<|&#?\\w+;/;function qa(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],n=0,o=a.length;n<o;n++)if(f=a[n],f||0===f)if("object"===r.type(f))r.merge(m,f.nodeType?[f]:f);else if(pa.test(f)){g=g||l.appendChild(b.createElement("div")),h=(ka.exec(f)||["",""])[1].toLowerCase(),i=ma[h]||ma._default,g.innerHTML=i[1]+r.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;r.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",n=0;while(f=m[n++])if(d&&r.inArray(f,d)>-1)e&&e.push(f);else if(j=r.contains(f.ownerDocument,f),g=na(l.appendChild(f),"script"),j&&oa(g),c){k=0;while(f=g[k++])la.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),o.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",o.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var ra=d.documentElement,sa=/^key/,ta=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ua=/^([^.]*)(?:\\.(.+)|)/;function va(){return!0}function wa(){return!1}function xa(){try{return d.activeElement}catch(a){}}function ya(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ya(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=wa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return r().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=r.guid++)),a.each(function(){r.event.add(this,b,e,d,c)})}r.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=W.get(a);if(q){c.handler&&(f=c,c=f.handler,e=f.selector),e&&r.find.matchesSelector(ra,e),c.guid||(c.guid=r.guid++),(i=q.events)||(i=q.events={}),(g=q.handle)||(g=q.handle=function(b){return"undefined"!=typeof r&&r.event.triggered!==b.type?r.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(L)||[""],j=b.length;while(j--)h=ua.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n&&(l=r.event.special[n]||{},n=(e?l.delegateType:l.bindType)||n,l=r.event.special[n]||{},k=r.extend({type:n,origType:p,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&r.expr.match.needsContext.test(e),namespace:o.join(".")},f),(m=i[n])||(m=i[n]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,o,g)!==!1||a.addEventListener&&a.addEventListener(n,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),r.event.global[n]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=W.hasData(a)&&W.get(a);if(q&&(i=q.events)){b=(b||"").match(L)||[""],j=b.length;while(j--)if(h=ua.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n){l=r.event.special[n]||{},n=(d?l.delegateType:l.bindType)||n,m=i[n]||[],h=h[2]&&new RegExp("(^|\\\\.)"+o.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&p!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,o,q.handle)!==!1||r.removeEvent(a,n,q.handle),delete i[n])}else for(n in i)r.event.remove(a,n+b[j],c,d,!0);r.isEmptyObject(i)&&W.remove(a,"handle events")}},dispatch:function(a){var b=r.event.fix(a),c,d,e,f,g,h,i=new Array(arguments.length),j=(W.get(this,"events")||{})[b.type]||[],k=r.event.special[b.type]||{};for(i[0]=b,c=1;c<arguments.length;c++)i[c]=arguments[c];if(b.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,b)!==!1){h=r.event.handlers.call(this,b,j),c=0;while((f=h[c++])&&!b.isPropagationStopped()){b.currentTarget=f.elem,d=0;while((g=f.handlers[d++])&&!b.isImmediatePropagationStopped())b.rnamespace&&!b.rnamespace.test(g.namespace)||(b.handleObj=g,b.data=g.data,e=((r.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(b.result=e)===!1&&(b.preventDefault(),b.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,b),b.result}},handlers:function(a,b){var c,d,e,f,g,h=[],i=b.delegateCount,j=a.target;if(i&&j.nodeType&&!("click"===a.type&&a.button>=1))for(;j!==this;j=j.parentNode||this)if(1===j.nodeType&&("click"!==a.type||j.disabled!==!0)){for(f=[],g={},c=0;c<i;c++)d=b[c],e=d.selector+" ",void 0===g[e]&&(g[e]=d.needsContext?r(e,this).index(j)>-1:r.find(e,this,null,[j]).length),g[e]&&f.push(d);f.length&&h.push({elem:j,handlers:f})}return j=this,i<b.length&&h.push({elem:j,handlers:b.slice(i)}),h},addProp:function(a,b){Object.defineProperty(r.Event.prototype,a,{enumerable:!0,configurable:!0,get:r.isFunction(b)?function(){if(this.originalEvent)return b(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[a]},set:function(b){Object.defineProperty(this,a,{enumerable:!0,configurable:!0,writable:!0,value:b})}})},fix:function(a){return a[r.expando]?a:new r.Event(a)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==xa()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===xa()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&B(this,"input"))return this.click(),!1},_default:function(a){return B(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},r.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},r.Event=function(a,b){return this instanceof r.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?va:wa,this.target=a.target&&3===a.target.nodeType?a.target.parentNode:a.target,this.currentTarget=a.currentTarget,this.relatedTarget=a.relatedTarget):this.type=a,b&&r.extend(this,b),this.timeStamp=a&&a.timeStamp||r.now(),void(this[r.expando]=!0)):new r.Event(a,b)},r.Event.prototype={constructor:r.Event,isDefaultPrevented:wa,isPropagationStopped:wa,isImmediatePropagationStopped:wa,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=va,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=va,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=va,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},r.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(a){var b=a.button;return null==a.which&&sa.test(a.type)?null!=a.charCode?a.charCode:a.keyCode:!a.which&&void 0!==b&&ta.test(a.type)?1&b?1:2&b?3:4&b?2:0:a.which}},r.event.addProp),r.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){r.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||r.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),r.fn.extend({on:function(a,b,c,d){return ya(this,a,b,c,d)},one:function(a,b,c,d){return ya(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,r(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=wa),this.each(function(){r.event.remove(this,a,c,b)})}});var za=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,Aa=/<script|<style|<link/i,Ba=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Ca=/^true\\/(.*)/,Da=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;function Ea(a,b){return B(a,"table")&&B(11!==b.nodeType?b:b.firstChild,"tr")?r(">tbody",a)[0]||a:a}function Fa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function Ga(a){var b=Ca.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ha(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(W.hasData(a)&&(f=W.access(a),g=W.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;c<d;c++)r.event.add(b,e,j[e][c])}X.hasData(a)&&(h=X.access(a),i=r.extend({},h),X.set(b,i))}}function Ia(a,b){var c=b.nodeName.toLowerCase();"input"===c&&ja.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function Ja(a,b,c,d){b=g.apply([],b);var e,f,h,i,j,k,l=0,m=a.length,n=m-1,q=b[0],s=r.isFunction(q);if(s||m>1&&"string"==typeof q&&!o.checkClone&&Ba.test(q))return a.each(function(e){var f=a.eq(e);s&&(b[0]=q.call(this,e,f.html())),Ja(f,b,c,d)});if(m&&(e=qa(b,a[0].ownerDocument,!1,a,d),f=e.firstChild,1===e.childNodes.length&&(e=f),f||d)){for(h=r.map(na(e,"script"),Fa),i=h.length;l<m;l++)j=e,l!==n&&(j=r.clone(j,!0,!0),i&&r.merge(h,na(j,"script"))),c.call(a[l],j,l);if(i)for(k=h[h.length-1].ownerDocument,r.map(h,Ga),l=0;l<i;l++)j=h[l],la.test(j.type||"")&&!W.access(j,"globalEval")&&r.contains(k,j)&&(j.src?r._evalUrl&&r._evalUrl(j.src):p(j.textContent.replace(Da,""),k))}return a}function Ka(a,b,c){for(var d,e=b?r.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||r.cleanData(na(d)),d.parentNode&&(c&&r.contains(d.ownerDocument,d)&&oa(na(d,"script")),d.parentNode.removeChild(d));return a}r.extend({htmlPrefilter:function(a){return a.replace(za,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=r.contains(a.ownerDocument,a);if(!(o.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||r.isXMLDoc(a)))for(g=na(h),f=na(a),d=0,e=f.length;d<e;d++)Ia(f[d],g[d]);if(b)if(c)for(f=f||na(a),g=g||na(h),d=0,e=f.length;d<e;d++)Ha(f[d],g[d]);else Ha(a,h);return g=na(h,"script"),g.length>0&&oa(g,!i&&na(a,"script")),h},cleanData:function(a){for(var b,c,d,e=r.event.special,f=0;void 0!==(c=a[f]);f++)if(U(c)){if(b=c[W.expando]){if(b.events)for(d in b.events)e[d]?r.event.remove(c,d):r.removeEvent(c,d,b.handle);c[W.expando]=void 0}c[X.expando]&&(c[X.expando]=void 0)}}}),r.fn.extend({detach:function(a){return Ka(this,a,!0)},remove:function(a){return Ka(this,a)},text:function(a){return T(this,function(a){return void 0===a?r.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return Ja(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ea(this,a);b.appendChild(a)}})},prepend:function(){return Ja(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ea(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ja(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ja(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(r.cleanData(na(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null!=a&&a,b=null==b?a:b,this.map(function(){return r.clone(this,a,b)})},html:function(a){return T(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!Aa.test(a)&&!ma[(ka.exec(a)||["",""])[1].toLowerCase()]){a=r.htmlPrefilter(a);try{for(;c<d;c++)b=this[c]||{},1===b.nodeType&&(r.cleanData(na(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ja(this,arguments,function(b){var c=this.parentNode;r.inArray(this,a)<0&&(r.cleanData(na(this)),c&&c.replaceChild(b,this))},a)}}),r.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){r.fn[a]=function(a){for(var c,d=[],e=r(a),f=e.length-1,g=0;g<=f;g++)c=g===f?this:this.clone(!0),r(e[g])[b](c),h.apply(d,c.get());return this.pushStack(d)}});var La=/^margin/,Ma=new RegExp("^("+aa+")(?!px)[a-z%]+$","i"),Na=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)};!function(){function b(){if(i){i.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",i.innerHTML="",ra.appendChild(h);var b=a.getComputedStyle(i);c="1%"!==b.top,g="2px"===b.marginLeft,e="4px"===b.width,i.style.marginRight="50%",f="4px"===b.marginRight,ra.removeChild(h),i=null}}var c,e,f,g,h=d.createElement("div"),i=d.createElement("div");i.style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",o.clearCloneStyle="content-box"===i.style.backgroundClip,h.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",h.appendChild(i),r.extend(o,{pixelPosition:function(){return b(),c},boxSizingReliable:function(){return b(),e},pixelMarginRight:function(){return b(),f},reliableMarginLeft:function(){return b(),g}}))}();function Oa(a,b,c){var d,e,f,g,h=a.style;return c=c||Na(a),c&&(g=c.getPropertyValue(b)||c[b],""!==g||r.contains(a.ownerDocument,a)||(g=r.style(a,b)),!o.pixelMarginRight()&&Ma.test(g)&&La.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function Pa(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Qa=/^(none|table(?!-c[ea]).+)/,Ra=/^--/,Sa={position:"absolute",visibility:"hidden",display:"block"},Ta={letterSpacing:"0",fontWeight:"400"},Ua=["Webkit","Moz","ms"],Va=d.createElement("div").style;function Wa(a){if(a in Va)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ua.length;while(c--)if(a=Ua[c]+b,a in Va)return a}function Xa(a){var b=r.cssProps[a];return b||(b=r.cssProps[a]=Wa(a)||a),b}function Ya(a,b,c){var d=ba.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Za(a,b,c,d,e){var f,g=0;for(f=c===(d?"border":"content")?4:"width"===b?1:0;f<4;f+=2)"margin"===c&&(g+=r.css(a,c+ca[f],!0,e)),d?("content"===c&&(g-=r.css(a,"padding"+ca[f],!0,e)),"margin"!==c&&(g-=r.css(a,"border"+ca[f]+"Width",!0,e))):(g+=r.css(a,"padding"+ca[f],!0,e),"padding"!==c&&(g+=r.css(a,"border"+ca[f]+"Width",!0,e)));return g}function $a(a,b,c){var d,e=Na(a),f=Oa(a,b,e),g="border-box"===r.css(a,"boxSizing",!1,e);return Ma.test(f)?f:(d=g&&(o.boxSizingReliable()||f===a.style[b]),"auto"===f&&(f=a["offset"+b[0].toUpperCase()+b.slice(1)]),f=parseFloat(f)||0,f+Za(a,b,c||(g?"border":"content"),d,e)+"px")}r.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Oa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=r.camelCase(b),i=Ra.test(b),j=a.style;return i||(b=Xa(h)),g=r.cssHooks[b]||r.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:j[b]:(f=typeof c,"string"===f&&(e=ba.exec(c))&&e[1]&&(c=fa(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(r.cssNumber[h]?"":"px")),o.clearCloneStyle||""!==c||0!==b.indexOf("background")||(j[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i?j.setProperty(b,c):j[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=r.camelCase(b),i=Ra.test(b);return i||(b=Xa(h)),g=r.cssHooks[b]||r.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Oa(a,b,d)),"normal"===e&&b in Ta&&(e=Ta[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),r.each(["height","width"],function(a,b){r.cssHooks[b]={get:function(a,c,d){if(c)return!Qa.test(r.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?$a(a,b,d):ea(a,Sa,function(){return $a(a,b,d)})},set:function(a,c,d){var e,f=d&&Na(a),g=d&&Za(a,b,d,"border-box"===r.css(a,"boxSizing",!1,f),f);return g&&(e=ba.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=r.css(a,b)),Ya(a,c,g)}}}),r.cssHooks.marginLeft=Pa(o.reliableMarginLeft,function(a,b){if(b)return(parseFloat(Oa(a,"marginLeft"))||a.getBoundingClientRect().left-ea(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px"}),r.each({margin:"",padding:"",border:"Width"},function(a,b){r.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];d<4;d++)e[a+ca[d]+b]=f[d]||f[d-2]||f[0];return e}},La.test(a)||(r.cssHooks[a+b].set=Ya)}),r.fn.extend({css:function(a,b){return T(this,function(a,b,c){var d,e,f={},g=0;if(Array.isArray(b)){for(d=Na(a),e=b.length;g<e;g++)f[b[g]]=r.css(a,b[g],!1,d);return f}return void 0!==c?r.style(a,b,c):r.css(a,b)},a,b,arguments.length>1)}});function _a(a,b,c,d,e){return new _a.prototype.init(a,b,c,d,e)}r.Tween=_a,_a.prototype={constructor:_a,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||r.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(r.cssNumber[c]?"":"px")},cur:function(){var a=_a.propHooks[this.prop];return a&&a.get?a.get(this):_a.propHooks._default.get(this)},run:function(a){var b,c=_a.propHooks[this.prop];return this.options.duration?this.pos=b=r.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):_a.propHooks._default.set(this),this}},_a.prototype.init.prototype=_a.prototype,_a.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=r.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){r.fx.step[a.prop]?r.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[r.cssProps[a.prop]]&&!r.cssHooks[a.prop]?a.elem[a.prop]=a.now:r.style(a.elem,a.prop,a.now+a.unit)}}},_a.propHooks.scrollTop=_a.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},r.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},r.fx=_a.prototype.init,r.fx.step={};var ab,bb,cb=/^(?:toggle|show|hide)$/,db=/queueHooks$/;function eb(){bb&&(d.hidden===!1&&a.requestAnimationFrame?a.requestAnimationFrame(eb):a.setTimeout(eb,r.fx.interval),r.fx.tick())}function fb(){return a.setTimeout(function(){ab=void 0}),ab=r.now()}function gb(a,b){var c,d=0,e={height:a};for(b=b?1:0;d<4;d+=2-b)c=ca[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function hb(a,b,c){for(var d,e=(kb.tweeners[b]||[]).concat(kb.tweeners["*"]),f=0,g=e.length;f<g;f++)if(d=e[f].call(c,b,a))return d}function ib(a,b,c){var d,e,f,g,h,i,j,k,l="width"in b||"height"in b,m=this,n={},o=a.style,p=a.nodeType&&da(a),q=W.get(a,"fxshow");c.queue||(g=r._queueHooks(a,"fx"),null==g.unqueued&&(g.unqueued=0,h=g.empty.fire,g.empty.fire=function(){g.unqueued||h()}),g.unqueued++,m.always(function(){m.always(function(){g.unqueued--,r.queue(a,"fx").length||g.empty.fire()})}));for(d in b)if(e=b[d],cb.test(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}n[d]=q&&q[d]||r.style(a,d)}if(i=!r.isEmptyObject(b),i||!r.isEmptyObject(n)){l&&1===a.nodeType&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=q&&q.display,null==j&&(j=W.get(a,"display")),k=r.css(a,"display"),"none"===k&&(j?k=j:(ia([a],!0),j=a.style.display||j,k=r.css(a,"display"),ia([a]))),("inline"===k||"inline-block"===k&&null!=j)&&"none"===r.css(a,"float")&&(i||(m.done(function(){o.display=j}),null==j&&(k=o.display,j="none"===k?"":k)),o.display="inline-block")),c.overflow&&(o.overflow="hidden",m.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]})),i=!1;for(d in n)i||(q?"hidden"in q&&(p=q.hidden):q=W.access(a,"fxshow",{display:j}),f&&(q.hidden=!p),p&&ia([a],!0),m.done(function(){p||ia([a]),W.remove(a,"fxshow");for(d in n)r.style(a,d,n[d])})),i=hb(p?q[d]:0,d,m),d in q||(q[d]=i.start,p&&(i.end=i.start,i.start=0))}}function jb(a,b){var c,d,e,f,g;for(c in a)if(d=r.camelCase(c),e=b[d],f=a[c],Array.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=r.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kb(a,b,c){var d,e,f=0,g=kb.prefilters.length,h=r.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=ab||fb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;g<i;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),f<1&&i?c:(i||h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:r.extend({},b),opts:r.extend(!0,{specialEasing:{},easing:r.easing._default},c),originalProperties:b,originalOptions:c,startTime:ab||fb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=r.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;c<d;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jb(k,j.opts.specialEasing);f<g;f++)if(d=kb.prefilters[f].call(j,a,k,j.opts))return r.isFunction(d.stop)&&(r._queueHooks(j.elem,j.opts.queue).stop=r.proxy(d.stop,d)),d;return r.map(k,hb,j),r.isFunction(j.opts.start)&&j.opts.start.call(a,j),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always),r.fx.timer(r.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j}r.Animation=r.extend(kb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return fa(c.elem,a,ba.exec(b),c),c}]},tweener:function(a,b){r.isFunction(a)?(b=a,a=["*"]):a=a.match(L);for(var c,d=0,e=a.length;d<e;d++)c=a[d],kb.tweeners[c]=kb.tweeners[c]||[],kb.tweeners[c].unshift(b)},prefilters:[ib],prefilter:function(a,b){b?kb.prefilters.unshift(a):kb.prefilters.push(a)}}),r.speed=function(a,b,c){var d=a&&"object"==typeof a?r.extend({},a):{complete:c||!c&&b||r.isFunction(a)&&a,duration:a,easing:c&&b||b&&!r.isFunction(b)&&b};return r.fx.off?d.duration=0:"number"!=typeof d.duration&&(d.duration in r.fx.speeds?d.duration=r.fx.speeds[d.duration]:d.duration=r.fx.speeds._default),null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){r.isFunction(d.old)&&d.old.call(this),d.queue&&r.dequeue(this,d.queue)},d},r.fn.extend({fadeTo:function(a,b,c,d){return this.filter(da).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=r.isEmptyObject(a),f=r.speed(b,c,d),g=function(){var b=kb(this,r.extend({},a),f);(e||W.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=r.timers,g=W.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&db.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||r.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=W.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=r.timers,g=d?d.length:0;for(c.finish=!0,r.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;b<g;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),r.each(["toggle","show","hide"],function(a,b){var c=r.fn[b];r.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gb(b,!0),a,d,e)}}),r.each({slideDown:gb("show"),slideUp:gb("hide"),slideToggle:gb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){r.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),r.timers=[],r.fx.tick=function(){var a,b=0,c=r.timers;for(ab=r.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||r.fx.stop(),ab=void 0},r.fx.timer=function(a){r.timers.push(a),r.fx.start()},r.fx.interval=13,r.fx.start=function(){bb||(bb=!0,eb())},r.fx.stop=function(){bb=null},r.fx.speeds={slow:600,fast:200,_default:400},r.fn.delay=function(b,c){return b=r.fx?r.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",o.checkOn=""!==a.value,o.optSelected=c.selected,a=d.createElement("input"),a.value="t",a.type="radio",o.radioValue="t"===a.value}();var lb,mb=r.expr.attrHandle;r.fn.extend({attr:function(a,b){return T(this,r.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){r.removeAttr(this,a)})}}),r.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?r.prop(a,b,c):(1===f&&r.isXMLDoc(a)||(e=r.attrHooks[b.toLowerCase()]||(r.expr.match.bool.test(b)?lb:void 0)),void 0!==c?null===c?void r.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=r.find.attr(a,b),
null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!o.radioValue&&"radio"===b&&B(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d=0,e=b&&b.match(L);if(e&&1===a.nodeType)while(c=e[d++])a.removeAttribute(c)}}),lb={set:function(a,b,c){return b===!1?r.removeAttr(a,c):a.setAttribute(c,c),c}},r.each(r.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=mb[b]||r.find.attr;mb[b]=function(a,b,d){var e,f,g=b.toLowerCase();return d||(f=mb[g],mb[g]=e,e=null!=c(a,b,d)?g:null,mb[g]=f),e}});var nb=/^(?:input|select|textarea|button)$/i,ob=/^(?:a|area)$/i;r.fn.extend({prop:function(a,b){return T(this,r.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[r.propFix[a]||a]})}}),r.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&r.isXMLDoc(a)||(b=r.propFix[b]||b,e=r.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=r.find.attr(a,"tabindex");return b?parseInt(b,10):nb.test(a.nodeName)||ob.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),o.optSelected||(r.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),r.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){r.propFix[this.toLowerCase()]=this});function pb(a){var b=a.match(L)||[];return b.join(" ")}function qb(a){return a.getAttribute&&a.getAttribute("class")||""}r.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).addClass(a.call(this,b,qb(this)))});if("string"==typeof a&&a){b=a.match(L)||[];while(c=this[i++])if(e=qb(c),d=1===c.nodeType&&" "+pb(e)+" "){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=pb(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).removeClass(a.call(this,b,qb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(L)||[];while(c=this[i++])if(e=qb(c),d=1===c.nodeType&&" "+pb(e)+" "){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=pb(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):r.isFunction(a)?this.each(function(c){r(this).toggleClass(a.call(this,c,qb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=r(this),f=a.match(L)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=qb(this),b&&W.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":W.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+pb(qb(c))+" ").indexOf(b)>-1)return!0;return!1}});var rb=/\\r/g;r.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=r.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,r(this).val()):a,null==e?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=r.map(e,function(a){return null==a?"":a+""})),b=r.valHooks[this.type]||r.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=r.valHooks[e.type]||r.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(rb,""):null==c?"":c)}}}),r.extend({valHooks:{option:{get:function(a){var b=r.find.attr(a,"value");return null!=b?b:pb(r.text(a))}},select:{get:function(a){var b,c,d,e=a.options,f=a.selectedIndex,g="select-one"===a.type,h=g?null:[],i=g?f+1:e.length;for(d=f<0?i:g?f:0;d<i;d++)if(c=e[d],(c.selected||d===f)&&!c.disabled&&(!c.parentNode.disabled||!B(c.parentNode,"optgroup"))){if(b=r(c).val(),g)return b;h.push(b)}return h},set:function(a,b){var c,d,e=a.options,f=r.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=r.inArray(r.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),r.each(["radio","checkbox"],function(){r.valHooks[this]={set:function(a,b){if(Array.isArray(b))return a.checked=r.inArray(r(a).val(),b)>-1}},o.checkOn||(r.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var sb=/^(?:focusinfocus|focusoutblur)$/;r.extend(r.event,{trigger:function(b,c,e,f){var g,h,i,j,k,m,n,o=[e||d],p=l.call(b,"type")?b.type:b,q=l.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!sb.test(p+r.event.triggered)&&(p.indexOf(".")>-1&&(q=p.split("."),p=q.shift(),q.sort()),k=p.indexOf(":")<0&&"on"+p,b=b[r.expando]?b:new r.Event(p,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=q.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\\\.)"+q.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:r.makeArray(c,[b]),n=r.event.special[p]||{},f||!n.trigger||n.trigger.apply(e,c)!==!1)){if(!f&&!n.noBubble&&!r.isWindow(e)){for(j=n.delegateType||p,sb.test(j+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),i=h;i===(e.ownerDocument||d)&&o.push(i.defaultView||i.parentWindow||a)}g=0;while((h=o[g++])&&!b.isPropagationStopped())b.type=g>1?j:n.bindType||p,m=(W.get(h,"events")||{})[b.type]&&W.get(h,"handle"),m&&m.apply(h,c),m=k&&h[k],m&&m.apply&&U(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=p,f||b.isDefaultPrevented()||n._default&&n._default.apply(o.pop(),c)!==!1||!U(e)||k&&r.isFunction(e[p])&&!r.isWindow(e)&&(i=e[k],i&&(e[k]=null),r.event.triggered=p,e[p](),r.event.triggered=void 0,i&&(e[k]=i)),b.result}},simulate:function(a,b,c){var d=r.extend(new r.Event,c,{type:a,isSimulated:!0});r.event.trigger(d,null,b)}}),r.fn.extend({trigger:function(a,b){return this.each(function(){r.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];if(c)return r.event.trigger(a,b,c,!0)}}),r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(a,b){r.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),r.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),o.focusin="onfocusin"in a,o.focusin||r.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){r.event.simulate(b,a.target,r.event.fix(a))};r.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=W.access(d,b);e||d.addEventListener(a,c,!0),W.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=W.access(d,b)-1;e?W.access(d,b,e):(d.removeEventListener(a,c,!0),W.remove(d,b))}}});var tb=a.location,ub=r.now(),vb=/\\?/;r.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||r.error("Invalid XML: "+b),c};var wb=/\\[\\]$/,xb=/\\r?\\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(Array.isArray(b))r.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==r.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}r.param=function(a,b){var c,d=[],e=function(a,b){var c=r.isFunction(b)?b():b;d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(null==c?"":c)};if(Array.isArray(a)||a.jquery&&!r.isPlainObject(a))r.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&")},r.fn.extend({serialize:function(){return r.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=r.prop(this,"elements");return a?r.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!r(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!ja.test(a))}).map(function(a,b){var c=r(this).val();return null==c?null:Array.isArray(c)?r.map(c,function(a){return{name:b.name,value:a.replace(xb,"\\r\\n")}}):{name:b.name,value:c.replace(xb,"\\r\\n")}}).get()}});var Bb=/%20/g,Cb=/#.*$/,Db=/([?&])_=[^&]*/,Eb=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,Fb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Gb=/^(?:GET|HEAD)$/,Hb=/^\\/\\//,Ib={},Jb={},Kb="*/".concat("*"),Lb=d.createElement("a");Lb.href=tb.href;function Mb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(L)||[];if(r.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Nb(a,b,c,d){var e={},f=a===Jb;function g(h){var i;return e[h]=!0,r.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Ob(a,b){var c,d,e=r.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&r.extend(!0,a,d),a}function Pb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}if(f)return f!==i[0]&&i.unshift(f),c[f]}function Qb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}r.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:tb.href,type:"GET",isLocal:Fb.test(tb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":r.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Ob(Ob(a,r.ajaxSettings),b):Ob(r.ajaxSettings,a)},ajaxPrefilter:Mb(Ib),ajaxTransport:Mb(Jb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m,n,o=r.ajaxSetup({},c),p=o.context||o,q=o.context&&(p.nodeType||p.jquery)?r(p):r.event,s=r.Deferred(),t=r.Callbacks("once memory"),u=o.statusCode||{},v={},w={},x="canceled",y={readyState:0,getResponseHeader:function(a){var b;if(k){if(!h){h={};while(b=Eb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return k?g:null},setRequestHeader:function(a,b){return null==k&&(a=w[a.toLowerCase()]=w[a.toLowerCase()]||a,v[a]=b),this},overrideMimeType:function(a){return null==k&&(o.mimeType=a),this},statusCode:function(a){var b;if(a)if(k)y.always(a[y.status]);else for(b in a)u[b]=[u[b],a[b]];return this},abort:function(a){var b=a||x;return e&&e.abort(b),A(0,b),this}};if(s.promise(y),o.url=((b||o.url||tb.href)+"").replace(Hb,tb.protocol+"//"),o.type=c.method||c.type||o.method||o.type,o.dataTypes=(o.dataType||"*").toLowerCase().match(L)||[""],null==o.crossDomain){j=d.createElement("a");try{j.href=o.url,j.href=j.href,o.crossDomain=Lb.protocol+"//"+Lb.host!=j.protocol+"//"+j.host}catch(z){o.crossDomain=!0}}if(o.data&&o.processData&&"string"!=typeof o.data&&(o.data=r.param(o.data,o.traditional)),Nb(Ib,o,c,y),k)return y;l=r.event&&o.global,l&&0===r.active++&&r.event.trigger("ajaxStart"),o.type=o.type.toUpperCase(),o.hasContent=!Gb.test(o.type),f=o.url.replace(Cb,""),o.hasContent?o.data&&o.processData&&0===(o.contentType||"").indexOf("application/x-www-form-urlencoded")&&(o.data=o.data.replace(Bb,"+")):(n=o.url.slice(f.length),o.data&&(f+=(vb.test(f)?"&":"?")+o.data,delete o.data),o.cache===!1&&(f=f.replace(Db,"$1"),n=(vb.test(f)?"&":"?")+"_="+ub++ +n),o.url=f+n),o.ifModified&&(r.lastModified[f]&&y.setRequestHeader("If-Modified-Since",r.lastModified[f]),r.etag[f]&&y.setRequestHeader("If-None-Match",r.etag[f])),(o.data&&o.hasContent&&o.contentType!==!1||c.contentType)&&y.setRequestHeader("Content-Type",o.contentType),y.setRequestHeader("Accept",o.dataTypes[0]&&o.accepts[o.dataTypes[0]]?o.accepts[o.dataTypes[0]]+("*"!==o.dataTypes[0]?", "+Kb+"; q=0.01":""):o.accepts["*"]);for(m in o.headers)y.setRequestHeader(m,o.headers[m]);if(o.beforeSend&&(o.beforeSend.call(p,y,o)===!1||k))return y.abort();if(x="abort",t.add(o.complete),y.done(o.success),y.fail(o.error),e=Nb(Jb,o,c,y)){if(y.readyState=1,l&&q.trigger("ajaxSend",[y,o]),k)return y;o.async&&o.timeout>0&&(i=a.setTimeout(function(){y.abort("timeout")},o.timeout));try{k=!1,e.send(v,A)}catch(z){if(k)throw z;A(-1,z)}}else A(-1,"No Transport");function A(b,c,d,h){var j,m,n,v,w,x=c;k||(k=!0,i&&a.clearTimeout(i),e=void 0,g=h||"",y.readyState=b>0?4:0,j=b>=200&&b<300||304===b,d&&(v=Pb(o,y,d)),v=Qb(o,v,y,j),j?(o.ifModified&&(w=y.getResponseHeader("Last-Modified"),w&&(r.lastModified[f]=w),w=y.getResponseHeader("etag"),w&&(r.etag[f]=w)),204===b||"HEAD"===o.type?x="nocontent":304===b?x="notmodified":(x=v.state,m=v.data,n=v.error,j=!n)):(n=x,!b&&x||(x="error",b<0&&(b=0))),y.status=b,y.statusText=(c||x)+"",j?s.resolveWith(p,[m,x,y]):s.rejectWith(p,[y,x,n]),y.statusCode(u),u=void 0,l&&q.trigger(j?"ajaxSuccess":"ajaxError",[y,o,j?m:n]),t.fireWith(p,[y,x]),l&&(q.trigger("ajaxComplete",[y,o]),--r.active||r.event.trigger("ajaxStop")))}return y},getJSON:function(a,b,c){return r.get(a,b,c,"json")},getScript:function(a,b){return r.get(a,void 0,b,"script")}}),r.each(["get","post"],function(a,b){r[b]=function(a,c,d,e){return r.isFunction(c)&&(e=e||d,d=c,c=void 0),r.ajax(r.extend({url:a,type:b,dataType:e,data:c,success:d},r.isPlainObject(a)&&a))}}),r._evalUrl=function(a){return r.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},r.fn.extend({wrapAll:function(a){var b;return this[0]&&(r.isFunction(a)&&(a=a.call(this[0])),b=r(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this},wrapInner:function(a){return r.isFunction(a)?this.each(function(b){r(this).wrapInner(a.call(this,b))}):this.each(function(){var b=r(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=r.isFunction(a);return this.each(function(c){r(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(a){return this.parent(a).not("body").each(function(){r(this).replaceWith(this.childNodes)}),this}}),r.expr.pseudos.hidden=function(a){return!r.expr.pseudos.visible(a)},r.expr.pseudos.visible=function(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)},r.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Rb={0:200,1223:204},Sb=r.ajaxSettings.xhr();o.cors=!!Sb&&"withCredentials"in Sb,o.ajax=Sb=!!Sb,r.ajaxTransport(function(b){var c,d;if(o.cors||Sb&&!b.crossDomain)return{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Rb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}}),r.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),r.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{"text script":function(a){return r.globalEval(a),a}}}),r.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),r.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=r("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Tb=[],Ub=/(=)\\?(?=&|$)|\\?\\?/;r.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Tb.pop()||r.expando+"_"+ub++;return this[a]=!0,a}}),r.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Ub.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ub.test(b.data)&&"data");if(h||"jsonp"===b.dataTypes[0])return e=b.jsonpCallback=r.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Ub,"$1"+e):b.jsonp!==!1&&(b.url+=(vb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||r.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?r(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Tb.push(e)),g&&r.isFunction(f)&&f(g[0]),g=f=void 0}),"script"}),o.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),r.parseHTML=function(a,b,c){if("string"!=typeof a)return[];"boolean"==typeof b&&(c=b,b=!1);var e,f,g;return b||(o.createHTMLDocument?(b=d.implementation.createHTMLDocument(""),e=b.createElement("base"),e.href=d.location.href,b.head.appendChild(e)):b=d),f=C.exec(a),g=!c&&[],f?[b.createElement(f[1])]:(f=qa([a],b,g),g&&g.length&&r(g).remove(),r.merge([],f.childNodes))},r.fn.load=function(a,b,c){var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=pb(a.slice(h)),a=a.slice(0,h)),r.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&r.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?r("<div>").append(r.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},r.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){r.fn[b]=function(a){return this.on(b,a)}}),r.expr.pseudos.animated=function(a){return r.grep(r.timers,function(b){return a===b.elem}).length},r.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=r.css(a,"position"),l=r(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=r.css(a,"top"),i=r.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),r.isFunction(b)&&(b=b.call(a,c,r.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},r.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){r.offset.setOffset(this,a,b)});var b,c,d,e,f=this[0];if(f)return f.getClientRects().length?(d=f.getBoundingClientRect(),b=f.ownerDocument,c=b.documentElement,e=b.defaultView,{top:d.top+e.pageYOffset-c.clientTop,left:d.left+e.pageXOffset-c.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===r.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),B(a[0],"html")||(d=a.offset()),d={top:d.top+r.css(a[0],"borderTopWidth",!0),left:d.left+r.css(a[0],"borderLeftWidth",!0)}),{top:b.top-d.top-r.css(c,"marginTop",!0),left:b.left-d.left-r.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===r.css(a,"position"))a=a.offsetParent;return a||ra})}}),r.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;r.fn[a]=function(d){return T(this,function(a,d,e){var f;return r.isWindow(a)?f=a:9===a.nodeType&&(f=a.defaultView),void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),r.each(["top","left"],function(a,b){r.cssHooks[b]=Pa(o.pixelPosition,function(a,c){if(c)return c=Oa(a,b),Ma.test(c)?r(a).position()[b]+"px":c})}),r.each({Height:"height",Width:"width"},function(a,b){r.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){r.fn[d]=function(e,f){var g=arguments.length&&(c||"boolean"!=typeof e),h=c||(e===!0||f===!0?"margin":"border");return T(this,function(b,c,e){var f;return r.isWindow(b)?0===d.indexOf("outer")?b["inner"+a]:b.document.documentElement["client"+a]:9===b.nodeType?(f=b.documentElement,Math.max(b.body["scroll"+a],f["scroll"+a],b.body["offset"+a],f["offset"+a],f["client"+a])):void 0===e?r.css(b,c,h):r.style(b,c,e,h)},b,g?e:void 0,g)}})}),r.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),r.holdReady=function(a){a?r.readyWait++:r.ready(!0)},r.isArray=Array.isArray,r.parseJSON=JSON.parse,r.nodeName=B,"function"==typeof define&&define.amd&&define("jquery",[],function(){return r});var Vb=a.jQuery,Wb=a.$;return r.noConflict=function(b){return a.$===r&&(a.$=Wb),b&&a.jQuery===r&&(a.jQuery=Vb),r},b||(a.jQuery=a.$=r),r});
'''

snapshots['test_build_all_docs 44'] = '''.highlight .hll { background-color: #ffffcc }
.highlight  { background: #eeffcc; }
.highlight .c { color: #408090; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #007020; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .ch { color: #408090; font-style: italic } /* Comment.Hashbang */
.highlight .cm { color: #408090; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #007020 } /* Comment.Preproc */
.highlight .cpf { color: #408090; font-style: italic } /* Comment.PreprocFile */
.highlight .c1 { color: #408090; font-style: italic } /* Comment.Single */
.highlight .cs { color: #408090; background-color: #fff0f0 } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #FF0000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #00A000 } /* Generic.Inserted */
.highlight .go { color: #333333 } /* Generic.Output */
.highlight .gp { color: #c65d09; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.highlight .gt { color: #0044DD } /* Generic.Traceback */
.highlight .kc { color: #007020; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #007020; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #007020; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #007020 } /* Keyword.Pseudo */
.highlight .kr { color: #007020; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #902000 } /* Keyword.Type */
.highlight .m { color: #208050 } /* Literal.Number */
.highlight .s { color: #4070a0 } /* Literal.String */
.highlight .na { color: #4070a0 } /* Name.Attribute */
.highlight .nb { color: #007020 } /* Name.Builtin */
.highlight .nc { color: #0e84b5; font-weight: bold } /* Name.Class */
.highlight .no { color: #60add5 } /* Name.Constant */
.highlight .nd { color: #555555; font-weight: bold } /* Name.Decorator */
.highlight .ni { color: #d55537; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #007020 } /* Name.Exception */
.highlight .nf { color: #06287e } /* Name.Function */
.highlight .nl { color: #002070; font-weight: bold } /* Name.Label */
.highlight .nn { color: #0e84b5; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #062873; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #bb60d5 } /* Name.Variable */
.highlight .ow { color: #007020; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mb { color: #208050 } /* Literal.Number.Bin */
.highlight .mf { color: #208050 } /* Literal.Number.Float */
.highlight .mh { color: #208050 } /* Literal.Number.Hex */
.highlight .mi { color: #208050 } /* Literal.Number.Integer */
.highlight .mo { color: #208050 } /* Literal.Number.Oct */
.highlight .sa { color: #4070a0 } /* Literal.String.Affix */
.highlight .sb { color: #4070a0 } /* Literal.String.Backtick */
.highlight .sc { color: #4070a0 } /* Literal.String.Char */
.highlight .dl { color: #4070a0 } /* Literal.String.Delimiter */
.highlight .sd { color: #4070a0; font-style: italic } /* Literal.String.Doc */
.highlight .s2 { color: #4070a0 } /* Literal.String.Double */
.highlight .se { color: #4070a0; font-weight: bold } /* Literal.String.Escape */
.highlight .sh { color: #4070a0 } /* Literal.String.Heredoc */
.highlight .si { color: #70a0d0; font-style: italic } /* Literal.String.Interpol */
.highlight .sx { color: #c65d09 } /* Literal.String.Other */
.highlight .sr { color: #235388 } /* Literal.String.Regex */
.highlight .s1 { color: #4070a0 } /* Literal.String.Single */
.highlight .ss { color: #517918 } /* Literal.String.Symbol */
.highlight .bp { color: #007020 } /* Name.Builtin.Pseudo */
.highlight .fm { color: #06287e } /* Name.Function.Magic */
.highlight .vc { color: #bb60d5 } /* Name.Variable.Class */
.highlight .vg { color: #bb60d5 } /* Name.Variable.Global */
.highlight .vi { color: #bb60d5 } /* Name.Variable.Instance */
.highlight .vm { color: #bb60d5 } /* Name.Variable.Magic */
.highlight .il { color: #208050 } /* Literal.Number.Integer.Long */'''

snapshots['test_build_all_docs 45'] = '''/*
 * searchtools.js_t
 * ~~~~~~~~~~~~~~~~
 *
 * Sphinx JavaScript utilities for the full-text search.
 *
 * :copyright: Copyright 2007-2018 by the Sphinx team, see AUTHORS.
 * :license: BSD, see LICENSE for details.
 *
 */


/* Non-minified version JS is _stemmer.js if file is provided */ 
/**
 * Porter Stemmer
 */
var Stemmer = function() {

  var step2list = {
    ational: 'ate',
    tional: 'tion',
    enci: 'ence',
    anci: 'ance',
    izer: 'ize',
    bli: 'ble',
    alli: 'al',
    entli: 'ent',
    eli: 'e',
    ousli: 'ous',
    ization: 'ize',
    ation: 'ate',
    ator: 'ate',
    alism: 'al',
    iveness: 'ive',
    fulness: 'ful',
    ousness: 'ous',
    aliti: 'al',
    iviti: 'ive',
    biliti: 'ble',
    logi: 'log'
  };

  var step3list = {
    icate: 'ic',
    ative: '',
    alize: 'al',
    iciti: 'ic',
    ical: 'ic',
    ful: '',
    ness: ''
  };

  var c = "[^aeiou]";          // consonant
  var v = "[aeiouy]";          // vowel
  var C = c + "[^aeiouy]*";    // consonant sequence
  var V = v + "[aeiou]*";      // vowel sequence

  var mgr0 = "^(" + C + ")?" + V + C;                      // [C]VC... is m>0
  var meq1 = "^(" + C + ")?" + V + C + "(" + V + ")?$";    // [C]VC[V] is m=1
  var mgr1 = "^(" + C + ")?" + V + C + V + C;              // [C]VCVC... is m>1
  var s_v   = "^(" + C + ")?" + v;                         // vowel in stem

  this.stemWord = function (w) {
    var stem;
    var suffix;
    var firstch;
    var origword = w;

    if (w.length < 3)
      return w;

    var re;
    var re2;
    var re3;
    var re4;

    firstch = w.substr(0,1);
    if (firstch == "y")
      w = firstch.toUpperCase() + w.substr(1);

    // Step 1a
    re = /^(.+?)(ss|i)es$/;
    re2 = /^(.+?)([^s])s$/;

    if (re.test(w))
      w = w.replace(re,"$1$2");
    else if (re2.test(w))
      w = w.replace(re2,"$1$2");

    // Step 1b
    re = /^(.+?)eed$/;
    re2 = /^(.+?)(ed|ing)$/;
    if (re.test(w)) {
      var fp = re.exec(w);
      re = new RegExp(mgr0);
      if (re.test(fp[1])) {
        re = /.$/;
        w = w.replace(re,"");
      }
    }
    else if (re2.test(w)) {
      var fp = re2.exec(w);
      stem = fp[1];
      re2 = new RegExp(s_v);
      if (re2.test(stem)) {
        w = stem;
        re2 = /(at|bl|iz)$/;
        re3 = new RegExp("([^aeiouylsz])\\\\1$");
        re4 = new RegExp("^" + C + v + "[^aeiouwxy]$");
        if (re2.test(w))
          w = w + "e";
        else if (re3.test(w)) {
          re = /.$/;
          w = w.replace(re,"");
        }
        else if (re4.test(w))
          w = w + "e";
      }
    }

    // Step 1c
    re = /^(.+?)y$/;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = new RegExp(s_v);
      if (re.test(stem))
        w = stem + "i";
    }

    // Step 2
    re = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      suffix = fp[2];
      re = new RegExp(mgr0);
      if (re.test(stem))
        w = stem + step2list[suffix];
    }

    // Step 3
    re = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      suffix = fp[2];
      re = new RegExp(mgr0);
      if (re.test(stem))
        w = stem + step3list[suffix];
    }

    // Step 4
    re = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
    re2 = /^(.+?)(s|t)(ion)$/;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = new RegExp(mgr1);
      if (re.test(stem))
        w = stem;
    }
    else if (re2.test(w)) {
      var fp = re2.exec(w);
      stem = fp[1] + fp[2];
      re2 = new RegExp(mgr1);
      if (re2.test(stem))
        w = stem;
    }

    // Step 5
    re = /^(.+?)e$/;
    if (re.test(w)) {
      var fp = re.exec(w);
      stem = fp[1];
      re = new RegExp(mgr1);
      re2 = new RegExp(meq1);
      re3 = new RegExp("^" + C + v + "[^aeiouwxy]$");
      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem))))
        w = stem;
    }
    re = /ll$/;
    re2 = new RegExp(mgr1);
    if (re.test(w) && re2.test(w)) {
      re = /.$/;
      w = w.replace(re,"");
    }

    // and turn initial Y back to y
    if (firstch == "y")
      w = firstch.toLowerCase() + w.substr(1);
    return w;
  }
}



/**
 * Simple result scoring code.
 */
var Scorer = {
  // Implement the following function to further tweak the score for each result
  // The function takes a result array [filename, title, anchor, descr, score]
  // and returns the new score.
  /*
  score: function(result) {
    return result[4];
  },
  */

  // query matches the full name of an object
  objNameMatch: 11,
  // or matches in the last dotted part of the object name
  objPartialMatch: 6,
  // Additive scores depending on the priority of the object
  objPrio: {0:  15,   // used to be importantResults
            1:  5,   // used to be objectResults
            2: -5},  // used to be unimportantResults
  //  Used when the priority is not in the mapping.
  objPrioDefault: 0,

  // query found in title
  title: 15,
  // query found in terms
  term: 5
};





var splitChars = (function() {
    var result = {};
    var singles = [96, 180, 187, 191, 215, 247, 749, 885, 903, 907, 909, 930, 1014, 1648,
         1748, 1809, 2416, 2473, 2481, 2526, 2601, 2609, 2612, 2615, 2653, 2702,
         2706, 2729, 2737, 2740, 2857, 2865, 2868, 2910, 2928, 2948, 2961, 2971,
         2973, 3085, 3089, 3113, 3124, 3213, 3217, 3241, 3252, 3295, 3341, 3345,
         3369, 3506, 3516, 3633, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3761,
         3781, 3912, 4239, 4347, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823,
         4881, 5760, 5901, 5997, 6313, 7405, 8024, 8026, 8028, 8030, 8117, 8125,
         8133, 8181, 8468, 8485, 8487, 8489, 8494, 8527, 11311, 11359, 11687, 11695,
         11703, 11711, 11719, 11727, 11735, 12448, 12539, 43010, 43014, 43019, 43587,
         43696, 43713, 64286, 64297, 64311, 64317, 64319, 64322, 64325, 65141];
    var i, j, start, end;
    for (i = 0; i < singles.length; i++) {
        result[singles[i]] = true;
    }
    var ranges = [[0, 47], [58, 64], [91, 94], [123, 169], [171, 177], [182, 184], [706, 709],
         [722, 735], [741, 747], [751, 879], [888, 889], [894, 901], [1154, 1161],
         [1318, 1328], [1367, 1368], [1370, 1376], [1416, 1487], [1515, 1519], [1523, 1568],
         [1611, 1631], [1642, 1645], [1750, 1764], [1767, 1773], [1789, 1790], [1792, 1807],
         [1840, 1868], [1958, 1968], [1970, 1983], [2027, 2035], [2038, 2041], [2043, 2047],
         [2070, 2073], [2075, 2083], [2085, 2087], [2089, 2307], [2362, 2364], [2366, 2383],
         [2385, 2391], [2402, 2405], [2419, 2424], [2432, 2436], [2445, 2446], [2449, 2450],
         [2483, 2485], [2490, 2492], [2494, 2509], [2511, 2523], [2530, 2533], [2546, 2547],
         [2554, 2564], [2571, 2574], [2577, 2578], [2618, 2648], [2655, 2661], [2672, 2673],
         [2677, 2692], [2746, 2748], [2750, 2767], [2769, 2783], [2786, 2789], [2800, 2820],
         [2829, 2830], [2833, 2834], [2874, 2876], [2878, 2907], [2914, 2917], [2930, 2946],
         [2955, 2957], [2966, 2968], [2976, 2978], [2981, 2983], [2987, 2989], [3002, 3023],
         [3025, 3045], [3059, 3076], [3130, 3132], [3134, 3159], [3162, 3167], [3170, 3173],
         [3184, 3191], [3199, 3204], [3258, 3260], [3262, 3293], [3298, 3301], [3312, 3332],
         [3386, 3388], [3390, 3423], [3426, 3429], [3446, 3449], [3456, 3460], [3479, 3481],
         [3518, 3519], [3527, 3584], [3636, 3647], [3655, 3663], [3674, 3712], [3717, 3718],
         [3723, 3724], [3726, 3731], [3752, 3753], [3764, 3772], [3774, 3775], [3783, 3791],
         [3802, 3803], [3806, 3839], [3841, 3871], [3892, 3903], [3949, 3975], [3980, 4095],
         [4139, 4158], [4170, 4175], [4182, 4185], [4190, 4192], [4194, 4196], [4199, 4205],
         [4209, 4212], [4226, 4237], [4250, 4255], [4294, 4303], [4349, 4351], [4686, 4687],
         [4702, 4703], [4750, 4751], [4790, 4791], [4806, 4807], [4886, 4887], [4955, 4968],
         [4989, 4991], [5008, 5023], [5109, 5120], [5741, 5742], [5787, 5791], [5867, 5869],
         [5873, 5887], [5906, 5919], [5938, 5951], [5970, 5983], [6001, 6015], [6068, 6102],
         [6104, 6107], [6109, 6111], [6122, 6127], [6138, 6159], [6170, 6175], [6264, 6271],
         [6315, 6319], [6390, 6399], [6429, 6469], [6510, 6511], [6517, 6527], [6572, 6592],
         [6600, 6607], [6619, 6655], [6679, 6687], [6741, 6783], [6794, 6799], [6810, 6822],
         [6824, 6916], [6964, 6980], [6988, 6991], [7002, 7042], [7073, 7085], [7098, 7167],
         [7204, 7231], [7242, 7244], [7294, 7400], [7410, 7423], [7616, 7679], [7958, 7959],
         [7966, 7967], [8006, 8007], [8014, 8015], [8062, 8063], [8127, 8129], [8141, 8143],
         [8148, 8149], [8156, 8159], [8173, 8177], [8189, 8303], [8306, 8307], [8314, 8318],
         [8330, 8335], [8341, 8449], [8451, 8454], [8456, 8457], [8470, 8472], [8478, 8483],
         [8506, 8507], [8512, 8516], [8522, 8525], [8586, 9311], [9372, 9449], [9472, 10101],
         [10132, 11263], [11493, 11498], [11503, 11516], [11518, 11519], [11558, 11567],
         [11622, 11630], [11632, 11647], [11671, 11679], [11743, 11822], [11824, 12292],
         [12296, 12320], [12330, 12336], [12342, 12343], [12349, 12352], [12439, 12444],
         [12544, 12548], [12590, 12592], [12687, 12689], [12694, 12703], [12728, 12783],
         [12800, 12831], [12842, 12880], [12896, 12927], [12938, 12976], [12992, 13311],
         [19894, 19967], [40908, 40959], [42125, 42191], [42238, 42239], [42509, 42511],
         [42540, 42559], [42592, 42593], [42607, 42622], [42648, 42655], [42736, 42774],
         [42784, 42785], [42889, 42890], [42893, 43002], [43043, 43055], [43062, 43071],
         [43124, 43137], [43188, 43215], [43226, 43249], [43256, 43258], [43260, 43263],
         [43302, 43311], [43335, 43359], [43389, 43395], [43443, 43470], [43482, 43519],
         [43561, 43583], [43596, 43599], [43610, 43615], [43639, 43641], [43643, 43647],
         [43698, 43700], [43703, 43704], [43710, 43711], [43715, 43738], [43742, 43967],
         [44003, 44015], [44026, 44031], [55204, 55215], [55239, 55242], [55292, 55295],
         [57344, 63743], [64046, 64047], [64110, 64111], [64218, 64255], [64263, 64274],
         [64280, 64284], [64434, 64466], [64830, 64847], [64912, 64913], [64968, 65007],
         [65020, 65135], [65277, 65295], [65306, 65312], [65339, 65344], [65371, 65381],
         [65471, 65473], [65480, 65481], [65488, 65489], [65496, 65497]];
    for (i = 0; i < ranges.length; i++) {
        start = ranges[i][0];
        end = ranges[i][1];
        for (j = start; j <= end; j++) {
            result[j] = true;
        }
    }
    return result;
})();

function splitQuery(query) {
    var result = [];
    var start = -1;
    for (var i = 0; i < query.length; i++) {
        if (splitChars[query.charCodeAt(i)]) {
            if (start !== -1) {
                result.push(query.slice(start, i));
                start = -1;
            }
        } else if (start === -1) {
            start = i;
        }
    }
    if (start !== -1) {
        result.push(query.slice(start));
    }
    return result;
}




/**
 * Search Module
 */
var Search = {

  _index : null,
  _queued_query : null,
  _pulse_status : -1,

  init : function() {
      var params = $.getQueryParameters();
      if (params.q) {
          var query = params.q[0];
          $(\'input[name="q"]\')[0].value = query;
          this.performSearch(query);
      }
  },

  loadIndex : function(url) {
    $.ajax({type: "GET", url: url, data: null,
            dataType: "script", cache: true,
            complete: function(jqxhr, textstatus) {
              if (textstatus != "success") {
                document.getElementById("searchindexloader").src = url;
              }
            }});
  },

  setIndex : function(index) {
    var q;
    this._index = index;
    if ((q = this._queued_query) !== null) {
      this._queued_query = null;
      Search.query(q);
    }
  },

  hasIndex : function() {
      return this._index !== null;
  },

  deferQuery : function(query) {
      this._queued_query = query;
  },

  stopPulse : function() {
      this._pulse_status = 0;
  },

  startPulse : function() {
    if (this._pulse_status >= 0)
        return;
    function pulse() {
      var i;
      Search._pulse_status = (Search._pulse_status + 1) % 4;
      var dotString = '';
      for (i = 0; i < Search._pulse_status; i++)
        dotString += '.';
      Search.dots.text(dotString);
      if (Search._pulse_status > -1)
        window.setTimeout(pulse, 500);
    }
    pulse();
  },

  /**
   * perform a search for something (or wait until index is loaded)
   */
  performSearch : function(query) {
    // create the required interface elements
    this.out = $('#search-results');
    this.title = $('<h2>' + _('Searching') + '</h2>').appendTo(this.out);
    this.dots = $('<span></span>').appendTo(this.title);
    this.status = $(\'<p style="display: none"></p>\').appendTo(this.out);
    this.output = $(\'<ul class="search"/>\').appendTo(this.out);

    $('#search-progress').text(_('Preparing search...'));
    this.startPulse();

    // index already loaded, the browser was quick!
    if (this.hasIndex())
      this.query(query);
    else
      this.deferQuery(query);
  },

  /**
   * execute search (requires search index to be loaded)
   */
  query : function(query) {
    var i;
    var stopwords = ["a","and","are","as","at","be","but","by","for","if","in","into","is","it","near","no","not","of","on","or","such","that","the","their","then","there","these","they","this","to","was","will","with"];

    // stem the searchterms and add them to the correct list
    var stemmer = new Stemmer();
    var searchterms = [];
    var excluded = [];
    var hlterms = [];
    var tmp = splitQuery(query);
    var objectterms = [];
    for (i = 0; i < tmp.length; i++) {
      if (tmp[i] !== "") {
          objectterms.push(tmp[i].toLowerCase());
      }

      if ($u.indexOf(stopwords, tmp[i].toLowerCase()) != -1 || tmp[i].match(/^\\d+$/) ||
          tmp[i] === "") {
        // skip this "word"
        continue;
      }
      // stem the word
      var word = stemmer.stemWord(tmp[i].toLowerCase());
      // prevent stemmer from cutting word smaller than two chars
      if(word.length < 3 && tmp[i].length >= 3) {
        word = tmp[i];
      }
      var toAppend;
      // select the correct list
      if (word[0] == '-') {
        toAppend = excluded;
        word = word.substr(1);
      }
      else {
        toAppend = searchterms;
        hlterms.push(tmp[i].toLowerCase());
      }
      // only add if not already in the list
      if (!$u.contains(toAppend, word))
        toAppend.push(word);
    }
    var highlightstring = \'?highlight=\' + $.urlencode(hlterms.join(" "));

    // console.debug('SEARCH: searching for:');
    // console.info('required: ', searchterms);
    // console.info('excluded: ', excluded);

    // prepare search
    var terms = this._index.terms;
    var titleterms = this._index.titleterms;

    // array of [filename, title, anchor, descr, score]
    var results = [];
    $('#search-progress').empty();

    // lookup as object
    for (i = 0; i < objectterms.length; i++) {
      var others = [].concat(objectterms.slice(0, i),
                             objectterms.slice(i+1, objectterms.length));
      results = results.concat(this.performObjectSearch(objectterms[i], others));
    }

    // lookup as search terms in fulltext
    results = results.concat(this.performTermsSearch(searchterms, excluded, terms, titleterms));

    // let the scorer override scores with a custom scoring function
    if (Scorer.score) {
      for (i = 0; i < results.length; i++)
        results[i][4] = Scorer.score(results[i]);
    }

    // now sort the results by score (in opposite order of appearance, since the
    // display function below uses pop() to retrieve items) and then
    // alphabetically
    results.sort(function(a, b) {
      var left = a[4];
      var right = b[4];
      if (left > right) {
        return 1;
      } else if (left < right) {
        return -1;
      } else {
        // same score: sort alphabetically
        left = a[1].toLowerCase();
        right = b[1].toLowerCase();
        return (left > right) ? -1 : ((left < right) ? 1 : 0);
      }
    });

    // for debugging
    //Search.lastresults = results.slice();  // a copy
    //console.info('search results:', Search.lastresults);

    // print the results
    var resultCount = results.length;
    function displayNextItem() {
      // results left, load the summary and display it
      if (results.length) {
        var item = results.pop();
        var listItem = $(\'<li style="display:none"></li>\');
        if (DOCUMENTATION_OPTIONS.FILE_SUFFIX === '') {
          // dirhtml builder
          var dirname = item[0] + '/';
          if (dirname.match(/\\/index\\/$/)) {
            dirname = dirname.substring(0, dirname.length-6);
          } else if (dirname == 'index/') {
            dirname = '';
          }
          listItem.append($('<a/>').attr('href',
            DOCUMENTATION_OPTIONS.URL_ROOT + dirname +
            highlightstring + item[2]).html(item[1]));
        } else {
          // normal html builders
          listItem.append($('<a/>').attr('href',
            item[0] + DOCUMENTATION_OPTIONS.FILE_SUFFIX +
            highlightstring + item[2]).html(item[1]));
        }
        if (item[3]) {
          listItem.append($('<span> (' + item[3] + ')</span>'));
          Search.output.append(listItem);
          listItem.slideDown(5, function() {
            displayNextItem();
          });
        } else if (DOCUMENTATION_OPTIONS.HAS_SOURCE) {
          var suffix = DOCUMENTATION_OPTIONS.SOURCELINK_SUFFIX;
          if (suffix === undefined) {
            suffix = '.txt';
          }
          $.ajax({url: DOCUMENTATION_OPTIONS.URL_ROOT + '_sources/' + item[5] + (item[5].slice(-suffix.length) === suffix ? '' : suffix),
                  dataType: "text",
                  complete: function(jqxhr, textstatus) {
                    var data = jqxhr.responseText;
                    if (data !== '' && data !== undefined) {
                      listItem.append(Search.makeSearchSummary(data, searchterms, hlterms));
                    }
                    Search.output.append(listItem);
                    listItem.slideDown(5, function() {
                      displayNextItem();
                    });
                  }});
        } else {
          // no source available, just display title
          Search.output.append(listItem);
          listItem.slideDown(5, function() {
            displayNextItem();
          });
        }
      }
      // search finished, update title and status message
      else {
        Search.stopPulse();
        Search.title.text(_('Search Results'));
        if (!resultCount)
          Search.status.text(_('Your search did not match any documents. Please make sure that all words are spelled correctly and that you\\'ve selected enough categories.'));
        else
            Search.status.text(_('Search finished, found %s page(s) matching the search query.').replace('%s', resultCount));
        Search.status.fadeIn(500);
      }
    }
    displayNextItem();
  },

  /**
   * search for object names
   */
  performObjectSearch : function(object, otherterms) {
    var filenames = this._index.filenames;
    var docnames = this._index.docnames;
    var objects = this._index.objects;
    var objnames = this._index.objnames;
    var titles = this._index.titles;

    var i;
    var results = [];

    for (var prefix in objects) {
      for (var name in objects[prefix]) {
        var fullname = (prefix ? prefix + '.' : '') + name;
        if (fullname.toLowerCase().indexOf(object) > -1) {
          var score = 0;
          var parts = fullname.split('.');
          // check for different match types: exact matches of full name or
          // "last name" (i.e. last dotted part)
          if (fullname == object || parts[parts.length - 1] == object) {
            score += Scorer.objNameMatch;
          // matches in last name
          } else if (parts[parts.length - 1].indexOf(object) > -1) {
            score += Scorer.objPartialMatch;
          }
          var match = objects[prefix][name];
          var objname = objnames[match[1]][2];
          var title = titles[match[0]];
          // If more than one term searched for, we require other words to be
          // found in the name/title/description
          if (otherterms.length > 0) {
            var haystack = (prefix + ' ' + name + ' ' +
                            objname + ' ' + title).toLowerCase();
            var allfound = true;
            for (i = 0; i < otherterms.length; i++) {
              if (haystack.indexOf(otherterms[i]) == -1) {
                allfound = false;
                break;
              }
            }
            if (!allfound) {
              continue;
            }
          }
          var descr = objname + _(', in ') + title;

          var anchor = match[3];
          if (anchor === '')
            anchor = fullname;
          else if (anchor == '-')
            anchor = objnames[match[1]][1] + '-' + fullname;
          // add custom score for some objects according to scorer
          if (Scorer.objPrio.hasOwnProperty(match[2])) {
            score += Scorer.objPrio[match[2]];
          } else {
            score += Scorer.objPrioDefault;
          }
          results.push([docnames[match[0]], fullname, '#'+anchor, descr, score, filenames[match[0]]]);
        }
      }
    }

    return results;
  },

  /**
   * search for full-text terms in the index
   */
  performTermsSearch : function(searchterms, excluded, terms, titleterms) {
    var docnames = this._index.docnames;
    var filenames = this._index.filenames;
    var titles = this._index.titles;

    var i, j, file;
    var fileMap = {};
    var scoreMap = {};
    var results = [];

    // perform the search on the required terms
    for (i = 0; i < searchterms.length; i++) {
      var word = searchterms[i];
      var files = [];
      var _o = [
        {files: terms[word], score: Scorer.term},
        {files: titleterms[word], score: Scorer.title}
      ];

      // no match but word was a required one
      if ($u.every(_o, function(o){return o.files === undefined;})) {
        break;
      }
      // found search word in contents
      $u.each(_o, function(o) {
        var _files = o.files;
        if (_files === undefined)
          return

        if (_files.length === undefined)
          _files = [_files];
        files = files.concat(_files);

        // set score for the word in each file to Scorer.term
        for (j = 0; j < _files.length; j++) {
          file = _files[j];
          if (!(file in scoreMap))
            scoreMap[file] = {}
          scoreMap[file][word] = o.score;
        }
      });

      // create the mapping
      for (j = 0; j < files.length; j++) {
        file = files[j];
        if (file in fileMap)
          fileMap[file].push(word);
        else
          fileMap[file] = [word];
      }
    }

    // now check if the files don't contain excluded terms
    for (file in fileMap) {
      var valid = true;

      // check if all requirements are matched
      if (fileMap[file].length != searchterms.length)
          continue;

      // ensure that none of the excluded terms is in the search result
      for (i = 0; i < excluded.length; i++) {
        if (terms[excluded[i]] == file ||
            titleterms[excluded[i]] == file ||
            $u.contains(terms[excluded[i]] || [], file) ||
            $u.contains(titleterms[excluded[i]] || [], file)) {
          valid = false;
          break;
        }
      }

      // if we have still a valid result we can add it to the result list
      if (valid) {
        // select one (max) score for the file.
        // for better ranking, we should calculate ranking by using words statistics like basic tf-idf...
        var score = $u.max($u.map(fileMap[file], function(w){return scoreMap[file][w]}));
        results.push([docnames[file], titles[file], '', null, score, filenames[file]]);
      }
    }
    return results;
  },

  /**
   * helper function to return a node containing the
   * search summary for a given text. keywords is a list
   * of stemmed words, hlwords is the list of normal, unstemmed
   * words. the first one is used to find the occurrence, the
   * latter for highlighting it.
   */
  makeSearchSummary : function(text, keywords, hlwords) {
    var textLower = text.toLowerCase();
    var start = 0;
    $.each(keywords, function() {
      var i = textLower.indexOf(this.toLowerCase());
      if (i > -1)
        start = i;
    });
    start = Math.max(start - 120, 0);
    var excerpt = ((start > 0) ? '...' : '') +
      $.trim(text.substr(start, 240)) +
      ((start + 240 - text.length) ? '...' : '');
    var rv = $(\'<div class="context"></div>\').text(excerpt);
    $.each(hlwords, function() {
      rv = rv.highlightText(this, 'highlighted');
    });
    return rv;
  }
};

$(document).ready(function() {
  Search.init();
});'''

snapshots['test_build_all_docs 46'] = '''//     Underscore.js 1.3.1
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore is freely distributable under the MIT license.
//     Portions of Underscore are inspired or borrowed from Prototype,
//     Oliver Steele's Functional, and John Resig's Micro-Templating.
//     For all details and documentation:
//     http://documentcloud.github.com/underscore

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var slice            = ArrayProto.slice,
      unshift          = ArrayProto.unshift,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) { return new wrapper(obj); };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root['_'] = _;
  }

  // Current version.
  _.VERSION = '1.3.1';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    if (obj.length === +obj.length) results.length = obj.length;
    return results;
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var reversed = _.toArray(obj).reverse();
    if (context && !initial) iterator = _.bind(iterator, context);
    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    each(obj, function(value, index, list) {
      if (!iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if a given value is included in the array or object using `===`.
  // Aliased as `contains`.
  _.include = _.contains = function(obj, target) {
    var found = false;
    if (obj == null) return found;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    found = any(obj, function(value) {
      return value === target;
    });
    return found;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    return _.map(obj, function(value) {
      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Return the maximum element or (element-based computation).
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj)) return Math.max.apply(Math, obj);
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj)) return Math.min.apply(Math, obj);
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var shuffled = [], rand;
    each(obj, function(value, index, list) {
      if (index == 0) {
        shuffled[0] = value;
      } else {
        rand = Math.floor(Math.random() * (index + 1));
        shuffled[index] = shuffled[rand];
        shuffled[rand] = value;
      }
    });
    return shuffled;
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }), 'value');
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, val) {
    var result = {};
    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
    each(obj, function(value, index) {
      var key = iterator(value, index);
      (result[key] || (result[key] = [])).push(value);
    });
    return result;
  };

  // Use a comparator function to figure out at what index an object should
  // be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator) {
    iterator || (iterator = _.identity);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >> 1;
      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(iterable) {
    if (!iterable)                return [];
    if (iterable.toArray)         return iterable.toArray();
    if (_.isArray(iterable))      return slice.call(iterable);
    if (_.isArguments(iterable))  return slice.call(iterable);
    return _.values(iterable);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    return _.toArray(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head`. The **guard** check allows it to work
  // with `_.map`.
  _.first = _.head = function(array, n, guard) {
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especcialy useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail`.
  // Especially useful on the arguments object. Passing an **index** will return
  // the rest of the values in the array from that index onward. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = function(array, index, guard) {
    return slice.call(array, (index == null) || guard ? 1 : index);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, function(value){ return !!value; });
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return _.reduce(array, function(memo, value) {
      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));
      memo[memo.length] = value;
      return memo;
    }, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator) {
    var initial = iterator ? _.map(array, iterator) : array;
    var result = [];
    _.reduce(initial, function(memo, el, i) {
      if (0 == i || (isSorted === true ? _.last(memo) != el : !_.include(memo, el))) {
        memo[memo.length] = el;
        result[result.length] = array[i];
      }
      return memo;
    }, []);
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays. (Aliased as "intersect" for back-compat.)
  _.intersection = _.intersect = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = _.flatten(slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.include(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) results[i] = _.pluck(args, "" + i);
    return results;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i, l;
    if (isSorted) {
      i = _.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);
    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item) {
    if (array == null) return -1;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);
    var i = array.length;
    while (i--) if (i in array && array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Binding with arguments is also known as `curry`.
  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
  // We check for `func.bind` first, to fail fast when `func` is undefined.
  _.bind = function bind(func, context) {
    var bound, args;
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length == 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(func, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, throttling, more;
    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
    return function() {
      context = this; args = arguments;
      var later = function() {
        timeout = null;
        if (more) func.apply(context, args);
        whenDone();
      };
      if (!timeout) timeout = setTimeout(later, wait);
      if (throttling) {
        more = true;
      } else {
        func.apply(context, args);
      }
      whenDone();
      throttling = true;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds.
  _.debounce = function(func, wait) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        func.apply(context, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      return memo = func.apply(this, arguments);
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func].concat(slice.call(arguments, 0));
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) { return func.apply(this, arguments); }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    return _.map(obj, _.identity);
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        if (obj[prop] == null) obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function.
  function eq(a, b, stack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a._chain) a = a._wrapped;
    if (b._chain) b = b._wrapped;
    // Invoke a custom `isEqual` method if one is provided.
    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);
    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = stack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (stack[length] == a) return true;
    }
    // Add the first object to the stack of traversed objects.
    stack.push(a);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          // Ensure commutative equality for sparse arrays.
          if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent.
      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    stack.pop();
    return result;
  }

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType == 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Is a given variable an arguments object?
  _.isArguments = function(obj) {
    return toString.call(obj) == '[object Arguments]';
  };
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Is a given value a function?
  _.isFunction = function(obj) {
    return toString.call(obj) == '[object Function]';
  };

  // Is a given value a string?
  _.isString = function(obj) {
    return toString.call(obj) == '[object String]';
  };

  // Is a given value a number?
  _.isNumber = function(obj) {
    return toString.call(obj) == '[object Number]';
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    // `NaN` is the only value for which `===` is not reflexive.
    return obj !== obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value a date?
  _.isDate = function(obj) {
    return toString.call(obj) == '[object Date]';
  };

  // Is the given value a regular expression?
  _.isRegExp = function(obj) {
    return toString.call(obj) == '[object RegExp]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Has own property?
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function (n, iterator, context) {
    for (var i = 0; i < n; i++) iterator.call(context, i);
  };

  // Escape a string for HTML interpolation.
  _.escape = function(string) {
    return (\'\'+string).replace(/&/g, \'&amp;\').replace(/</g, \'&lt;\').replace(/>/g, \'&gt;\').replace(/"/g, \'&quot;\').replace(/\'/g, \'&#x27;\').replace(/\\//g,\'&#x2F;\');
  };

  // Add your own custom functions to the Underscore object, ensuring that
  // they're correctly added to the OOP wrapper as well.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      addToWrapper(name, _[name] = obj[name]);
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = idCounter++;
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\\s\\S]+?)%>/g,
    interpolate : /<%=([\\s\\S]+?)%>/g,
    escape      : /<%-([\\s\\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /.^/;

  // Within an interpolation, evaluation, or escaping, remove HTML escaping
  // that had been previously added.
  var unescape = function(code) {
    return code.replace(/\\\\\\\\/g, \'\\\\\').replace(/\\\\\'/g, "\'");
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(str, data) {
    var c  = _.templateSettings;
    var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' +
      'with(obj||{}){__p.push(\\'' +
      str.replace(/\\\\/g, '\\\\\\\\')
         .replace(/\'/g, "\\\\\'")
         .replace(c.escape || noMatch, function(match, code) {
           return "\',_.escape(" + unescape(code) + "),\'";
         })
         .replace(c.interpolate || noMatch, function(match, code) {
           return "\'," + unescape(code) + ",\'";
         })
         .replace(c.evaluate || noMatch, function(match, code) {
           return "\');" + unescape(code).replace(/[\\r\\n\\t]/g, \' \') + ";__p.push(\'";
         })
         .replace(/\\r/g, '\\\\r')
         .replace(/\\n/g, '\\\\n')
         .replace(/\\t/g, '\\\\t')
         + "\');}return __p.join(\'\');";
    var func = new Function('obj', '_', tmpl);
    if (data) return func(data, _);
    return function(data) {
      return func.call(this, data, _);
    };
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // The OOP Wrapper
  // ---------------

  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.
  var wrapper = function(obj) { this._wrapped = obj; };

  // Expose `wrapper.prototype` as `_.prototype`
  _.prototype = wrapper.prototype;

  // Helper function to continue chaining intermediate results.
  var result = function(obj, chain) {
    return chain ? _(obj).chain() : obj;
  };

  // A method to easily add functions to the OOP wrapper.
  var addToWrapper = function(name, func) {
    wrapper.prototype[name] = function() {
      var args = slice.call(arguments);
      unshift.call(args, this._wrapped);
      return result(func.apply(_, args), this._chain);
    };
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    wrapper.prototype[name] = function() {
      var wrapped = this._wrapped;
      method.apply(wrapped, arguments);
      var length = wrapped.length;
      if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];
      return result(wrapped, this._chain);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    wrapper.prototype[name] = function() {
      return result(method.apply(this._wrapped, arguments), this._chain);
    };
  });

  // Start chaining a wrapped Underscore object.
  wrapper.prototype.chain = function() {
    this._chain = true;
    return this;
  };

  // Extracts the result from a wrapped and chained object.
  wrapper.prototype.value = function() {
    return this._wrapped;
  };

}).call(this);
'''

snapshots['test_build_all_docs 47'] = '''// Underscore.js 1.3.1
// (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
// Underscore is freely distributable under the MIT license.
// Portions of Underscore are inspired or borrowed from Prototype,
// Oliver Steele's Functional, and John Resig's Micro-Templating.
// For all details and documentation:
// http://documentcloud.github.com/underscore
(function(){function q(a,c,d){if(a===c)return a!==0||1/a==1/c;if(a==null||c==null)return a===c;if(a._chain)a=a._wrapped;if(c._chain)c=c._wrapped;if(a.isEqual&&b.isFunction(a.isEqual))return a.isEqual(c);if(c.isEqual&&b.isFunction(c.isEqual))return c.isEqual(a);var e=l.call(a);if(e!=l.call(c))return false;switch(e){case "[object String]":return a==String(c);case "[object Number]":return a!=+a?c!=+c:a==0?1/a==1/c:a==+c;case "[object Date]":case "[object Boolean]":return+a==+c;case "[object RegExp]":return a.source==
c.source&&a.global==c.global&&a.multiline==c.multiline&&a.ignoreCase==c.ignoreCase}if(typeof a!="object"||typeof c!="object")return false;for(var f=d.length;f--;)if(d[f]==a)return true;d.push(a);var f=0,g=true;if(e=="[object Array]"){if(f=a.length,g=f==c.length)for(;f--;)if(!(g=f in a==f in c&&q(a[f],c[f],d)))break}else{if("constructor"in a!="constructor"in c||a.constructor!=c.constructor)return false;for(var h in a)if(b.has(a,h)&&(f++,!(g=b.has(c,h)&&q(a[h],c[h],d))))break;if(g){for(h in c)if(b.has(c,
h)&&!f--)break;g=!f}}d.pop();return g}var r=this,G=r._,n={},k=Array.prototype,o=Object.prototype,i=k.slice,H=k.unshift,l=o.toString,I=o.hasOwnProperty,w=k.forEach,x=k.map,y=k.reduce,z=k.reduceRight,A=k.filter,B=k.every,C=k.some,p=k.indexOf,D=k.lastIndexOf,o=Array.isArray,J=Object.keys,s=Function.prototype.bind,b=function(a){return new m(a)};if(typeof exports!=="undefined"){if(typeof module!=="undefined"&&module.exports)exports=module.exports=b;exports._=b}else r._=b;b.VERSION="1.3.1";var j=b.each=
b.forEach=function(a,c,d){if(a!=null)if(w&&a.forEach===w)a.forEach(c,d);else if(a.length===+a.length)for(var e=0,f=a.length;e<f;e++){if(e in a&&c.call(d,a[e],e,a)===n)break}else for(e in a)if(b.has(a,e)&&c.call(d,a[e],e,a)===n)break};b.map=b.collect=function(a,c,b){var e=[];if(a==null)return e;if(x&&a.map===x)return a.map(c,b);j(a,function(a,g,h){e[e.length]=c.call(b,a,g,h)});if(a.length===+a.length)e.length=a.length;return e};b.reduce=b.foldl=b.inject=function(a,c,d,e){var f=arguments.length>2;a==
null&&(a=[]);if(y&&a.reduce===y)return e&&(c=b.bind(c,e)),f?a.reduce(c,d):a.reduce(c);j(a,function(a,b,i){f?d=c.call(e,d,a,b,i):(d=a,f=true)});if(!f)throw new TypeError("Reduce of empty array with no initial value");return d};b.reduceRight=b.foldr=function(a,c,d,e){var f=arguments.length>2;a==null&&(a=[]);if(z&&a.reduceRight===z)return e&&(c=b.bind(c,e)),f?a.reduceRight(c,d):a.reduceRight(c);var g=b.toArray(a).reverse();e&&!f&&(c=b.bind(c,e));return f?b.reduce(g,c,d,e):b.reduce(g,c)};b.find=b.detect=
function(a,c,b){var e;E(a,function(a,g,h){if(c.call(b,a,g,h))return e=a,true});return e};b.filter=b.select=function(a,c,b){var e=[];if(a==null)return e;if(A&&a.filter===A)return a.filter(c,b);j(a,function(a,g,h){c.call(b,a,g,h)&&(e[e.length]=a)});return e};b.reject=function(a,c,b){var e=[];if(a==null)return e;j(a,function(a,g,h){c.call(b,a,g,h)||(e[e.length]=a)});return e};b.every=b.all=function(a,c,b){var e=true;if(a==null)return e;if(B&&a.every===B)return a.every(c,b);j(a,function(a,g,h){if(!(e=
e&&c.call(b,a,g,h)))return n});return e};var E=b.some=b.any=function(a,c,d){c||(c=b.identity);var e=false;if(a==null)return e;if(C&&a.some===C)return a.some(c,d);j(a,function(a,b,h){if(e||(e=c.call(d,a,b,h)))return n});return!!e};b.include=b.contains=function(a,c){var b=false;if(a==null)return b;return p&&a.indexOf===p?a.indexOf(c)!=-1:b=E(a,function(a){return a===c})};b.invoke=function(a,c){var d=i.call(arguments,2);return b.map(a,function(a){return(b.isFunction(c)?c||a:a[c]).apply(a,d)})};b.pluck=
function(a,c){return b.map(a,function(a){return a[c]})};b.max=function(a,c,d){if(!c&&b.isArray(a))return Math.max.apply(Math,a);if(!c&&b.isEmpty(a))return-Infinity;var e={computed:-Infinity};j(a,function(a,b,h){b=c?c.call(d,a,b,h):a;b>=e.computed&&(e={value:a,computed:b})});return e.value};b.min=function(a,c,d){if(!c&&b.isArray(a))return Math.min.apply(Math,a);if(!c&&b.isEmpty(a))return Infinity;var e={computed:Infinity};j(a,function(a,b,h){b=c?c.call(d,a,b,h):a;b<e.computed&&(e={value:a,computed:b})});
return e.value};b.shuffle=function(a){var b=[],d;j(a,function(a,f){f==0?b[0]=a:(d=Math.floor(Math.random()*(f+1)),b[f]=b[d],b[d]=a)});return b};b.sortBy=function(a,c,d){return b.pluck(b.map(a,function(a,b,g){return{value:a,criteria:c.call(d,a,b,g)}}).sort(function(a,b){var c=a.criteria,d=b.criteria;return c<d?-1:c>d?1:0}),"value")};b.groupBy=function(a,c){var d={},e=b.isFunction(c)?c:function(a){return a[c]};j(a,function(a,b){var c=e(a,b);(d[c]||(d[c]=[])).push(a)});return d};b.sortedIndex=function(a,
c,d){d||(d=b.identity);for(var e=0,f=a.length;e<f;){var g=e+f>>1;d(a[g])<d(c)?e=g+1:f=g}return e};b.toArray=function(a){return!a?[]:a.toArray?a.toArray():b.isArray(a)?i.call(a):b.isArguments(a)?i.call(a):b.values(a)};b.size=function(a){return b.toArray(a).length};b.first=b.head=function(a,b,d){return b!=null&&!d?i.call(a,0,b):a[0]};b.initial=function(a,b,d){return i.call(a,0,a.length-(b==null||d?1:b))};b.last=function(a,b,d){return b!=null&&!d?i.call(a,Math.max(a.length-b,0)):a[a.length-1]};b.rest=
b.tail=function(a,b,d){return i.call(a,b==null||d?1:b)};b.compact=function(a){return b.filter(a,function(a){return!!a})};b.flatten=function(a,c){return b.reduce(a,function(a,e){if(b.isArray(e))return a.concat(c?e:b.flatten(e));a[a.length]=e;return a},[])};b.without=function(a){return b.difference(a,i.call(arguments,1))};b.uniq=b.unique=function(a,c,d){var d=d?b.map(a,d):a,e=[];b.reduce(d,function(d,g,h){if(0==h||(c===true?b.last(d)!=g:!b.include(d,g)))d[d.length]=g,e[e.length]=a[h];return d},[]);
return e};b.union=function(){return b.uniq(b.flatten(arguments,true))};b.intersection=b.intersect=function(a){var c=i.call(arguments,1);return b.filter(b.uniq(a),function(a){return b.every(c,function(c){return b.indexOf(c,a)>=0})})};b.difference=function(a){var c=b.flatten(i.call(arguments,1));return b.filter(a,function(a){return!b.include(c,a)})};b.zip=function(){for(var a=i.call(arguments),c=b.max(b.pluck(a,"length")),d=Array(c),e=0;e<c;e++)d[e]=b.pluck(a,""+e);return d};b.indexOf=function(a,c,
d){if(a==null)return-1;var e;if(d)return d=b.sortedIndex(a,c),a[d]===c?d:-1;if(p&&a.indexOf===p)return a.indexOf(c);for(d=0,e=a.length;d<e;d++)if(d in a&&a[d]===c)return d;return-1};b.lastIndexOf=function(a,b){if(a==null)return-1;if(D&&a.lastIndexOf===D)return a.lastIndexOf(b);for(var d=a.length;d--;)if(d in a&&a[d]===b)return d;return-1};b.range=function(a,b,d){arguments.length<=1&&(b=a||0,a=0);for(var d=arguments[2]||1,e=Math.max(Math.ceil((b-a)/d),0),f=0,g=Array(e);f<e;)g[f++]=a,a+=d;return g};
var F=function(){};b.bind=function(a,c){var d,e;if(a.bind===s&&s)return s.apply(a,i.call(arguments,1));if(!b.isFunction(a))throw new TypeError;e=i.call(arguments,2);return d=function(){if(!(this instanceof d))return a.apply(c,e.concat(i.call(arguments)));F.prototype=a.prototype;var b=new F,g=a.apply(b,e.concat(i.call(arguments)));return Object(g)===g?g:b}};b.bindAll=function(a){var c=i.call(arguments,1);c.length==0&&(c=b.functions(a));j(c,function(c){a[c]=b.bind(a[c],a)});return a};b.memoize=function(a,
c){var d={};c||(c=b.identity);return function(){var e=c.apply(this,arguments);return b.has(d,e)?d[e]:d[e]=a.apply(this,arguments)}};b.delay=function(a,b){var d=i.call(arguments,2);return setTimeout(function(){return a.apply(a,d)},b)};b.defer=function(a){return b.delay.apply(b,[a,1].concat(i.call(arguments,1)))};b.throttle=function(a,c){var d,e,f,g,h,i=b.debounce(function(){h=g=false},c);return function(){d=this;e=arguments;var b;f||(f=setTimeout(function(){f=null;h&&a.apply(d,e);i()},c));g?h=true:
a.apply(d,e);i();g=true}};b.debounce=function(a,b){var d;return function(){var e=this,f=arguments;clearTimeout(d);d=setTimeout(function(){d=null;a.apply(e,f)},b)}};b.once=function(a){var b=false,d;return function(){if(b)return d;b=true;return d=a.apply(this,arguments)}};b.wrap=function(a,b){return function(){var d=[a].concat(i.call(arguments,0));return b.apply(this,d)}};b.compose=function(){var a=arguments;return function(){for(var b=arguments,d=a.length-1;d>=0;d--)b=[a[d].apply(this,b)];return b[0]}};
b.after=function(a,b){return a<=0?b():function(){if(--a<1)return b.apply(this,arguments)}};b.keys=J||function(a){if(a!==Object(a))throw new TypeError("Invalid object");var c=[],d;for(d in a)b.has(a,d)&&(c[c.length]=d);return c};b.values=function(a){return b.map(a,b.identity)};b.functions=b.methods=function(a){var c=[],d;for(d in a)b.isFunction(a[d])&&c.push(d);return c.sort()};b.extend=function(a){j(i.call(arguments,1),function(b){for(var d in b)a[d]=b[d]});return a};b.defaults=function(a){j(i.call(arguments,
1),function(b){for(var d in b)a[d]==null&&(a[d]=b[d])});return a};b.clone=function(a){return!b.isObject(a)?a:b.isArray(a)?a.slice():b.extend({},a)};b.tap=function(a,b){b(a);return a};b.isEqual=function(a,b){return q(a,b,[])};b.isEmpty=function(a){if(b.isArray(a)||b.isString(a))return a.length===0;for(var c in a)if(b.has(a,c))return false;return true};b.isElement=function(a){return!!(a&&a.nodeType==1)};b.isArray=o||function(a){return l.call(a)=="[object Array]"};b.isObject=function(a){return a===Object(a)};
b.isArguments=function(a){return l.call(a)=="[object Arguments]"};if(!b.isArguments(arguments))b.isArguments=function(a){return!(!a||!b.has(a,"callee"))};b.isFunction=function(a){return l.call(a)=="[object Function]"};b.isString=function(a){return l.call(a)=="[object String]"};b.isNumber=function(a){return l.call(a)=="[object Number]"};b.isNaN=function(a){return a!==a};b.isBoolean=function(a){return a===true||a===false||l.call(a)=="[object Boolean]"};b.isDate=function(a){return l.call(a)=="[object Date]"};
b.isRegExp=function(a){return l.call(a)=="[object RegExp]"};b.isNull=function(a){return a===null};b.isUndefined=function(a){return a===void 0};b.has=function(a,b){return I.call(a,b)};b.noConflict=function(){r._=G;return this};b.identity=function(a){return a};b.times=function(a,b,d){for(var e=0;e<a;e++)b.call(d,e)};b.escape=function(a){return(""+a).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/\'/g,"&#x27;").replace(/\\//g,"&#x2F;")};b.mixin=function(a){j(b.functions(a),
function(c){K(c,b[c]=a[c])})};var L=0;b.uniqueId=function(a){var b=L++;return a?a+b:b};b.templateSettings={evaluate:/<%([\\s\\S]+?)%>/g,interpolate:/<%=([\\s\\S]+?)%>/g,escape:/<%-([\\s\\S]+?)%>/g};var t=/.^/,u=function(a){return a.replace(/\\\\\\\\/g,"\\\\").replace(/\\\\\'/g,"\'")};b.template=function(a,c){var d=b.templateSettings,d="var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push(\'"+a.replace(/\\\\/g,"\\\\\\\\").replace(/\'/g,"\\\\\'").replace(d.escape||t,function(a,b){return"\',_.escape("+
u(b)+"),\'"}).replace(d.interpolate||t,function(a,b){return"\',"+u(b)+",\'"}).replace(d.evaluate||t,function(a,b){return"\');"+u(b).replace(/[\\r\\n\\t]/g," ")+";__p.push(\'"}).replace(/\\r/g,"\\\\r").replace(/\\n/g,"\\\\n").replace(/\\t/g,"\\\\t")+"\');}return __p.join(\'\');",e=new Function("obj","_",d);return c?e(c,b):function(a){return e.call(this,a,b)}};b.chain=function(a){return b(a).chain()};var m=function(a){this._wrapped=a};b.prototype=m.prototype;var v=function(a,c){return c?b(a).chain():a},K=function(a,c){m.prototype[a]=
function(){var a=i.call(arguments);H.call(a,this._wrapped);return v(c.apply(b,a),this._chain)}};b.mixin(b);j("pop,push,reverse,shift,sort,splice,unshift".split(","),function(a){var b=k[a];m.prototype[a]=function(){var d=this._wrapped;b.apply(d,arguments);var e=d.length;(a=="shift"||a=="splice")&&e===0&&delete d[0];return v(d,this._chain)}});j(["concat","join","slice"],function(a){var b=k[a];m.prototype[a]=function(){return v(b.apply(this._wrapped,arguments),this._chain)}});m.prototype.chain=function(){this._chain=
true;return this};m.prototype.value=function(){return this._wrapped}}).call(this);
'''

snapshots['test_build_all_docs 48'] = '''/*
 * websupport.js
 * ~~~~~~~~~~~~~
 *
 * sphinx.websupport utilities for all documentation.
 *
 * :copyright: Copyright 2007-2018 by the Sphinx team, see AUTHORS.
 * :license: BSD, see LICENSE for details.
 *
 */

(function($) {
  $.fn.autogrow = function() {
    return this.each(function() {
    var textarea = this;

    $.fn.autogrow.resize(textarea);

    $(textarea)
      .focus(function() {
        textarea.interval = setInterval(function() {
          $.fn.autogrow.resize(textarea);
        }, 500);
      })
      .blur(function() {
        clearInterval(textarea.interval);
      });
    });
  };

  $.fn.autogrow.resize = function(textarea) {
    var lineHeight = parseInt($(textarea).css('line-height'), 10);
    var lines = textarea.value.split('\\n');
    var columns = textarea.cols;
    var lineCount = 0;
    $.each(lines, function() {
      lineCount += Math.ceil(this.length / columns) || 1;
    });
    var height = lineHeight * (lineCount + 1);
    $(textarea).css('height', height);
  };
})(jQuery);

(function($) {
  var comp, by;

  function init() {
    initEvents();
    initComparator();
  }

  function initEvents() {
    $(document).on("click", \'a.comment-close\', function(event) {
      event.preventDefault();
      hide($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.vote\', function(event) {
      event.preventDefault();
      handleVote($(this));
    });
    $(document).on("click", \'a.reply\', function(event) {
      event.preventDefault();
      openReply($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.close-reply\', function(event) {
      event.preventDefault();
      closeReply($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.sort-option\', function(event) {
      event.preventDefault();
      handleReSort($(this));
    });
    $(document).on("click", \'a.show-proposal\', function(event) {
      event.preventDefault();
      showProposal($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.hide-proposal\', function(event) {
      event.preventDefault();
      hideProposal($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.show-propose-change\', function(event) {
      event.preventDefault();
      showProposeChange($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.hide-propose-change\', function(event) {
      event.preventDefault();
      hideProposeChange($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.accept-comment\', function(event) {
      event.preventDefault();
      acceptComment($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.delete-comment\', function(event) {
      event.preventDefault();
      deleteComment($(this).attr('id').substring(2));
    });
    $(document).on("click", \'a.comment-markup\', function(event) {
      event.preventDefault();
      toggleCommentMarkupBox($(this).attr('id').substring(2));
    });
  }

  /**
   * Set comp, which is a comparator function used for sorting and
   * inserting comments into the list.
   */
  function setComparator() {
    // If the first three letters are "asc", sort in ascending order
    // and remove the prefix.
    if (by.substring(0,3) == 'asc') {
      var i = by.substring(3);
      comp = function(a, b) { return a[i] - b[i]; };
    } else {
      // Otherwise sort in descending order.
      comp = function(a, b) { return b[by] - a[by]; };
    }

    // Reset link styles and format the selected sort option.
    $('a.sel').attr('href', '#').removeClass('sel');
    $('a.by' + by).removeAttr('href').addClass('sel');
  }

  /**
   * Create a comp function. If the user has preferences stored in
   * the sortBy cookie, use those, otherwise use the default.
   */
  function initComparator() {
    by = 'rating'; // Default to sort by rating.
    // If the sortBy cookie is set, use that instead.
    if (document.cookie.length > 0) {
      var start = document.cookie.indexOf('sortBy=');
      if (start != -1) {
        start = start + 7;
        var end = document.cookie.indexOf(";", start);
        if (end == -1) {
          end = document.cookie.length;
          by = unescape(document.cookie.substring(start, end));
        }
      }
    }
    setComparator();
  }

  /**
   * Show a comment div.
   */
  function show(id) {
    $('#ao' + id).hide();
    $('#ah' + id).show();
    var context = $.extend({id: id}, opts);
    var popup = $(renderTemplate(popupTemplate, context)).hide();
    popup.find(\'textarea[name="proposal"]\').hide();
    popup.find('a.by' + by).addClass('sel');
    var form = popup.find('#cf' + id);
    form.submit(function(event) {
      event.preventDefault();
      addComment(form);
    });
    $('#s' + id).after(popup);
    popup.slideDown('fast', function() {
      getComments(id);
    });
  }

  /**
   * Hide a comment div.
   */
  function hide(id) {
    $('#ah' + id).hide();
    $('#ao' + id).show();
    var div = $('#sc' + id);
    div.slideUp('fast', function() {
      div.remove();
    });
  }

  /**
   * Perform an ajax request to get comments for a node
   * and insert the comments into the comments tree.
   */
  function getComments(id) {
    $.ajax({
     type: 'GET',
     url: opts.getCommentsURL,
     data: {node: id},
     success: function(data, textStatus, request) {
       var ul = $('#cl' + id);
       var speed = 100;
       $('#cf' + id)
         .find(\'textarea[name="proposal"]\')
         .data('source', data.source);

       if (data.comments.length === 0) {
         ul.html('<li>No comments yet.</li>');
         ul.data('empty', true);
       } else {
         // If there are comments, sort them and put them in the list.
         var comments = sortComments(data.comments);
         speed = data.comments.length * 100;
         appendComments(comments, ul);
         ul.data('empty', false);
       }
       $('#cn' + id).slideUp(speed + 200);
       ul.slideDown(speed);
     },
     error: function(request, textStatus, error) {
       showError('Oops, there was a problem retrieving the comments.');
     },
     dataType: 'json'
    });
  }

  /**
   * Add a comment via ajax and insert the comment into the comment tree.
   */
  function addComment(form) {
    var node_id = form.find(\'input[name="node"]\').val();
    var parent_id = form.find(\'input[name="parent"]\').val();
    var text = form.find(\'textarea[name="comment"]\').val();
    var proposal = form.find(\'textarea[name="proposal"]\').val();

    if (text == '') {
      showError('Please enter a comment.');
      return;
    }

    // Disable the form that is being submitted.
    form.find('textarea,input').attr('disabled', 'disabled');

    // Send the comment to the server.
    $.ajax({
      type: "POST",
      url: opts.addCommentURL,
      dataType: 'json',
      data: {
        node: node_id,
        parent: parent_id,
        text: text,
        proposal: proposal
      },
      success: function(data, textStatus, error) {
        // Reset the form.
        if (node_id) {
          hideProposeChange(node_id);
        }
        form.find('textarea')
          .val('')
          .add(form.find('input'))
          .removeAttr('disabled');
\tvar ul = $('#cl' + (node_id || parent_id));
        if (ul.data('empty')) {
          $(ul).empty();
          ul.data('empty', false);
        }
        insertComment(data.comment);
        var ao = $('#ao' + node_id);
        ao.find('img').attr({'src': opts.commentBrightImage});
        if (node_id) {
          // if this was a "root" comment, remove the commenting box
          // (the user can get it back by reopening the comment popup)
          $('#ca' + node_id).slideUp();
        }
      },
      error: function(request, textStatus, error) {
        form.find('textarea,input').removeAttr('disabled');
        showError('Oops, there was a problem adding the comment.');
      }
    });
  }

  /**
   * Recursively append comments to the main comment list and children
   * lists, creating the comment tree.
   */
  function appendComments(comments, ul) {
    $.each(comments, function() {
      var div = createCommentDiv(this);
      ul.append($(document.createElement('li')).html(div));
      appendComments(this.children, div.find('ul.comment-children'));
      // To avoid stagnating data, don't store the comments children in data.
      this.children = null;
      div.data('comment', this);
    });
  }

  /**
   * After adding a new comment, it must be inserted in the correct
   * location in the comment tree.
   */
  function insertComment(comment) {
    var div = createCommentDiv(comment);

    // To avoid stagnating data, don't store the comments children in data.
    comment.children = null;
    div.data('comment', comment);

    var ul = $('#cl' + (comment.node || comment.parent));
    var siblings = getChildren(ul);

    var li = $(document.createElement('li'));
    li.hide();

    // Determine where in the parents children list to insert this comment.
    for(var i=0; i < siblings.length; i++) {
      if (comp(comment, siblings[i]) <= 0) {
        $('#cd' + siblings[i].id)
          .parent()
          .before(li.html(div));
        li.slideDown('fast');
        return;
      }
    }

    // If we get here, this comment rates lower than all the others,
    // or it is the only comment in the list.
    ul.append(li.html(div));
    li.slideDown('fast');
  }

  function acceptComment(id) {
    $.ajax({
      type: 'POST',
      url: opts.acceptCommentURL,
      data: {id: id},
      success: function(data, textStatus, request) {
        $('#cm' + id).fadeOut('fast');
        $('#cd' + id).removeClass('moderate');
      },
      error: function(request, textStatus, error) {
        showError('Oops, there was a problem accepting the comment.');
      }
    });
  }

  function deleteComment(id) {
    $.ajax({
      type: 'POST',
      url: opts.deleteCommentURL,
      data: {id: id},
      success: function(data, textStatus, request) {
        var div = $('#cd' + id);
        if (data == 'delete') {
          // Moderator mode: remove the comment and all children immediately
          div.slideUp('fast', function() {
            div.remove();
          });
          return;
        }
        // User mode: only mark the comment as deleted
        div
          .find('span.user-id:first')
          .text('[deleted]').end()
          .find('div.comment-text:first')
          .text('[deleted]').end()
          .find('#cm' + id + ', #dc' + id + ', #ac' + id + ', #rc' + id +
                ', #sp' + id + ', #hp' + id + ', #cr' + id + ', #rl' + id)
          .remove();
        var comment = div.data('comment');
        comment.username = '[deleted]';
        comment.text = '[deleted]';
        div.data('comment', comment);
      },
      error: function(request, textStatus, error) {
        showError('Oops, there was a problem deleting the comment.');
      }
    });
  }

  function showProposal(id) {
    $('#sp' + id).hide();
    $('#hp' + id).show();
    $('#pr' + id).slideDown('fast');
  }

  function hideProposal(id) {
    $('#hp' + id).hide();
    $('#sp' + id).show();
    $('#pr' + id).slideUp('fast');
  }

  function showProposeChange(id) {
    $('#pc' + id).hide();
    $('#hc' + id).show();
    var textarea = $('#pt' + id);
    textarea.val(textarea.data('source'));
    $.fn.autogrow.resize(textarea[0]);
    textarea.slideDown('fast');
  }

  function hideProposeChange(id) {
    $('#hc' + id).hide();
    $('#pc' + id).show();
    var textarea = $('#pt' + id);
    textarea.val('').removeAttr('disabled');
    textarea.slideUp('fast');
  }

  function toggleCommentMarkupBox(id) {
    $('#mb' + id).toggle();
  }

  /** Handle when the user clicks on a sort by link. */
  function handleReSort(link) {
    var classes = link.attr('class').split(/\\s+/);
    for (var i=0; i<classes.length; i++) {
      if (classes[i] != 'sort-option') {
\tby = classes[i].substring(2);
      }
    }
    setComparator();
    // Save/update the sortBy cookie.
    var expiration = new Date();
    expiration.setDate(expiration.getDate() + 365);
    document.cookie= 'sortBy=' + escape(by) +
                     ';expires=' + expiration.toUTCString();
    $('ul.comment-ul').each(function(index, ul) {
      var comments = getChildren($(ul), true);
      comments = sortComments(comments);
      appendComments(comments, $(ul).empty());
    });
  }

  /**
   * Function to process a vote when a user clicks an arrow.
   */
  function handleVote(link) {
    if (!opts.voting) {
      showError("You\'ll need to login to vote.");
      return;
    }

    var id = link.attr('id');
    if (!id) {
      // Didn't click on one of the voting arrows.
      return;
    }
    // If it is an unvote, the new vote value is 0,
    // Otherwise it's 1 for an upvote, or -1 for a downvote.
    var value = 0;
    if (id.charAt(1) != 'u') {
      value = id.charAt(0) == 'u' ? 1 : -1;
    }
    // The data to be sent to the server.
    var d = {
      comment_id: id.substring(2),
      value: value
    };

    // Swap the vote and unvote links.
    link.hide();
    $('#' + id.charAt(0) + (id.charAt(1) == 'u' ? 'v' : 'u') + d.comment_id)
      .show();

    // The div the comment is displayed in.
    var div = $('div#cd' + d.comment_id);
    var data = div.data('comment');

    // If this is not an unvote, and the other vote arrow has
    // already been pressed, unpress it.
    if ((d.value !== 0) && (data.vote === d.value * -1)) {
      $('#' + (d.value == 1 ? 'd' : 'u') + 'u' + d.comment_id).hide();
      $('#' + (d.value == 1 ? 'd' : 'u') + 'v' + d.comment_id).show();
    }

    // Update the comments rating in the local data.
    data.rating += (data.vote === 0) ? d.value : (d.value - data.vote);
    data.vote = d.value;
    div.data('comment', data);

    // Change the rating text.
    div.find('.rating:first')
      .text(data.rating + ' point' + (data.rating == 1 ? '' : 's'));

    // Send the vote information to the server.
    $.ajax({
      type: "POST",
      url: opts.processVoteURL,
      data: d,
      error: function(request, textStatus, error) {
        showError('Oops, there was a problem casting that vote.');
      }
    });
  }

  /**
   * Open a reply form used to reply to an existing comment.
   */
  function openReply(id) {
    // Swap out the reply link for the hide link
    $('#rl' + id).hide();
    $('#cr' + id).show();

    // Add the reply li to the children ul.
    var div = $(renderTemplate(replyTemplate, {id: id})).hide();
    $('#cl' + id)
      .prepend(div)
      // Setup the submit handler for the reply form.
      .find('#rf' + id)
      .submit(function(event) {
        event.preventDefault();
        addComment($('#rf' + id));
        closeReply(id);
      })
      .find('input[type=button]')
      .click(function() {
        closeReply(id);
      });
    div.slideDown('fast', function() {
      $('#rf' + id).find('textarea').focus();
    });
  }

  /**
   * Close the reply form opened with openReply.
   */
  function closeReply(id) {
    // Remove the reply div from the DOM.
    $('#rd' + id).slideUp('fast', function() {
      $(this).remove();
    });

    // Swap out the hide link for the reply link
    $('#cr' + id).hide();
    $('#rl' + id).show();
  }

  /**
   * Recursively sort a tree of comments using the comp comparator.
   */
  function sortComments(comments) {
    comments.sort(comp);
    $.each(comments, function() {
      this.children = sortComments(this.children);
    });
    return comments;
  }

  /**
   * Get the children comments from a ul. If recursive is true,
   * recursively include childrens' children.
   */
  function getChildren(ul, recursive) {
    var children = [];
    ul.children().children("[id^=\'cd\']")
      .each(function() {
        var comment = $(this).data('comment');
        if (recursive)
          comment.children = getChildren($(this).find('#cl' + comment.id), true);
        children.push(comment);
      });
    return children;
  }

  /** Create a div to display a comment in. */
  function createCommentDiv(comment) {
    if (!comment.displayed && !opts.moderator) {
      return $(\'<div class="moderate">Thank you!  Your comment will show up \'
               + 'once it is has been approved by a moderator.</div>');
    }
    // Prettify the comment rating.
    comment.pretty_rating = comment.rating + ' point' +
      (comment.rating == 1 ? '' : 's');
    // Make a class (for displaying not yet moderated comments differently)
    comment.css_class = comment.displayed ? '' : ' moderate';
    // Create a div for this comment.
    var context = $.extend({}, opts, comment);
    var div = $(renderTemplate(commentTemplate, context));

    // If the user has voted on this comment, highlight the correct arrow.
    if (comment.vote) {
      var direction = (comment.vote == 1) ? 'u' : 'd';
      div.find('#' + direction + 'v' + comment.id).hide();
      div.find('#' + direction + 'u' + comment.id).show();
    }

    if (opts.moderator || comment.text != '[deleted]') {
      div.find('a.reply').show();
      if (comment.proposal_diff)
        div.find('#sp' + comment.id).show();
      if (opts.moderator && !comment.displayed)
        div.find('#cm' + comment.id).show();
      if (opts.moderator || (opts.username == comment.username))
        div.find('#dc' + comment.id).show();
    }
    return div;
  }

  /**
   * A simple template renderer. Placeholders such as <%id%> are replaced
   * by context['id'] with items being escaped. Placeholders such as <#id#>
   * are not escaped.
   */
  function renderTemplate(template, context) {
    var esc = $(document.createElement('div'));

    function handle(ph, escape) {
      var cur = context;
      $.each(ph.split('.'), function() {
        cur = cur[this];
      });
      return escape ? esc.text(cur || "").html() : cur;
    }

    return template.replace(/<([%#])([\\w\\.]*)\\1>/g, function() {
      return handle(arguments[2], arguments[1] == '%' ? true : false);
    });
  }

  /** Flash an error message briefly. */
  function showError(message) {
    $(document.createElement('div')).attr({'class': 'popup-error'})
      .append($(document.createElement('div'))
               .attr({'class': 'error-message'}).text(message))
      .appendTo('body')
      .fadeIn("slow")
      .delay(2000)
      .fadeOut("slow");
  }

  /** Add a link the user uses to open the comments popup. */
  $.fn.comment = function() {
    return this.each(function() {
      var id = $(this).attr('id').substring(1);
      var count = COMMENT_METADATA[id];
      var title = count + ' comment' + (count == 1 ? '' : 's');
      var image = count > 0 ? opts.commentBrightImage : opts.commentImage;
      var addcls = count == 0 ? ' nocomment' : '';
      $(this)
        .append(
          $(document.createElement('a')).attr({
            href: '#',
            'class': 'sphinx-comment-open' + addcls,
            id: 'ao' + id
          })
            .append($(document.createElement('img')).attr({
              src: image,
              alt: 'comment',
              title: title
            }))
            .click(function(event) {
              event.preventDefault();
              show($(this).attr('id').substring(2));
            })
        )
        .append(
          $(document.createElement('a')).attr({
            href: '#',
            'class': 'sphinx-comment-close hidden',
            id: 'ah' + id
          })
            .append($(document.createElement('img')).attr({
              src: opts.closeCommentImage,
              alt: 'close',
              title: 'close'
            }))
            .click(function(event) {
              event.preventDefault();
              hide($(this).attr('id').substring(2));
            })
        );
    });
  };

  var opts = {
    processVoteURL: '/_process_vote',
    addCommentURL: '/_add_comment',
    getCommentsURL: '/_get_comments',
    acceptCommentURL: '/_accept_comment',
    deleteCommentURL: '/_delete_comment',
    commentImage: '/static/_static/comment.png',
    closeCommentImage: '/static/_static/comment-close.png',
    loadingImage: '/static/_static/ajax-loader.gif',
    commentBrightImage: '/static/_static/comment-bright.png',
    upArrow: '/static/_static/up.png',
    downArrow: '/static/_static/down.png',
    upArrowPressed: '/static/_static/up-pressed.png',
    downArrowPressed: '/static/_static/down-pressed.png',
    voting: false,
    moderator: false
  };

  if (typeof COMMENT_OPTIONS != "undefined") {
    opts = jQuery.extend(opts, COMMENT_OPTIONS);
  }

  var popupTemplate = '\\
    <div class="sphinx-comments" id="sc<%id%>">\\
      <p class="sort-options">\\
        Sort by:\\
        <a href="#" class="sort-option byrating">best rated</a>\\
        <a href="#" class="sort-option byascage">newest</a>\\
        <a href="#" class="sort-option byage">oldest</a>\\
      </p>\\
      <div class="comment-header">Comments</div>\\
      <div class="comment-loading" id="cn<%id%>">\\
        loading comments... <img src="<%loadingImage%>" alt="" /></div>\\
      <ul id="cl<%id%>" class="comment-ul"></ul>\\
      <div id="ca<%id%>">\\
      <p class="add-a-comment">Add a comment\\
        (<a href="#" class="comment-markup" id="ab<%id%>">markup</a>):</p>\\
      <div class="comment-markup-box" id="mb<%id%>">\\
        reStructured text markup: <i>*emph*</i>, <b>**strong**</b>, \\
        <code>``code``</code>, \\
        code blocks: <code>::</code> and an indented block after blank line</div>\\
      <form method="post" id="cf<%id%>" class="comment-form" action="">\\
        <textarea name="comment" cols="80"></textarea>\\
        <p class="propose-button">\\
          <a href="#" id="pc<%id%>" class="show-propose-change">\\
            Propose a change &#9657;\\
          </a>\\
          <a href="#" id="hc<%id%>" class="hide-propose-change">\\
            Propose a change &#9663;\\
          </a>\\
        </p>\\
        <textarea name="proposal" id="pt<%id%>" cols="80"\\
                  spellcheck="false"></textarea>\\
        <input type="submit" value="Add comment" />\\
        <input type="hidden" name="node" value="<%id%>" />\\
        <input type="hidden" name="parent" value="" />\\
      </form>\\
      </div>\\
    </div>';

  var commentTemplate = '\\
    <div id="cd<%id%>" class="sphinx-comment<%css_class%>">\\
      <div class="vote">\\
        <div class="arrow">\\
          <a href="#" id="uv<%id%>" class="vote" title="vote up">\\
            <img src="<%upArrow%>" />\\
          </a>\\
          <a href="#" id="uu<%id%>" class="un vote" title="vote up">\\
            <img src="<%upArrowPressed%>" />\\
          </a>\\
        </div>\\
        <div class="arrow">\\
          <a href="#" id="dv<%id%>" class="vote" title="vote down">\\
            <img src="<%downArrow%>" id="da<%id%>" />\\
          </a>\\
          <a href="#" id="du<%id%>" class="un vote" title="vote down">\\
            <img src="<%downArrowPressed%>" />\\
          </a>\\
        </div>\\
      </div>\\
      <div class="comment-content">\\
        <p class="tagline comment">\\
          <span class="user-id"><%username%></span>\\
          <span class="rating"><%pretty_rating%></span>\\
          <span class="delta"><%time.delta%></span>\\
        </p>\\
        <div class="comment-text comment"><#text#></div>\\
        <p class="comment-opts comment">\\
          <a href="#" class="reply hidden" id="rl<%id%>">reply &#9657;</a>\\
          <a href="#" class="close-reply" id="cr<%id%>">reply &#9663;</a>\\
          <a href="#" id="sp<%id%>" class="show-proposal">proposal &#9657;</a>\\
          <a href="#" id="hp<%id%>" class="hide-proposal">proposal &#9663;</a>\\
          <a href="#" id="dc<%id%>" class="delete-comment hidden">delete</a>\\
          <span id="cm<%id%>" class="moderation hidden">\\
            <a href="#" id="ac<%id%>" class="accept-comment">accept</a>\\
          </span>\\
        </p>\\
        <pre class="proposal" id="pr<%id%>">\\
<#proposal_diff#>\\
        </pre>\\
          <ul class="comment-children" id="cl<%id%>"></ul>\\
        </div>\\
        <div class="clearleft"></div>\\
      </div>\\
    </div>';

  var replyTemplate = '\\
    <li>\\
      <div class="reply-div" id="rd<%id%>">\\
        <form id="rf<%id%>">\\
          <textarea name="comment" cols="80"></textarea>\\
          <input type="submit" value="Add reply" />\\
          <input type="button" value="Cancel" />\\
          <input type="hidden" name="parent" value="<%id%>" />\\
          <input type="hidden" name="node" value="" />\\
        </form>\\
      </div>\\
    </li>';

  $(document).ready(function() {
    init();
  });
})(jQuery);

$(document).ready(function() {
  // add comment anchors for all paragraphs that are commentable
  $('.sphinx-has-comment').comment();

  // highlight search words in search results
  $("div.context").each(function() {
    var params = $.getQueryParameters();
    var terms = (params.q) ? params.q[0].split(/\\s+/) : [];
    var result = $(this);
    $.each(terms, function() {
      result.highlightText(this.toLowerCase(), 'highlighted');
    });
  });

  // directly open comment window if requested
  var anchor = document.location.hash;
  if (anchor.substring(0, 9) == '#comment-') {
    $('#ao' + anchor.substring(9)).click();
    document.location.hash = '#s' + anchor.substring(9);
  }
});
'''

snapshots['test_build_all_docs 49'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Decorators &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Execution" href="execution.html" />
    <link rel="prev" title="Definitions" href="definitions.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="decorators">
<h1>Decorators<a class="headerlink" href="#decorators" title="Permalink to this headline">¶</a></h1>
<p>A more concise way to define solids.</p>
<dl class="function">
<dt id="dagster.lambda_solid">
<code class="descclassname">dagster.</code><code class="descname">lambda_solid</code><span class="sig-paren">(</span><em>name=None</em>, <em>inputs=None</em>, <em>output=None</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.lambda_solid" title="Permalink to this definition">¶</a></dt>
<dd><p>(decorator) Create a simple solid.</p>
<p>This shortcut allows the creation of simple solids that do not require
configuration and whose implementations do not require a context.</p>
<p>Lambda solids take inputs and produce a single output. The body of the function
should return a single value.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first last simple">
<li><strong>name</strong> (<em>str</em>) – Name of solid.</li>
<li><strong>inputs</strong> (<em>list</em><em>[</em><a class="reference internal" href="definitions.html#dagster.InputDefinition" title="dagster.InputDefinition"><em>InputDefinition</em></a><em>]</em>) – List of inputs.</li>
<li><strong>output</strong> (<a class="reference internal" href="definitions.html#dagster.OutputDefinition" title="dagster.OutputDefinition"><em>OutputDefinition</em></a>) – The output of the solid. Defaults to <code class="docutils literal notranslate"><span class="pre">OutputDefinition()</span></code>.</li>
<li><strong>description</strong> (<em>str</em>) – Solid description.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="nd">@lambda_solid</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s1">&#39;hello&#39;</span>

<span class="nd">@lambda_solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;foo&#39;</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">foo</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">foo</span>
</pre></div>
</div>
</dd></dl>

<dl class="function">
<dt id="dagster.solid">
<code class="descclassname">dagster.</code><code class="descname">solid</code><span class="sig-paren">(</span><em>name=None</em>, <em>inputs=None</em>, <em>outputs=None</em>, <em>config_field=None</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.solid" title="Permalink to this definition">¶</a></dt>
<dd><p>(decorator) Create a solid with specified parameters.</p>
<p>This shortcut simplifies the core solid API by exploding arguments into kwargs of the
transform function and omitting additional parameters when they are not needed.
Parameters are otherwise as in the core API, <a class="reference internal" href="definitions.html#dagster.SolidDefinition" title="dagster.SolidDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">SolidDefinition</span></code></a>.</p>
<p>The decorated function will be used as the solid’s transform function. Unlike in the core API,
the transform function does not have to yield <a class="reference internal" href="definitions.html#dagster.Result" title="dagster.Result"><code class="xref py py-class docutils literal notranslate"><span class="pre">Result</span></code></a> object directly. Several
simpler alternatives are available:</p>
<ol class="arabic simple">
<li>Return a value. This is returned as a <a class="reference internal" href="definitions.html#dagster.Result" title="dagster.Result"><code class="xref py py-class docutils literal notranslate"><span class="pre">Result</span></code></a> for a single output solid.</li>
<li>Return a <a class="reference internal" href="definitions.html#dagster.Result" title="dagster.Result"><code class="xref py py-class docutils literal notranslate"><span class="pre">Result</span></code></a>. Works like yielding result.</li>
<li>Return an instance of <a class="reference internal" href="#dagster.MultipleResults" title="dagster.MultipleResults"><code class="xref py py-class docutils literal notranslate"><span class="pre">MultipleResults</span></code></a>. Works like yielding several results for
multiple outputs. Useful for solids that have multiple outputs.</li>
<li>Yield <a class="reference internal" href="definitions.html#dagster.Result" title="dagster.Result"><code class="xref py py-class docutils literal notranslate"><span class="pre">Result</span></code></a>. Same as default transform behaviour.</li>
</ol>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first last simple">
<li><strong>name</strong> (<em>str</em>) – Name of solid.</li>
<li><strong>inputs</strong> (<em>list</em><em>[</em><a class="reference internal" href="definitions.html#dagster.InputDefinition" title="dagster.InputDefinition"><em>InputDefinition</em></a><em>]</em>) – List of inputs.</li>
<li><strong>outputs</strong> (<em>list</em><em>[</em><a class="reference internal" href="definitions.html#dagster.OutputDefinition" title="dagster.OutputDefinition"><em>OutputDefinition</em></a><em>]</em>) – List of outputs.</li>
<li><strong>config_field</strong> (<em>Field</em>) – The configuration for this solid.</li>
<li><strong>description</strong> (<em>str</em>) – Description of this solid.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="nd">@solid</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">_context</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>

<span class="nd">@solid</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">_context</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>

<span class="nd">@solid</span><span class="p">(</span><span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">()])</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">_context</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">}</span>

<span class="nd">@solid</span><span class="p">(</span><span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">()])</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">_context</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">Result</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">})</span>

<span class="nd">@solid</span><span class="p">(</span><span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">()])</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">_context</span><span class="p">):</span>
    <span class="k">yield</span> <span class="n">Result</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;bar&#39;</span><span class="p">})</span>

<span class="nd">@solid</span><span class="p">(</span><span class="n">outputs</span><span class="o">=</span><span class="p">[</span>
    <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;left&quot;</span><span class="p">),</span>
    <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;right&quot;</span><span class="p">),</span>
<span class="p">])</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">_context</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">MultipleResults</span><span class="o">.</span><span class="n">from_dict</span><span class="p">({</span>
        <span class="s1">&#39;left&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;left&#39;</span><span class="p">},</span>
        <span class="s1">&#39;right&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;right&#39;</span><span class="p">},</span>
    <span class="p">})</span>

<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="p">)],</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">()]</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">_context</span><span class="p">,</span> <span class="n">foo</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">foo</span>

<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="p">)],</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">()],</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">foo</span><span class="p">):</span>
    <span class="n">context</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;log something&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">foo</span>

<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="p">)],</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">()],</span>
    <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">Dict</span><span class="p">({</span><span class="s1">&#39;str_value&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">)})),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">foo</span><span class="p">):</span>
    <span class="c1"># context.solid_config is a dictionary with &#39;str_value&#39; key</span>
    <span class="k">return</span> <span class="n">foo</span> <span class="o">+</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">[</span><span class="s1">&#39;str_value&#39;</span><span class="p">]</span>
</pre></div>
</div>
</dd></dl>

<dl class="class">
<dt id="dagster.MultipleResults">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">MultipleResults</code><a class="headerlink" href="#dagster.MultipleResults" title="Permalink to this definition">¶</a></dt>
<dd><p>A shortcut to output multiple results.</p>
<p>When using the <a class="reference internal" href="#dagster.solid" title="dagster.solid"><code class="xref py py-func docutils literal notranslate"><span class="pre">&#64;solid</span></code></a> API, you may return an instance of
<code class="docutils literal notranslate"><span class="pre">MultipleResults</span></code> from a decorated transform function instead of yielding multiple results.</p>
<dl class="attribute">
<dt id="dagster.MultipleResults.results">
<code class="descname">results</code><a class="headerlink" href="#dagster.MultipleResults.results" title="Permalink to this definition">¶</a></dt>
<dd><p><em>list[Result]</em> – list of <a class="reference internal" href="definitions.html#dagster.Result" title="dagster.Result"><code class="xref py py-class docutils literal notranslate"><span class="pre">Result</span></code></a></p>
</dd></dl>

<p class="rubric">Examples</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="nd">@solid</span><span class="p">(</span><span class="n">outputs</span><span class="o">=</span><span class="p">[</span>
    <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;foo&#39;</span><span class="p">),</span>
    <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">),</span>
<span class="p">])</span>
<span class="k">def</span> <span class="nf">my_solid</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">MultipleResults</span><span class="p">(</span>
        <span class="n">Result</span><span class="p">(</span><span class="s1">&#39;Barb&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">),</span>
        <span class="n">Result</span><span class="p">(</span><span class="s1">&#39;Glarb&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">),</span>
    <span class="p">)</span>


<span class="nd">@solid</span><span class="p">(</span><span class="n">outputs</span><span class="o">=</span><span class="p">[</span>
    <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;foo&#39;</span><span class="p">),</span>
    <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;bar&#39;</span><span class="p">),</span>
<span class="p">])</span>
<span class="k">def</span> <span class="nf">my_solid_from_dict</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">MultipleResults</span><span class="o">.</span><span class="n">from_dict</span><span class="p">({</span>
    <span class="s1">&#39;foo&#39;</span><span class="p">:</span> <span class="s1">&#39;Barb&#39;</span><span class="p">,</span>
    <span class="s1">&#39;bar&#39;</span><span class="p">:</span> <span class="s1">&#39;Glarb&#39;</span><span class="p">,</span>
    <span class="p">})</span>
</pre></div>
</div>
<dl class="staticmethod">
<dt id="dagster.MultipleResults.from_dict">
<em class="property">static </em><code class="descname">from_dict</code><span class="sig-paren">(</span><em>result_dict</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.MultipleResults.from_dict" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a new <code class="docutils literal notranslate"><span class="pre">MultipleResults</span></code> object from a dictionary.</p>
<p>Keys of the dictionary are unpacked into result names.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>result_dict</strong> (<em>dict</em>) – </td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">(<a class="reference internal" href="#dagster.MultipleResults" title="dagster.MultipleResults"><code class="xref py py-class docutils literal notranslate"><span class="pre">MultipleResults</span></code></a>) A new <code class="docutils literal notranslate"><span class="pre">MultipleResults</span></code> object</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="definitions.html">Definitions</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="definitions.html" title="previous chapter">Definitions</a></li>
      <li>Next: <a href="execution.html" title="next chapter">Execution</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/apidocs/decorators.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/apidocs/decorators.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 50'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Definitions &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Decorators" href="decorators.html" />
    <link rel="prev" title="Unit-testing Pipelines" href="../intro_tutorial/unittesting.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="definitions">
<h1>Definitions<a class="headerlink" href="#definitions" title="Permalink to this headline">¶</a></h1>
<p>Core API for defining solids and pipelines.</p>
<dl class="class">
<dt id="dagster.DependencyDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">DependencyDefinition</code><a class="headerlink" href="#dagster.DependencyDefinition" title="Permalink to this definition">¶</a></dt>
<dd><p>Dependency definitions represent an edge in the DAG of solids. This object is
used with a dictionary structure (whose keys represent solid/input where the dependency
comes from) so this object only contains the target dependency information.</p>
<dl class="attribute">
<dt id="dagster.DependencyDefinition.solid">
<code class="descname">solid</code><a class="headerlink" href="#dagster.DependencyDefinition.solid" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – The name of the solid that is the target of the dependency.
This is the solid where the value passed between the solids
comes from.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.DependencyDefinition.output">
<code class="descname">output</code><a class="headerlink" href="#dagster.DependencyDefinition.output" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – The name of the output that is the target of the dependency.
Defaults to “result”, the default output name of solids with a single output.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.DependencyDefinition.description">
<code class="descname">description</code><a class="headerlink" href="#dagster.DependencyDefinition.description" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Description of this dependency. Optional.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dagster.ExpectationDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">ExpectationDefinition</code><span class="sig-paren">(</span><em>name</em>, <em>expectation_fn</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.ExpectationDefinition" title="Permalink to this definition">¶</a></dt>
<dd><p>Expectations represent a data quality test. It performs an arbitrary computation
to see if a given input or output satisfies the expectation.</p>
<dl class="attribute">
<dt id="dagster.ExpectationDefinition.name">
<code class="descname">name</code><a class="headerlink" href="#dagster.ExpectationDefinition.name" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – The name of the expectation. Names should be unique per-solid.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.ExpectationDefinition.expectation_fn">
<code class="descname">expectation_fn</code><a class="headerlink" href="#dagster.ExpectationDefinition.expectation_fn" title="Permalink to this definition">¶</a></dt>
<dd><p><em>callable</em> – This is the implementation of an expectation computation. It should be a callback
with the signature (<strong>context</strong>: <cite>ExecutionContext</cite>, <strong>info</strong>:
<cite>ExpectationExecutionInfo</cite>, <strong>value</strong>: <cite>Any</cite>) : <cite>ExpectationResult</cite>.</p>
<p>“value” conforms to the type check performed within the Dagster type system.</p>
<p>e.g. If the expectation is declared on an input of type <code class="docutils literal notranslate"><span class="pre">dagster_pandas.DataFrame</span></code>,
you can assume that value is a <code class="docutils literal notranslate"><span class="pre">pandas.DataFrame</span></code>.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.ExpectationDefinition.description">
<code class="descname">description</code><a class="headerlink" href="#dagster.ExpectationDefinition.description" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Description of expectation. Optional.</p>
</dd></dl>

<p class="rubric">Examples</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;some_input&#39;</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">Int</span><span class="p">,</span> <span class="n">expectations</span><span class="o">=</span><span class="p">[</span>
    <span class="n">ExpectationDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;is_positive&#39;</span><span class="p">,</span>
        <span class="n">expectation_fn</span><span class="o">=</span><span class="k">lambda</span><span class="p">(</span>
            <span class="n">_info</span><span class="p">,</span>
            <span class="n">value</span><span class="p">,</span>
        <span class="p">):</span> <span class="n">ExpectationResult</span><span class="p">(</span><span class="n">success</span><span class="o">=</span><span class="n">value</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">),</span>
    <span class="p">)</span>
<span class="p">])</span>
</pre></div>
</div>
</dd></dl>

<dl class="class">
<dt id="dagster.ExpectationResult">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">ExpectationResult</code><span class="sig-paren">(</span><em>success</em>, <em>message=None</em>, <em>result_context=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.ExpectationResult" title="Permalink to this definition">¶</a></dt>
<dd><p>Result of an expectation callback.</p>
<p>When Expectations are evaluated in the callback passed to ExpectationDefinitions,
the user must return an ExpectationResult object from the callback.</p>
<dl class="attribute">
<dt id="dagster.ExpectationResult.success">
<code class="descname">success</code><a class="headerlink" href="#dagster.ExpectationResult.success" title="Permalink to this definition">¶</a></dt>
<dd><p><em>bool</em> – Whether the expectation passed or not.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.ExpectationResult.message">
<code class="descname">message</code><a class="headerlink" href="#dagster.ExpectationResult.message" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Information about the computation. Typically only used in the failure case.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.ExpectationResult.result_context">
<code class="descname">result_context</code><a class="headerlink" href="#dagster.ExpectationResult.result_context" title="Permalink to this definition">¶</a></dt>
<dd><p><em>Any</em> – Arbitrary information about the expectation result.</p>
</dd></dl>

</dd></dl>

<dl class="function">
<dt id="dagster.Field">
<code class="descclassname">dagster.</code><code class="descname">Field</code><span class="sig-paren">(</span><em>dagster_type</em>, <em>default_value=&lt;class \'dagster.core.types.field_utils.__FieldValueSentinel\'&gt;</em>, <em>is_optional=&lt;class \'dagster.core.types.field_utils.__InferOptionalCompositeFieldSentinel\'&gt;</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.Field" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="class">
<dt id="dagster.InputDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">InputDefinition</code><span class="sig-paren">(</span><em>name</em>, <em>dagster_type=None</em>, <em>expectations=None</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.InputDefinition" title="Permalink to this definition">¶</a></dt>
<dd><p>An InputDefinition instance represents an argument to a transform defined within a solid.
Inputs are values within the dagster type system that are created from previous solids.</p>
<dl class="attribute">
<dt id="dagster.InputDefinition.name">
<code class="descname">name</code><a class="headerlink" href="#dagster.InputDefinition.name" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Name of the input.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.InputDefinition.runtime_type">
<code class="descname">runtime_type</code><a class="headerlink" href="#dagster.InputDefinition.runtime_type" title="Permalink to this definition">¶</a></dt>
<dd><p><em>DagsterType</em> – Type of the input. Defaults to types.Any</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.InputDefinition.expectations">
<code class="descname">expectations</code><a class="headerlink" href="#dagster.InputDefinition.expectations" title="Permalink to this definition">¶</a></dt>
<dd><p><em>List[ExpectationDefinition]</em> – List of expectations that applies to the value passed to the solid.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.InputDefinition.description">
<code class="descname">description</code><a class="headerlink" href="#dagster.InputDefinition.description" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Description of the input. Optional.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dagster.OutputDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">OutputDefinition</code><span class="sig-paren">(</span><em>dagster_type=None</em>, <em>name=None</em>, <em>expectations=None</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.OutputDefinition" title="Permalink to this definition">¶</a></dt>
<dd><p>An OutputDefinition represents an output from a solid. Solids can have multiple
outputs. In those cases the outputs must be named. Frequently solids have only one
output, and so the user can construct a single OutputDefinition that will have
the default name of “result”.</p>
<dl class="attribute">
<dt id="dagster.OutputDefinition.runtime_type">
<code class="descname">runtime_type</code><a class="headerlink" href="#dagster.OutputDefinition.runtime_type" title="Permalink to this definition">¶</a></dt>
<dd><p><em>DagsterType</em> – Type of the output. Defaults to types.Any.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.OutputDefinition.name">
<code class="descname">name</code><a class="headerlink" href="#dagster.OutputDefinition.name" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Name of the output. Defaults to “result”.</p>
</dd></dl>

<dl class="attribute">
<dt>
<code class="descname">expectations List[ExpectationDefinition]</code></dt>
<dd><p>Expectations for this output.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.OutputDefinition.description">
<code class="descname">description</code><a class="headerlink" href="#dagster.OutputDefinition.description" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Description of the output. Optional.</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dagster.PipelineContextDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">PipelineContextDefinition</code><span class="sig-paren">(</span><em>context_fn=None</em>, <em>config_field=None</em>, <em>resources=None</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PipelineContextDefinition" title="Permalink to this definition">¶</a></dt>
<dd><p>Defines a context type supported by a pipeline.</p>
<p>Pipelines declare the different context types they support, in the form
of PipelineContextDefinitions. For example a pipeline could declare a context
definition for different operating environments: unittest, integration tests,
production and so forth. The user provides a context function that returns an
<code class="docutils literal notranslate"><span class="pre">ExecutionContext</span></code> that is passed to every solid. One can hang resources
(such as db connections) off of that context. Thus the pipeline author
has complete control over how the author of each individual solid within
the pipeline interacts with its operating environment.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">PipelineContextDefinition</span></code> is passed to the <code class="docutils literal notranslate"><span class="pre">PipelineDefinition</span></code> in
a dictionary keyed by its name so the name is not present in this object.</p>
<dl class="attribute">
<dt id="dagster.PipelineContextDefinition.config_field">
<code class="descname">config_field</code><a class="headerlink" href="#dagster.PipelineContextDefinition.config_field" title="Permalink to this definition">¶</a></dt>
<dd><p><em>Field</em> – The configuration for the pipeline context.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineContextDefinition.context_fn">
<code class="descname">context_fn</code><a class="headerlink" href="#dagster.PipelineContextDefinition.context_fn" title="Permalink to this definition">¶</a></dt>
<dd><p><em>callable</em> – Signature is (<strong>pipeline</strong>: <cite>PipelineDefintion</cite>, <strong>config_value</strong>: <cite>Any</cite>) :
<cite>ExecutionContext</cite>.</p>
<p>A callable that either returns <em>or</em> yields an <code class="docutils literal notranslate"><span class="pre">ExecutionContext</span></code>.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineContextDefinition.description">
<code class="descname">description</code><a class="headerlink" href="#dagster.PipelineContextDefinition.description" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – A description of what this context represents</p>
</dd></dl>

<dl class="staticmethod">
<dt id="dagster.PipelineContextDefinition.passthrough_context_definition">
<em class="property">static </em><code class="descname">passthrough_context_definition</code><span class="sig-paren">(</span><em>context_params</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PipelineContextDefinition.passthrough_context_definition" title="Permalink to this definition">¶</a></dt>
<dd><p>Create a context definition from a pre-existing context. This can be useful
in testing contexts where you may want to create a context manually and then
pass it into a one-off PipelineDefinition</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>context</strong> (<a class="reference internal" href="execution.html#dagster.ExecutionContext" title="dagster.ExecutionContext"><em>ExecutionContext</em></a>) – The context that will provided to the pipeline.</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">The passthrough context definition.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="#dagster.PipelineContextDefinition" title="dagster.PipelineContextDefinition">PipelineContextDefinition</a></td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dagster.PipelineDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">PipelineDefinition</code><span class="sig-paren">(</span><em>solids</em>, <em>name=None</em>, <em>description=None</em>, <em>context_definitions=None</em>, <em>dependencies=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PipelineDefinition" title="Permalink to this definition">¶</a></dt>
<dd><p>A instance of a PipelineDefinition represents a pipeline in dagster.</p>
<p>A pipeline is comprised of:</p>
<ul class="simple">
<li><dl class="first docutils">
<dt>Solids:</dt>
<dd>Each solid represents a functional unit of data computation.</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>Context Definitions:</dt>
<dd>Pipelines can be designed to execute in a number of different operating environments
(e.g. prod, dev, unittest) that require different configuration and setup. A context
definition defines how a context (of type ExecutionContext) is created and what
configuration is necessary to create it.</dd>
</dl>
</li>
<li><dl class="first docutils">
<dt>Dependencies:</dt>
<dd>Solids within a pipeline are arranged as a DAG (directed, acyclic graph). Dependencies
determine how the values produced by solids flow through the DAG.</dd>
</dl>
</li>
</ul>
<dl class="attribute">
<dt id="dagster.PipelineDefinition.name">
<code class="descname">name</code><a class="headerlink" href="#dagster.PipelineDefinition.name" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Name of the pipeline. Must be unique per-repository.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineDefinition.description">
<code class="descname">description</code><a class="headerlink" href="#dagster.PipelineDefinition.description" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Description of the pipeline. Optional.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineDefinition.solids">
<code class="descname">solids</code><a class="headerlink" href="#dagster.PipelineDefinition.solids" title="Permalink to this definition">¶</a></dt>
<dd><p><em>List[SolidDefinition]</em> – List of the solids in this pipeline.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineDefinition.dependencies">
<code class="descname">dependencies</code><a class="headerlink" href="#dagster.PipelineDefinition.dependencies" title="Permalink to this definition">¶</a></dt>
<dd><p><em>Dict[str, Dict[str, DependencyDefinition]]</em> – Dependencies that constitute the structure of the pipeline. This is a two-dimensional
array that maps solid_name =&gt; input_name =&gt; DependencyDefiniion instance</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineDefinition.context_definitions">
<code class="descname">context_definitions</code><a class="headerlink" href="#dagster.PipelineDefinition.context_definitions" title="Permalink to this definition">¶</a></dt>
<dd><p><em>Dict[str, PipelineContextDefinition]</em> – The context definitions available for consumers of this pipelines. For example, a
unit-testing environment and a production environment probably have very different
configuration and requirements. There would be one context definition per
environment.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineDefinition.dependency_structure">
<code class="descname">dependency_structure</code><a class="headerlink" href="#dagster.PipelineDefinition.dependency_structure" title="Permalink to this definition">¶</a></dt>
<dd><p><em>DependencyStructure</em> – Used mostly internally. This has the same information as the dependencies data
structure, but indexed for fast usage.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineDefinition.display_name">
<code class="descname">display_name</code><a class="headerlink" href="#dagster.PipelineDefinition.display_name" title="Permalink to this definition">¶</a></dt>
<dd><p>Name suitable for exception messages, logging etc. If pipeline
is unnamed the method with return “&lt;&lt;unnamed&gt;&gt;”.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">Display name of pipeline</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">str</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="method">
<dt id="dagster.PipelineDefinition.has_solid">
<code class="descname">has_solid</code><span class="sig-paren">(</span><em>name</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PipelineDefinition.has_solid" title="Permalink to this definition">¶</a></dt>
<dd><p>Return whether or not the solid is in the piepline</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>name</strong> (<em>str</em>) – Name of solid</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">True if the solid is in the pipeline</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body">bool</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="method">
<dt id="dagster.PipelineDefinition.solid_named">
<code class="descname">solid_named</code><span class="sig-paren">(</span><em>name</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PipelineDefinition.solid_named" title="Permalink to this definition">¶</a></dt>
<dd><p>Return the solid named “name”. Throws if it does not exist.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>name</strong> (<em>str</em>) – Name of solid</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">SolidDefinition with correct name.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="#dagster.SolidDefinition" title="dagster.SolidDefinition">SolidDefinition</a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="attribute">
<dt>
<code class="descname">solids</code></dt>
<dd><p>Return the solids in the pipeline.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">List of solids.</td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">List[<a class="reference internal" href="#dagster.SolidDefinition" title="dagster.SolidDefinition">SolidDefinition</a>]</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dagster.RepositoryDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">RepositoryDefinition</code><span class="sig-paren">(</span><em>name</em>, <em>pipeline_dict</em>, <em>enforce_uniqueness=True</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.RepositoryDefinition" title="Permalink to this definition">¶</a></dt>
<dd><p>Define a repository that contains a collection of pipelines.</p>
<dl class="attribute">
<dt id="dagster.RepositoryDefinition.name">
<code class="descname">name</code><a class="headerlink" href="#dagster.RepositoryDefinition.name" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – The name of the pipeline.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.RepositoryDefinition.pipeline_dict">
<code class="descname">pipeline_dict</code><a class="headerlink" href="#dagster.RepositoryDefinition.pipeline_dict" title="Permalink to this definition">¶</a></dt>
<dd><p><em>Dict[str, callable]</em> – An dictionary of pipelines. The value of the dictionary is a function that takes
no parameters and returns a PipelineDefiniton.</p>
<p>We pass callables instead of the PipelineDefinitions itself so that they can be
created on demand when accessed by name.</p>
<p>As the pipelines are retrieved it ensures that the keys of the dictionary and the
name of the pipeline are the same.</p>
</dd></dl>

<dl class="method">
<dt id="dagster.RepositoryDefinition.get_all_pipelines">
<code class="descname">get_all_pipelines</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#dagster.RepositoryDefinition.get_all_pipelines" title="Permalink to this definition">¶</a></dt>
<dd><p>Return all pipelines as a list</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body"></td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">List[<a class="reference internal" href="#dagster.PipelineDefinition" title="dagster.PipelineDefinition">PipelineDefinition</a>]</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="method">
<dt id="dagster.RepositoryDefinition.get_pipeline">
<code class="descname">get_pipeline</code><span class="sig-paren">(</span><em>name</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.RepositoryDefinition.get_pipeline" title="Permalink to this definition">¶</a></dt>
<dd><p>Get a pipeline by name. Only constructs that pipeline and caches it.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><strong>name</strong> (<em>str</em>) – Name of the pipeline to retriever</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body">Instance of PipelineDefinition with that name.</td>
</tr>
<tr class="field-odd field"><th class="field-name">Return type:</th><td class="field-body"><a class="reference internal" href="#dagster.PipelineDefinition" title="dagster.PipelineDefinition">PipelineDefinition</a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="method">
<dt id="dagster.RepositoryDefinition.iterate_over_pipelines">
<code class="descname">iterate_over_pipelines</code><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#dagster.RepositoryDefinition.iterate_over_pipelines" title="Permalink to this definition">¶</a></dt>
<dd><p>Yield all pipelines one at a time</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body"></td>
</tr>
<tr class="field-even field"><th class="field-name">Return type:</th><td class="field-body">Iterable[<a class="reference internal" href="#dagster.PipelineDefinition" title="dagster.PipelineDefinition">PipelineDefinition</a>]</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dagster.ResourceDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">ResourceDefinition</code><span class="sig-paren">(</span><em>resource_fn</em>, <em>config_field=None</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.ResourceDefinition" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="class">
<dt id="dagster.Result">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">Result</code><a class="headerlink" href="#dagster.Result" title="Permalink to this definition">¶</a></dt>
<dd><p>A solid transform function return a stream of Result objects.
An implementator of a SolidDefinition must provide a transform that
yields objects of this type.</p>
<dl class="attribute">
<dt id="dagster.Result.value">
<code class="descname">value</code><a class="headerlink" href="#dagster.Result.value" title="Permalink to this definition">¶</a></dt>
<dd><p><em>Any</em> – Value returned by the transform.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.Result.output_name">
<code class="descname">output_name</code><a class="headerlink" href="#dagster.Result.output_name" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Name of the output returns. defaults to “result”</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dagster.SolidDefinition">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">SolidDefinition</code><span class="sig-paren">(</span><em>name</em>, <em>inputs</em>, <em>transform_fn</em>, <em>outputs</em>, <em>config_field=None</em>, <em>description=None</em>, <em>metadata=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.SolidDefinition" title="Permalink to this definition">¶</a></dt>
<dd><p>A solid (a name extracted from the acronym of “software-structured data” (SSD)) represents
a unit of computation within a data pipeline.</p>
<p>As its core, a solid is a function. It accepts inputs (which are values produced from
other solids) and configuration, and produces outputs. These solids are composed as a
directed, acyclic graph (DAG) within a pipeline to form a computation that produces
data assets.</p>
<p>Solids should be implemented as idempotent, parameterizable, non-destructive functions.
Data computations with these properties are much easier to test, reason about, and operate.</p>
<p>The inputs and outputs are gradually, optionally typed by the dagster type system. Types
can be user-defined and can represent entites as varied as scalars, dataframe, database
tables, and so forth. They can represent pure in-memory objects, or handles to assets
on disk or in external resources.</p>
<p>A solid is a generalized abstraction that could take many forms.</p>
<p>End users should prefer the &#64;solid and &#64;lambda_solid decorator. SolidDefinition
is generally used by framework authors.</p>
<dl class="attribute">
<dt id="dagster.SolidDefinition.name">
<code class="descname">name</code><a class="headerlink" href="#dagster.SolidDefinition.name" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Name of the solid.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidDefinition.input_defs">
<code class="descname">input_defs</code><a class="headerlink" href="#dagster.SolidDefinition.input_defs" title="Permalink to this definition">¶</a></dt>
<dd><p><em>List[InputDefinition]</em> – Inputs of the solid.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidDefinition.transform_fn">
<code class="descname">transform_fn</code><a class="headerlink" href="#dagster.SolidDefinition.transform_fn" title="Permalink to this definition">¶</a></dt>
<dd><p><em>callable</em> – Callable with the signature (<strong>info</strong>: <cite>TransformExecutionContext</cite>,
<strong>inputs</strong>: <cite>Dict[str, Any]</cite>) : <cite>Iterable&lt;Result&gt;</cite></p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidDefinition.outputs_defs">
<code class="descname">outputs_defs</code><a class="headerlink" href="#dagster.SolidDefinition.outputs_defs" title="Permalink to this definition">¶</a></dt>
<dd><p><em>List[OutputDefinition]</em> – Outputs of the solid.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidDefinition.config_field">
<code class="descname">config_field</code><a class="headerlink" href="#dagster.SolidDefinition.config_field" title="Permalink to this definition">¶</a></dt>
<dd><p><em>Field</em> – How the solid configured.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidDefinition.description">
<code class="descname">description</code><a class="headerlink" href="#dagster.SolidDefinition.description" title="Permalink to this definition">¶</a></dt>
<dd><p><em>str</em> – Description of the solid.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidDefinition.metadata">
<code class="descname">metadata</code><a class="headerlink" href="#dagster.SolidDefinition.metadata" title="Permalink to this definition">¶</a></dt>
<dd><p><em>dict</em> – Arbitrary metadata for the solid. Some frameworks expect and require
certain metadata to be attached to a solid.</p>
</dd></dl>

<p class="rubric">Examples</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">_add_one</span><span class="p">(</span><span class="n">_context</span><span class="p">,</span> <span class="n">inputs</span><span class="p">):</span>
    <span class="k">yield</span> <span class="n">Result</span><span class="p">(</span><span class="n">inputs</span><span class="p">[</span><span class="s2">&quot;num&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">SolidDefinition</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s2">&quot;add_one&quot;</span><span class="p">,</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s2">&quot;num&quot;</span><span class="p">,</span> <span class="n">Int</span><span class="p">)],</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">Int</span><span class="p">)],</span> <span class="c1"># default name (&quot;result&quot;)</span>
    <span class="n">transform_fn</span><span class="o">=</span><span class="n">_add_one</span><span class="p">,</span>
<span class="p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class="class">
<dt id="dagster.SolidInstance">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">SolidInstance</code><a class="headerlink" href="#dagster.SolidInstance" title="Permalink to this definition">¶</a></dt>
<dd><p>A solid identifier in a dependency structure. Allows supplying parameters to the solid,
like the alias.</p>
<p class="rubric">Example</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">pipeline</span> <span class="o">=</span> <span class="n">Pipeline</span><span class="p">(</span>
    <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">solid_1</span><span class="p">,</span> <span class="n">solid_2</span><span class="p">]</span>
    <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
        <span class="n">SolidInstance</span><span class="p">(</span><span class="s1">&#39;solid_2&#39;</span><span class="p">,</span> <span class="n">alias</span><span class="o">=</span><span class="s1">&#39;other_name&#39;</span><span class="p">)</span> <span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;input_name&#39;</span> <span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;solid_2&#39;</span><span class="p">),</span>
        <span class="p">},</span>
        <span class="s1">&#39;solid_1&#39;</span> <span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;input_name&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;other_name&#39;</span><span class="p">),</span>
        <span class="p">},</span>
    <span class="p">}</span>
<span class="p">)</span>
</pre></div>
</div>
</dd></dl>

</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul class="current">
<li class="toctree-l1 current"><a class="current reference internal" href="#">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="../intro_tutorial/unittesting.html" title="previous chapter">Unit-testing Pipelines</a></li>
      <li>Next: <a href="decorators.html" title="next chapter">Decorators</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/apidocs/definitions.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/apidocs/definitions.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 51'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Errors &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Types" href="types.html" />
    <link rel="prev" title="Execution" href="execution.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="errors">
<h1>Errors<a class="headerlink" href="#errors" title="Permalink to this headline">¶</a></h1>
<p>Core dagster error classes.</p>
<dl class="exception">
<dt id="dagster.DagsterExpectationFailedError">
<em class="property">exception </em><code class="descclassname">dagster.</code><code class="descname">DagsterExpectationFailedError</code><span class="sig-paren">(</span><em>expectation_context</em>, <em>value</em>, <em>*args</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.DagsterExpectationFailedError" title="Permalink to this definition">¶</a></dt>
<dd><p>Thrown with pipeline configured to throw on expectation failure</p>
</dd></dl>

<dl class="exception">
<dt id="dagster.DagsterInvalidDefinitionError">
<em class="property">exception </em><code class="descclassname">dagster.</code><code class="descname">DagsterInvalidDefinitionError</code><a class="headerlink" href="#dagster.DagsterInvalidDefinitionError" title="Permalink to this definition">¶</a></dt>
<dd><p>Indicates that some violation of the definition rules has been violated by the user</p>
</dd></dl>

<dl class="exception">
<dt id="dagster.DagsterInvariantViolationError">
<em class="property">exception </em><code class="descclassname">dagster.</code><code class="descname">DagsterInvariantViolationError</code><a class="headerlink" href="#dagster.DagsterInvariantViolationError" title="Permalink to this definition">¶</a></dt>
<dd><p>Indicates the user has violated a well-defined invariant that can only be deteremined
at runtime.</p>
</dd></dl>

<dl class="exception">
<dt id="dagster.DagsterRuntimeCoercionError">
<em class="property">exception </em><code class="descclassname">dagster.</code><code class="descname">DagsterRuntimeCoercionError</code><a class="headerlink" href="#dagster.DagsterRuntimeCoercionError" title="Permalink to this definition">¶</a></dt>
<dd><p>Runtime checked faild</p>
</dd></dl>

<dl class="exception">
<dt id="dagster.DagsterTypeError">
<em class="property">exception </em><code class="descclassname">dagster.</code><code class="descname">DagsterTypeError</code><a class="headerlink" href="#dagster.DagsterTypeError" title="Permalink to this definition">¶</a></dt>
<dd><p>Indicates an error in the solid type system (e.g. mismatched arguments)</p>
</dd></dl>

<dl class="exception">
<dt id="dagster.DagsterUserCodeExecutionError">
<em class="property">exception </em><code class="descclassname">dagster.</code><code class="descname">DagsterUserCodeExecutionError</code><span class="sig-paren">(</span><em>*args</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.DagsterUserCodeExecutionError" title="Permalink to this definition">¶</a></dt>
<dd><p>This is base class for any exception that is meant to wrap an Exception
thrown by user code. It wraps that existing user code. The original_exc_info
argument to the ctor is meant to be a sys.exc_info at the site of constructor.</p>
<p>Example:</p>
<p>output_type = step.step_output_dict[output_name].runtime_type
try:</p>
<blockquote>
<div><dl class="docutils">
<dt>context.persistence_strategy.write_value(</dt>
<dd>output_type.serialization_strategy, output[‘path’], result.success_data.value</dd>
</dl>
<p>)</p>
</div></blockquote>
<dl class="docutils">
<dt>except Exception as e:  # pylint: disable=broad-except</dt>
<dd><dl class="first docutils">
<dt>raise_from(</dt>
<dd>DagsterExecutionStepExecutionError(…)
e,</dd>
</dl>
<p class="last">)</p>
</dd>
</dl>
</dd></dl>

<dl class="exception">
<dt id="dagster.PipelineConfigEvaluationError">
<em class="property">exception </em><code class="descclassname">dagster.</code><code class="descname">PipelineConfigEvaluationError</code><span class="sig-paren">(</span><em>pipeline</em>, <em>errors</em>, <em>config_value</em>, <em>*args</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PipelineConfigEvaluationError" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution.html">Execution</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="execution.html" title="previous chapter">Execution</a></li>
      <li>Next: <a href="types.html" title="next chapter">Types</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/apidocs/errors.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/apidocs/errors.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 52'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Execution &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Errors" href="errors.html" />
    <link rel="prev" title="Decorators" href="decorators.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="execution">
<h1>Execution<a class="headerlink" href="#execution" title="Permalink to this headline">¶</a></h1>
<p>Executing pipelines and solids.</p>
<dl class="function">
<dt id="dagster.execute_pipeline">
<code class="descclassname">dagster.</code><code class="descname">execute_pipeline</code><span class="sig-paren">(</span><em>pipeline</em>, <em>environment=None</em>, <em>throw_on_user_error=True</em>, <em>execution_metadata=None</em>, <em>solid_subset=None</em>, <em>engine_executor=&lt;dagster.core.execution.DagsterSimpleExecutor object&gt;</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.execute_pipeline" title="Permalink to this definition">¶</a></dt>
<dd><p>“Synchronous” version of <a class="reference internal" href="#dagster.execute_pipeline_iterator" title="dagster.execute_pipeline_iterator"><code class="xref py py-func docutils literal notranslate"><span class="pre">execute_pipeline_iterator()</span></code></a>.</p>
<p>Note: throw_on_user_error is very useful in testing contexts when not testing for error conditions</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first simple">
<li><strong>pipeline</strong> (<a class="reference internal" href="definitions.html#dagster.PipelineDefinition" title="dagster.PipelineDefinition"><em>PipelineDefinition</em></a>) – Pipeline to run</li>
<li><strong>environment</strong> (<em>dict</em>) – The enviroment that parameterizes this run</li>
<li><strong>throw_on_user_error</strong> (<em>bool</em>) – throw_on_user_error makes the function throw when an error is encoutered rather than returning
the py:class:<cite>SolidExecutionResult</cite> in an error-state.</li>
</ul>
</td>
</tr>
<tr class="field-even field"><th class="field-name">Returns:</th><td class="field-body"><p class="first last">PipelineExecutionResult</p>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="function">
<dt id="dagster.execute_pipeline_iterator">
<code class="descclassname">dagster.</code><code class="descname">execute_pipeline_iterator</code><span class="sig-paren">(</span><em>pipeline</em>, <em>environment=None</em>, <em>throw_on_user_error=True</em>, <em>execution_metadata=None</em>, <em>solid_subset=None</em>, <em>engine_executor=&lt;dagster.core.execution.DagsterSimpleExecutor object&gt;</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.execute_pipeline_iterator" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns iterator that yields <a class="reference internal" href="#dagster.SolidExecutionResult" title="dagster.SolidExecutionResult"><code class="xref py py-class docutils literal notranslate"><span class="pre">SolidExecutionResult</span></code></a> for each
solid executed in the pipeline.</p>
<p>This is intended to allow the caller to do things between each executed
node. For the ‘synchronous’ API, see <a class="reference internal" href="#dagster.execute_pipeline" title="dagster.execute_pipeline"><code class="xref py py-func docutils literal notranslate"><span class="pre">execute_pipeline()</span></code></a>.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Parameters:</th><td class="field-body"><ul class="first last simple">
<li><strong>pipeline</strong> (<a class="reference internal" href="definitions.html#dagster.PipelineDefinition" title="dagster.PipelineDefinition"><em>PipelineDefinition</em></a>) – pipeline to run</li>
<li><strong>execution</strong> (<a class="reference internal" href="#dagster.ExecutionContext" title="dagster.ExecutionContext"><em>ExecutionContext</em></a>) – execution context of the run</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="class">
<dt id="dagster.ExecutionContext">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">ExecutionContext</code><a class="headerlink" href="#dagster.ExecutionContext" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="class">
<dt id="dagster.PipelineExecutionResult">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">PipelineExecutionResult</code><span class="sig-paren">(</span><em>pipeline</em>, <em>context</em>, <em>result_list</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PipelineExecutionResult" title="Permalink to this definition">¶</a></dt>
<dd><p>Result of execution of the whole pipeline. Returned eg by <a class="reference internal" href="#dagster.execute_pipeline" title="dagster.execute_pipeline"><code class="xref py py-func docutils literal notranslate"><span class="pre">execute_pipeline()</span></code></a>.</p>
<dl class="attribute">
<dt id="dagster.PipelineExecutionResult.pipeline">
<code class="descname">pipeline</code><a class="headerlink" href="#dagster.PipelineExecutionResult.pipeline" title="Permalink to this definition">¶</a></dt>
<dd><p><em>PipelineDefinition</em> – Pipeline that was executed</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineExecutionResult.context">
<code class="descname">context</code><a class="headerlink" href="#dagster.PipelineExecutionResult.context" title="Permalink to this definition">¶</a></dt>
<dd><p><em>ExecutionContext</em> – ExecutionContext of that particular Pipeline run.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineExecutionResult.result_list">
<code class="descname">result_list</code><a class="headerlink" href="#dagster.PipelineExecutionResult.result_list" title="Permalink to this definition">¶</a></dt>
<dd><p><em>list[SolidExecutionResult]</em> – List of results for each pipeline solid.</p>
</dd></dl>

<dl class="method">
<dt id="dagster.PipelineExecutionResult.result_for_solid">
<code class="descname">result_for_solid</code><span class="sig-paren">(</span><em>name</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PipelineExecutionResult.result_for_solid" title="Permalink to this definition">¶</a></dt>
<dd><p>Get a <a class="reference internal" href="#dagster.SolidExecutionResult" title="dagster.SolidExecutionResult"><code class="xref py py-class docutils literal notranslate"><span class="pre">SolidExecutionResult</span></code></a> for a given solid name.</p>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name" />
<col class="field-body" />
<tbody valign="top">
<tr class="field-odd field"><th class="field-name">Returns:</th><td class="field-body">SolidExecutionResult</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class="attribute">
<dt id="dagster.PipelineExecutionResult.success">
<code class="descname">success</code><a class="headerlink" href="#dagster.PipelineExecutionResult.success" title="Permalink to this definition">¶</a></dt>
<dd><p>Whether the pipeline execution was successful at all steps</p>
</dd></dl>

</dd></dl>

<dl class="class">
<dt id="dagster.ExecutionMetadata">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">ExecutionMetadata</code><a class="headerlink" href="#dagster.ExecutionMetadata" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="class">
<dt id="dagster.SolidExecutionResult">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">SolidExecutionResult</code><span class="sig-paren">(</span><em>pipeline_context</em>, <em>solid</em>, <em>step_events_by_kind</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.SolidExecutionResult" title="Permalink to this definition">¶</a></dt>
<dd><p>Execution result for one solid of the pipeline.</p>
<dl class="attribute">
<dt id="dagster.SolidExecutionResult.context">
<code class="descname">context</code><a class="headerlink" href="#dagster.SolidExecutionResult.context" title="Permalink to this definition">¶</a></dt>
<dd><p><em>ExecutionContext</em> – ExecutionContext of that particular Pipeline run.</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidExecutionResult.solid">
<code class="descname">solid</code><a class="headerlink" href="#dagster.SolidExecutionResult.solid" title="Permalink to this definition">¶</a></dt>
<dd><p><em>SolidDefinition</em> – Solid for which this result is</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidExecutionResult.dagster_error">
<code class="descname">dagster_error</code><a class="headerlink" href="#dagster.SolidExecutionResult.dagster_error" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns exception that happened during this solid’s execution, if any</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidExecutionResult.success">
<code class="descname">success</code><a class="headerlink" href="#dagster.SolidExecutionResult.success" title="Permalink to this definition">¶</a></dt>
<dd><p>Whether the solid execution was successful</p>
</dd></dl>

<dl class="method">
<dt id="dagster.SolidExecutionResult.transformed_value">
<code class="descname">transformed_value</code><span class="sig-paren">(</span><em>output_name=\'result\'</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.SolidExecutionResult.transformed_value" title="Permalink to this definition">¶</a></dt>
<dd><p>Returns transformed value either for DEFAULT_OUTPUT or for the output
given as output_name. Returns None if execution result isn’t a success</p>
</dd></dl>

<dl class="attribute">
<dt id="dagster.SolidExecutionResult.transformed_values">
<code class="descname">transformed_values</code><a class="headerlink" href="#dagster.SolidExecutionResult.transformed_values" title="Permalink to this definition">¶</a></dt>
<dd><p>Return dictionary of transformed results, with keys being output names.
Returns None if execution result isn’t a success.</p>
</dd></dl>

</dd></dl>

</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="decorators.html">Decorators</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="decorators.html" title="previous chapter">Decorators</a></li>
      <li>Next: <a href="errors.html" title="next chapter">Errors</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/apidocs/execution.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/apidocs/execution.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 53'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Types &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Utilities" href="utilities.html" />
    <link rel="prev" title="Errors" href="errors.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="module-dagster">
<span id="types"></span><h1>Types<a class="headerlink" href="#module-dagster" title="Permalink to this headline">¶</a></h1>
<p>Dagster type system.</p>
<div class="section" id="type-definitions">
<h2>Type definitions<a class="headerlink" href="#type-definitions" title="Permalink to this headline">¶</a></h2>
<dl class="attribute">
<dt id="dagster.Any">
<code class="descclassname">dagster.</code><code class="descname">Any</code><a class="headerlink" href="#dagster.Any" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.as_dagster_type">
<code class="descclassname">dagster.</code><code class="descname">as_dagster_type</code><span class="sig-paren">(</span><em>existing_type</em>, <em>name=None</em>, <em>description=None</em>, <em>input_schema=None</em>, <em>output_schema=None</em>, <em>serialization_strategy=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.as_dagster_type" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="attribute">
<dt id="dagster.Bool">
<code class="descclassname">dagster.</code><code class="descname">Bool</code><a class="headerlink" href="#dagster.Bool" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.dagster_type">
<code class="descclassname">dagster.</code><code class="descname">dagster_type</code><span class="sig-paren">(</span><em>name=None</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.dagster_type" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="class">
<dt id="dagster.ConfigType">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">ConfigType</code><span class="sig-paren">(</span><em>key</em>, <em>name</em>, <em>type_attributes=ConfigTypeAttributes(is_builtin=False</em>, <em>is_system_config=False)</em>, <em>description=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.ConfigType" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.Dict">
<code class="descclassname">dagster.</code><code class="descname">Dict</code><span class="sig-paren">(</span><em>fields</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.Dict" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.input_schema">
<code class="descclassname">dagster.</code><code class="descname">input_schema</code><span class="sig-paren">(</span><em>config_cls</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.input_schema" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.input_selector_schema">
<code class="descclassname">dagster.</code><code class="descname">input_selector_schema</code><span class="sig-paren">(</span><em>config_cls</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.input_selector_schema" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="attribute">
<dt id="dagster.Int">
<code class="descclassname">dagster.</code><code class="descname">Int</code><a class="headerlink" href="#dagster.Int" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.List">
<code class="descclassname">dagster.</code><code class="descname">List</code><span class="sig-paren">(</span><em>inner_type</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.List" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.NamedDict">
<code class="descclassname">dagster.</code><code class="descname">NamedDict</code><span class="sig-paren">(</span><em>name</em>, <em>fields</em>, <em>description=None</em>, <em>type_attributes=ConfigTypeAttributes(is_builtin=False</em>, <em>is_system_config=False)</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.NamedDict" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.Nullable">
<code class="descclassname">dagster.</code><code class="descname">Nullable</code><span class="sig-paren">(</span><em>inner_type</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.Nullable" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.output_schema">
<code class="descclassname">dagster.</code><code class="descname">output_schema</code><span class="sig-paren">(</span><em>config_cls</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.output_schema" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.output_selector_schema">
<code class="descclassname">dagster.</code><code class="descname">output_selector_schema</code><span class="sig-paren">(</span><em>config_cls</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.output_selector_schema" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="attribute">
<dt id="dagster.Path">
<code class="descclassname">dagster.</code><code class="descname">Path</code><a class="headerlink" href="#dagster.Path" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="class">
<dt id="dagster.PythonObjectType">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">PythonObjectType</code><span class="sig-paren">(</span><em>python_type</em>, <em>key=None</em>, <em>name=None</em>, <em>**kwargs</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.PythonObjectType" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="class">
<dt id="dagster.RuntimeType">
<em class="property">class </em><code class="descclassname">dagster.</code><code class="descname">RuntimeType</code><span class="sig-paren">(</span><em>key</em>, <em>name</em>, <em>is_builtin=False</em>, <em>description=None</em>, <em>input_schema=None</em>, <em>output_schema=None</em>, <em>serialization_strategy=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.RuntimeType" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="attribute">
<dt id="dagster.String">
<code class="descclassname">dagster.</code><code class="descname">String</code><a class="headerlink" href="#dagster.String" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="errors.html">Errors</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="errors.html" title="previous chapter">Errors</a></li>
      <li>Next: <a href="utilities.html" title="next chapter">Utilities</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/apidocs/types.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/apidocs/types.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 54'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Utilities &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="New Concepts in 0.3.0" href="../guides/028_to_030_new_concepts.html" />
    <link rel="prev" title="Types" href="types.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="utilities">
<h1>Utilities<a class="headerlink" href="#utilities" title="Permalink to this headline">¶</a></h1>
<dl class="function">
<dt id="dagster.execute_solid">
<code class="descclassname">dagster.</code><code class="descname">execute_solid</code><span class="sig-paren">(</span><em>pipeline_def</em>, <em>solid_name</em>, <em>inputs=None</em>, <em>environment=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.execute_solid" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<dl class="function">
<dt id="dagster.execute_solids">
<code class="descclassname">dagster.</code><code class="descname">execute_solids</code><span class="sig-paren">(</span><em>pipeline_def</em>, <em>solid_names</em>, <em>inputs=None</em>, <em>environment=None</em><span class="sig-paren">)</span><a class="headerlink" href="#dagster.execute_solids" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">Types</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="types.html" title="previous chapter">Types</a></li>
      <li>Next: <a href="../guides/028_to_030_new_concepts.html" title="next chapter">New Concepts in 0.3.0</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/apidocs/utilities.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/apidocs/utilities.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 55'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>New Concepts in 0.3.0 &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Upgrading to 0.3.0" href="028_to_030_upgrade_guide.html" />
    <link rel="prev" title="Utilities" href="../apidocs/utilities.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="new-concepts-in-0-3-0">
<span id="new-concepts-in-0-3-0"></span><h1>New Concepts in 0.3.0<a class="headerlink" href="#new-concepts-in-0-3-0" title="Permalink to this headline">¶</a></h1>
<p>The upgrade guide describes the changes you are <em>require</em> to make to install 0.3.0. This guide describes the changes you <em>should</em> make in order to use the latest capabilities. The new concepts take some getting used to, but are quite powerful.</p>
<div class="section" id="resources">
<span id="resources"></span><h2>Resources<a class="headerlink" href="#resources" title="Permalink to this headline">¶</a></h2>
<p>In 0.2.0 the notion of resources were relatively informal. This is no longer true: They are now an officially supported abstraction. They break apart context creation into composable, reusable chunks of software.</p>
<p><strong>Defining a Resource</strong></p>
<p>Let’s take a typical unittest context.</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">define_unittest_context</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineContextDefinition</span><span class="p">(</span>
        <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span>
            <span class="n">Dict</span><span class="p">(</span>
                <span class="p">{</span>
                    <span class="s1">&#39;data_source_run_id&#39;</span> <span class="p">:</span> <span class="n">_data_source_run_id_field</span><span class="p">(),</span>
                    <span class="s1">&#39;conf&#39;</span> <span class="p">:</span> <span class="n">_conf_field</span><span class="p">(),</span>
                    <span class="s1">&#39;log_level&#39;</span> <span class="p">:</span> <span class="n">_log_level_field</span><span class="p">(),</span>
                    <span class="s1">&#39;cleanup_files&#39;</span> <span class="p">:</span> <span class="n">_cleanup_field</span><span class="p">(),</span>
                <span class="p">},</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="n">context_fn</span><span class="o">=</span><span class="n">create_fileload_unittest_context</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">Context for use in unit tests. It does not allow for any interaction with aws</span>
<span class="s1">or s3, and can only be used for a subset of the pipeline that can execute on a</span>
<span class="s1">local machine.</span>

<span class="s1">This context does not log to file and also has a configurable log_level.</span>
<span class="s1">        &#39;&#39;&#39;</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">create_fileload_unittest_context</span><span class="p">(</span><span class="n">info</span><span class="p">):</span>
    <span class="n">data_source_run_id</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;data_source_run_id&#39;</span><span class="p">]</span>
    <span class="n">log_level</span> <span class="o">=</span> <span class="n">level_from_string</span><span class="p">(</span><span class="n">info</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;log_level&#39;</span><span class="p">])</span>
    <span class="n">pipeline_run_id</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">())</span>

    <span class="n">resources</span> <span class="o">=</span> <span class="n">FileloadResources</span><span class="p">(</span>
        <span class="n">aws</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">redshift</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">bucket_path</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">local_fs</span><span class="o">=</span><span class="n">LocalFsHandleResource</span><span class="o">.</span><span class="n">for_pipeline_run</span><span class="p">(</span><span class="n">pipeline_run_id</span><span class="p">),</span>
        <span class="n">sa</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">pipeline_guid</span><span class="o">=</span><span class="n">data_source_run_id</span><span class="p">)</span>

    <span class="k">yield</span> <span class="n">ExecutionContext</span><span class="p">(</span>
        <span class="n">loggers</span><span class="o">=</span><span class="p">[</span><span class="n">define_colored_console_logger</span><span class="p">(</span><span class="s1">&#39;dagster&#39;</span><span class="p">,</span> <span class="n">log_level</span><span class="p">)],</span>
        <span class="n">resources</span><span class="o">=</span><span class="n">resources</span><span class="p">,</span>
        <span class="n">tags</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;data_source_run_id&#39;</span><span class="p">:</span> <span class="n">data_source_run_id</span><span class="p">,</span>
            <span class="s1">&#39;data_source&#39;</span><span class="p">:</span> <span class="s1">&#39;new_data&#39;</span><span class="p">,</span>
            <span class="s1">&#39;pipeline_run_id&#39;</span><span class="p">:</span> <span class="n">pipeline_run_id</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>That’s quite the ball of wax for what should be relatively straightforward. And this doesn’t even include the boilerplate <code class="docutils literal notranslate"><span class="pre">FileloadResources</span></code> class as well. We’re going to break this apart using the <code class="docutils literal notranslate"><span class="pre">ResourceDefinition</span></code> abstraction and eliminate the need for that class.</p>
<p>The only real reusable resource here is the LocalFsHandleResource, so let’s break that out into it’s own <code class="docutils literal notranslate"><span class="pre">ResourceDefinition</span></code>.</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">define_local_fs_resource</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">_create_resource</span><span class="p">(</span><span class="n">init_context</span><span class="p">):</span>
        <span class="n">resource</span> <span class="o">=</span> <span class="n">LocalFsHandleResource</span><span class="o">.</span><span class="n">for_pipeline_run</span><span class="p">(</span><span class="n">init_context</span><span class="o">.</span><span class="n">run_id</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">resource</span>
        <span class="k">if</span> <span class="n">init_context</span><span class="o">.</span><span class="n">resource_config</span><span class="p">[</span><span class="s1">&#39;cleanup_files&#39;</span><span class="p">]:</span>
            <span class="n">LocalFsHandleResource</span><span class="o">.</span><span class="n">clean_up_dir</span><span class="p">(</span><span class="n">init_context</span><span class="o">.</span><span class="n">run_id</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ResourceDefinition</span><span class="p">(</span>
        <span class="n">resource_fn</span><span class="o">=</span><span class="n">_create_resource</span><span class="p">,</span>
        <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span>
            <span class="n">Dict</span><span class="p">({</span><span class="s1">&#39;cleanup_files&#39;</span><span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">Bool</span><span class="p">,</span> <span class="n">is_optional</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">default_value</span><span class="o">=</span><span class="bp">True</span><span class="p">)})</span>
        <span class="p">),</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>This is now a self-contained piece that can be reused in other contexts as well.</p>
<p>Aside: We now guarantee a system-generated run_id, so the manually created pipeline_guid resource is no longer relevant.</p>
<p>The rest of the “resources” in the unittesting context are None, and we have a special helper to create “none” resources.</p>
<p>Let’s put it all together:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">define_unittest_context</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineContextDefinition</span><span class="p">(</span>
        <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span><span class="n">Dict</span><span class="p">({</span>
            <span class="s1">&#39;log_level&#39;</span> <span class="p">:</span> <span class="n">_log_level_field</span><span class="p">(),</span>
            <span class="s1">&#39;data_source_run_id&#39;</span><span class="p">:</span> <span class="n">_data_source_run_id_field</span><span class="p">(),</span>
        <span class="p">})),</span>
        <span class="n">resources</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;local_fs&#39;</span><span class="p">:</span> <span class="n">define_local_fs_resource</span><span class="p">(),</span>
            <span class="s1">&#39;aws&#39;</span><span class="p">:</span> <span class="n">ResourceDefinition</span><span class="o">.</span><span class="n">none_resource</span><span class="p">(),</span>
            <span class="s1">&#39;redshift&#39;</span><span class="p">:</span> <span class="n">ResourceDefinition</span><span class="o">.</span><span class="n">none_resource</span><span class="p">(),</span>
            <span class="s1">&#39;bucket_path&#39;</span><span class="p">:</span> <span class="n">ResourceDefinition</span><span class="o">.</span><span class="n">none_resource</span><span class="p">(),</span>
            <span class="s1">&#39;sa&#39;</span><span class="p">:</span> <span class="n">ResourceDefinition</span><span class="o">.</span><span class="n">none_resource</span><span class="p">(),</span>
        <span class="p">},</span>
        <span class="n">context_fn</span><span class="o">=</span><span class="n">create_fileload_unittest_context</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">Context for use in unit tests. It does not allow for any interaction with aws</span>
<span class="s1">or s3, and can only be used for a subset of the pipeline that can execute on a</span>
<span class="s1">local machine.</span>

<span class="s1">This context does not log to file and also has a configurable log_level.</span>
<span class="s1">        &#39;&#39;&#39;</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">create_fileload_unittest_context</span><span class="p">(</span><span class="n">init_context</span><span class="p">):</span>
    <span class="n">data_source_run_id</span> <span class="o">=</span> <span class="n">init_context</span><span class="o">.</span><span class="n">context_config</span><span class="p">[</span><span class="s1">&#39;data_source_run_id&#39;</span><span class="p">]</span>
    <span class="n">log_level</span> <span class="o">=</span> <span class="n">level_from_string</span><span class="p">(</span><span class="n">init_context</span><span class="o">.</span><span class="n">context_config</span><span class="p">[</span><span class="s1">&#39;log_level&#39;</span><span class="p">])</span>

    <span class="k">yield</span> <span class="n">ExecutionContext</span><span class="p">(</span>
        <span class="n">loggers</span><span class="o">=</span><span class="p">[</span><span class="n">define_colored_console_logger</span><span class="p">(</span><span class="s1">&#39;dagster&#39;</span><span class="p">,</span> <span class="n">log_level</span><span class="p">)],</span>
        <span class="n">tags</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;data_source_run_id&#39;</span><span class="p">:</span> <span class="n">data_source_run_id</span><span class="p">,</span>
            <span class="s1">&#39;data_source&#39;</span><span class="p">:</span> <span class="s1">&#39;new_data&#39;</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>Notice a few things. The bulk of the context creation function is now gone. Instead of having to manually create the <code class="docutils literal notranslate"><span class="pre">FileloadResources</span></code>, that is replaced by a class (a <code class="docutils literal notranslate"><span class="pre">namedtuple</span></code>) that is system-synthesized. Predictably it has N fields, one for each resource. The pipeline-code-facing API is the same, it just requires less boilerplate within the pipeline infrastructure.</p>
<p><strong>Configuring a Resource</strong></p>
<p>The configuration schema changes, as each resource has it’s own section.</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="n">environment</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;context&#39;</span><span class="p">:{</span>
        <span class="s1">&#39;unittest&#39;</span> <span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;config&#39;</span> <span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;data_source_run_id&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()),</span>
                <span class="s1">&#39;conf&#39;</span><span class="p">:</span> <span class="n">CONF</span><span class="p">,</span>
                <span class="s1">&#39;log_level&#39;</span><span class="p">:</span> <span class="s1">&#39;ERROR&#39;</span><span class="p">,</span>
                <span class="s1">&#39;cleanup_files&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">&#39;unzip_file&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;config&#39;</span> <span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;zipped_file&#39;</span><span class="p">:</span> <span class="n">ZIP_FILE_PATH</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>In particular we need to move <code class="docutils literal notranslate"><span class="pre">cleanup_files</span></code> to a resource section of the config.</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="n">environment</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;context&#39;</span><span class="p">:{</span>
        <span class="s1">&#39;unittest&#39;</span> <span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;config&#39;</span> <span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;data_source_run_id&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()),</span>
                <span class="s1">&#39;log_level&#39;</span><span class="p">:</span> <span class="s1">&#39;ERROR&#39;</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="s1">&#39;resources&#39;</span> <span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;local_fs&#39;</span><span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;config&#39;</span> <span class="p">:</span> <span class="p">{</span>
                        <span class="s1">&#39;cleanup_files&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">&#39;unzip_file&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;config&#39;</span> <span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;zipped_file&#39;</span><span class="p">:</span> <span class="n">ZIP_FILE_PATH</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>While slightly more verbose, you will be able to count on more consistent of configuration between pipelines as you reuse resources, and you an even potentially share resource configuration <em>between</em> pipelines using the configuration file merging feature of 0.3.0</p>
</div>
<div class="section" id="resource-libraries">
<span id="resource-libraries"></span><h2>Resource Libraries<a class="headerlink" href="#resource-libraries" title="Permalink to this headline">¶</a></h2>
<p>The real promise of resources to build a library of resuable, composable resources.</p>
<p>For example, here would be a resource to create a redshift connection.</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">define_redshift_sa_resource</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">_create_resource</span><span class="p">(</span><span class="n">init_context</span><span class="p">):</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">init_context</span><span class="o">.</span><span class="n">resource_config</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">init_context</span><span class="o">.</span><span class="n">resource_config</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]</span>
        <span class="n">host</span> <span class="o">=</span> <span class="n">init_context</span><span class="o">.</span><span class="n">resource_config</span><span class="p">[</span><span class="s1">&#39;host&#39;</span><span class="p">]</span>
        <span class="n">port</span> <span class="o">=</span> <span class="n">init_context</span><span class="o">.</span><span class="n">resource_config</span><span class="p">[</span><span class="s1">&#39;port&#39;</span><span class="p">]</span>
        <span class="n">dbname</span> <span class="o">=</span> <span class="n">init_context</span><span class="o">.</span><span class="n">resource_config</span><span class="p">[</span><span class="s1">&#39;dbname&#39;</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">sa</span><span class="o">.</span><span class="n">create_engine</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;postgresql://{user}:{password}@{host}:{port}/{dbname}&#39;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ResourceDefinition</span><span class="p">(</span>
        <span class="n">resource_fn</span><span class="o">=</span><span class="n">_create_resource</span><span class="p">,</span>
        <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span>
            <span class="n">Dict</span><span class="p">(</span>
                <span class="p">{</span>
                    <span class="s1">&#39;user&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
                    <span class="s1">&#39;password&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
                    <span class="s1">&#39;host&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
                    <span class="s1">&#39;port&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">Int</span><span class="p">),</span>
                    <span class="s1">&#39;dbname&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
                <span class="p">}</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>This could be used – unmodified – across all your pipelines. This will also make it easier to write reusable solids as they can know that they will be using the same resource. Indeed, we may formalize this in subsequent releases, allowing solids to formally declare their dependencies on specific resource types.</p>
</div>
<div class="section" id="solid-level-configs-to-inputs">
<span id="solid-level-configs-to-inputs"></span><h2>Solid-Level Configs to Inputs<a class="headerlink" href="#solid-level-configs-to-inputs" title="Permalink to this headline">¶</a></h2>
<p>With the new ability to source inputs from the environment config files, we anticipate that solid-level configuration will become much less common, and instead that we will uses inputs and outputs exclusively.</p>
<p>Let’s use another example from the a typical fileload pipeline.</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="nd">@solid</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;unzip_file&#39;</span><span class="p">,</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[],</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">DagsterTypes</span><span class="o">.</span><span class="n">PathToFile</span><span class="p">)],</span>
    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">This takes a single, pre-existing zip folder with a single file and unzips it,</span>
<span class="s1">and then outputs the path to that file.</span>
<span class="s1">&#39;&#39;&#39;</span><span class="p">,</span>
    <span class="n">config_def</span><span class="o">=</span><span class="n">ConfigDefinition</span><span class="p">(</span>
        <span class="n">types</span><span class="o">.</span><span class="n">ConfigDictionary</span><span class="p">(</span><span class="s1">&#39;UnzipFileConfig&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;zipped_file&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">Path</span><span class="p">)}),</span>
    <span class="p">),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">unzip_file</span><span class="p">(</span><span class="n">info</span><span class="p">):</span>
    <span class="n">context</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="n">context</span>
    <span class="n">zipped_file</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;zipped_file&#39;</span><span class="p">]</span>
</pre></div>
</div>
<p>You’ll note that in 0.2.8 we have to model the incoming zipped file as config rather than an input because <code class="docutils literal notranslate"><span class="pre">unzip_file</span></code> had no upstream dependencies and inputs
had to come from previous solids. In 0.3.0 this is no longer true. Inputs
can be sourced from the config file now, which means that by default you should
be modeling such things as inputs.</p>
<p>After:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="nd">@solid</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;unzip_file&#39;</span><span class="p">,</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;zipped_file&#39;</span><span class="p">,</span> <span class="n">Path</span><span class="p">)],</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">Path</span><span class="p">)],</span>
    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">This takes a single, pre-existing zip folder with a single file and unzips it,</span>
<span class="s1">and then outputs the path to that file.</span>
<span class="s1">&#39;&#39;&#39;</span><span class="p">,</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">unzip_file</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">zipped_file</span><span class="p">):</span>
    <span class="c1"># ...</span>
    <span class="k">pass</span>
</pre></div>
</div>
<p>In order to invoke a pipeline that contains this solid, you need to satisy this input in the environment config.</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">environment</span> <span class="o">=</span> <span class="p">{</span>
        <span class="c1"># .. context section omitted</span>
        <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;unzip_file&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;config&#39;</span> <span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;zipped_file&#39;</span><span class="p">:</span> <span class="n">ZIP_FILE_PATH</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre></div>
</div>
<p>After:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">environment</span> <span class="o">=</span> <span class="p">{</span>
        <span class="c1"># .. context section omitted</span>
        <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;unzip_file&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;inputs&#39;</span> <span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;zipped_file&#39;</span><span class="p">:</span> <span class="n">ZIP_FILE_PATH</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre></div>
</div>
<p>What’s great about this new input structure is that now the unzip_file is more reusable as it could be reused in the middle of a pipeline with its input coming from a previous solid, or as a solid at the beginning of a pipeline.</p>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul class="current">
<li class="toctree-l1 current"><a class="current reference internal" href="#">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="../apidocs/utilities.html" title="previous chapter">Utilities</a></li>
      <li>Next: <a href="028_to_030_upgrade_guide.html" title="next chapter">Upgrading to 0.3.0</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/guides/028_to_030_new_concepts.md.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/guides/028_to_030_new_concepts.md.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 56'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Upgrading to 0.3.0 &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="prev" title="New Concepts in 0.3.0" href="028_to_030_new_concepts.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="upgrading-to-0-3-0">
<span id="upgrading-to-0-3-0"></span><h1>Upgrading to 0.3.0<a class="headerlink" href="#upgrading-to-0-3-0" title="Permalink to this headline">¶</a></h1>
<p>This guide is a step-by-step guide for upgrading from dagster 0.2.x to 0.3.0. This represents a substantial upgrade in capabilities but also some breaking API changes. We’ll detail them, provide context and reasoning, and instructions about how to upgrade.</p>
<div class="section" id="required-api-changes">
<span id="required-api-changes"></span><h2>Required API Changes<a class="headerlink" href="#required-api-changes" title="Permalink to this headline">¶</a></h2>
<ol class="simple">
<li><strong>No more top level config subpackage.</strong></li>
</ol>
<p>Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
<span class="ne">ImportError</span><span class="p">:</span> <span class="n">cannot</span> <span class="kn">import</span> <span class="nn">name</span> <span class="s1">&#39;config&#39;</span>
</pre></div>
</div>
<p>We have eliminated the public-facing “config” namespace. (You use raw dictionaries instead of a parallel, typed API to configure pipeline runs).</p>
<p>Fix: Simply eliminate the include. You’ll run into related errors later.</p>
<ol class="simple">
<li><strong>No more dagster.sqlalchemy and dagster.pandas submodules</strong>.</li>
</ol>
<p>Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">E</span>   <span class="n">ModuleNotFoundError</span><span class="p">:</span> <span class="n">No</span> <span class="n">module</span> <span class="n">named</span> <span class="s1">&#39;dagster.sqlalchemy&#39;</span>
</pre></div>
</div>
<p>We have moved pandas and sqlalchemy code into their own separate modules (dagster-pandas and dagster-sqlalchemy). This makes the core dagster library have less dependencies.</p>
<p>Fix: Instead of importing <code class="docutils literal notranslate"><span class="pre">dagster.sqlalchemy</span></code> you need to <code class="docutils literal notranslate"><span class="pre">pip</span> <span class="pre">install</span> <span class="pre">dagster-sqlalchemy</span></code>, add it to your virtual env, and then include <code class="docutils literal notranslate"><span class="pre">dagster_sqlalchemy</span></code> instead.</p>
<ol class="simple">
<li><strong>ConfigDefinition no longer exists.</strong></li>
</ol>
<p>Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="ne">ImportError</span><span class="p">:</span> <span class="n">cannot</span> <span class="kn">import</span> <span class="nn">name</span> <span class="s1">&#39;ConfigDefinition&#39;</span>
</pre></div>
</div>
<p>We have eliminated a separate notion of a ConfigDefinition. Instead, we realized the user provided config in a solid, resource, or context is just a <code class="docutils literal notranslate"><span class="pre">Field</span></code> that you would use to build a <code class="docutils literal notranslate"><span class="pre">Dict</span></code> or <code class="docutils literal notranslate"><span class="pre">Selector</span></code>. So replace <code class="docutils literal notranslate"><span class="pre">ConfigDefinition</span></code> with Field. (Generally <code class="docutils literal notranslate"><span class="pre">config_def=ConfigDefinition</span></code> is now <code class="docutils literal notranslate"><span class="pre">config_field=Field</span></code>)</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="s2">&quot;production&quot;</span><span class="p">:</span> <span class="n">PipelineContextDefinition</span><span class="p">(</span>
    <span class="n">context_fn</span><span class="o">=</span><span class="n">generate_production_execution_context</span><span class="p">,</span>
    <span class="n">config_def</span><span class="o">=</span><span class="n">ConfigDefinition</span><span class="p">(</span>
        <span class="c1"># ...</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>After:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="s2">&quot;production&quot;</span><span class="p">:</span> <span class="n">PipelineContextDefinition</span><span class="p">(</span>
    <span class="n">context_fn</span><span class="o">=</span><span class="n">generate_production_execution_context</span><span class="p">,</span>
    <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span>
       <span class="c1"># ...</span>
    <span class="p">)</span>

</pre></div>
</div>
<ol class="simple">
<li><strong>New, Simpler Dagster Type Definition API.</strong></li>
</ol>
<p>Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;This represents a path to a file on disk&#39;&#39;&#39;</span>
<span class="n">E</span>   <span class="ne">TypeError</span><span class="p">:</span> <span class="fm">__init__</span><span class="p">()</span> <span class="n">got</span> <span class="n">multiple</span> <span class="n">values</span> <span class="k">for</span> <span class="n">argument</span> <span class="s1">&#39;python_type&#39;</span>
</pre></div>
</div>
<p>Another Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>E   dagster.check.ParameterCheckError: Param &quot;klass&quot; was supposed to be a type. Got &lt;dagster.core.types.runtime.PythonObjectType object at 0x11e4fbf60&gt; instead of type &lt;class &#39;dagster.core.types.runtime.PythonObjectType&#39;&gt;
</pre></div>
</div>
<p>There are now two different type creation APIs. One for <em>creating</em> new types, and one for <em>annotating</em> existing types that you include.</p>
<p>Examples:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="nd">@dagster_type</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s1">&#39;This represents a path to a file on disk&#39;</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">PathToFile</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="n">S3FileHandle</span> <span class="o">=</span> <span class="n">as_dagster_type</span><span class="p">(</span>
    <span class="n">namedtuple</span><span class="p">(</span><span class="s1">&#39;S3FileHandle&#39;</span><span class="p">,</span> <span class="s1">&#39;bucket path&#39;</span><span class="p">),</span>
    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">upload_header_to_s3 and upload_service_line_to_s3 both result in files</span>
<span class="s1">being uploaded to s3. Hence the &quot;output&quot; of those two solids is a handle</span>
<span class="s1">to a file. The following stages take those as their inputs to create</span>
<span class="s1">redshift tables out of them.</span>

<span class="s1">Properties:</span>
<span class="s1">    - bucket: String</span>
<span class="s1">    - path: String</span>
<span class="s1">        &#39;&#39;&#39;</span>
<span class="p">)</span>
</pre></div>
</div>
<p>Note you can use S3FileHandle and PathToFile as if they were just “normal types” as well.</p>
<ol class="simple">
<li><strong>ConfigDictionary –&gt; Dict</strong></li>
</ol>
<p>We have a much less verbose API for building configuration schema:</p>
<p>Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">E</span>   <span class="ne">AttributeError</span><span class="p">:</span> <span class="n">module</span> <span class="s1">&#39;dagster.core.types&#39;</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;ConfigDictionary</span>
</pre></div>
</div>
<p>First, we can discouraging the use of the <code class="docutils literal notranslate"><span class="pre">types</span></code> namespace. Instead just <code class="docutils literal notranslate"><span class="pre">from</span> <span class="pre">dagster</span> <span class="pre">import</span> <span class="pre">Dict</span></code> (or whatever class directly).
Second, <code class="docutils literal notranslate"><span class="pre">ConfigDictionary</span></code> is now just <code class="docutils literal notranslate"><span class="pre">Dict</span></code>.
Third, you do not have to name it. The net result is much nicer:</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="n">types</span><span class="o">.</span><span class="n">ConfigDictionary</span><span class="p">(</span>
    <span class="s1">&#39;DefaultContextConfig&#39;</span><span class="p">,</span>
    <span class="p">{</span>
        <span class="s1">&#39;data_source_run_id&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">            This is a run id generated by the caller of this pipeline. Right</span>
<span class="s1">            now this is required to tie a single run id to multiple executions</span>
<span class="s1">            of the same pipeline.</span>
<span class="s1">        &#39;&#39;&#39;</span><span class="p">),</span>
        <span class="s1">&#39;conf&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">Any</span><span class="p">),</span>
    <span class="p">},</span>
<span class="p">)</span>
</pre></div>
</div>
<p>After:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="n">Dict</span><span class="p">({</span>
    <span class="s1">&#39;data_source_run_id&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">        This is a run id generated by the caller of this pipeline. Right</span>
<span class="s1">        now this is required to tie a single run id to multiple executions</span>
<span class="s1">        of the same pipeline.</span>
<span class="s1">    &#39;&#39;&#39;</span><span class="p">),</span>
    <span class="s1">&#39;conf&#39;</span> <span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">Any</span><span class="p">),</span>
<span class="p">})</span>
</pre></div>
</div>
<p>This is a fairly mechanical transition.</p>
<ol class="simple">
<li><strong>define_stub_solid no longer in top-level dagster</strong></li>
</ol>
<p>This is now an internal utility function. If you really, really need it:</p>
<p><code class="docutils literal notranslate"><span class="pre">from</span> <span class="pre">dagster.core.utility_solids</span> <span class="pre">import</span> <span class="pre">define_stub_solid</span></code></p>
<ol class="simple">
<li><strong>Environments are raw dictionaries rather that config.* classes</strong></li>
</ol>
<p>Per update 1 config classes no longer are public or used in the execute_pipeline family of APIs. Use raw dictionaries instead. They should be shaped <strong>exactly</strong> like the yaml files.</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">environment</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">Environment</span><span class="p">(</span>
        <span class="n">context</span><span class="o">=</span><span class="n">config</span><span class="o">.</span><span class="n">Context</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="s1">&#39;unittest&#39;</span><span class="p">,</span>
            <span class="n">config</span><span class="o">=</span><span class="p">{</span>
                <span class="s1">&#39;data_source_run_id&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()),</span>
                <span class="s1">&#39;conf&#39;</span><span class="p">:</span> <span class="n">CONF</span><span class="p">,</span>
                <span class="s1">&#39;log_level&#39;</span><span class="p">:</span> <span class="s1">&#39;ERROR&#39;</span><span class="p">,</span>
                <span class="s1">&#39;cleanup_files&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">),</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;unzip_file&#39;</span><span class="p">:</span> <span class="n">config</span><span class="o">.</span><span class="n">Solid</span><span class="p">({</span>
                <span class="s1">&#39;zipped_file&#39;</span><span class="p">:</span> <span class="n">ZIP_FILE_PATH</span>
            <span class="p">}),</span>
        <span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>After:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">environment</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s1">&#39;context&#39;</span><span class="p">:{</span>
            <span class="s1">&#39;unittest&#39;</span> <span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;config&#39;</span> <span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;data_source_run_id&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">uuid</span><span class="o">.</span><span class="n">uuid4</span><span class="p">()),</span>
                    <span class="s1">&#39;conf&#39;</span><span class="p">:</span> <span class="n">CONF</span><span class="p">,</span>
                    <span class="s1">&#39;log_level&#39;</span><span class="p">:</span> <span class="s1">&#39;ERROR&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;cleanup_files&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;unzip_file&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;config&#39;</span> <span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;zipped_file&#39;</span><span class="p">:</span> <span class="n">ZIP_FILE_PATH</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre></div>
</div>
<p>While providing less guarantees within the python type system, this API results in very high quality error checking and messaging from the dagster config schema.</p>
<ol class="simple">
<li><strong>New testing APIs</strong></li>
</ol>
<p>Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span> <span class="ne">AttributeError</span><span class="p">:</span> <span class="nb">type</span> <span class="nb">object</span> <span class="s1">&#39;PipelineDefinition&#39;</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;create_sub_pipeline&#39;</span>
</pre></div>
</div>
<p>or</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="ne">AttributeError</span><span class="p">:</span> <span class="nb">type</span> <span class="nb">object</span> <span class="s1">&#39;PipelineDefinition&#39;</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;create_single_solid_pipeline&#39;</span>
</pre></div>
</div>
<p>The creation of “sub” and “single_solid” pipelines was awkward and error-prone. Instead we have the new functions <code class="docutils literal notranslate"><span class="pre">execute_solid</span></code> and <code class="docutils literal notranslate"><span class="pre">execute_solids</span></code>. You can now execute a single solid with a single function call.</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">pipeline</span> <span class="o">=</span> <span class="n">PipelineDefinition</span><span class="o">.</span><span class="n">create_single_solid_pipeline</span><span class="p">(</span>
        <span class="n">define_fileload_pipeline</span><span class="p">(),</span>
        <span class="s1">&#39;unzip_file&#39;</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">execute_pipeline</span><span class="p">(</span><span class="n">pipeline</span><span class="p">,</span> <span class="n">environment</span><span class="p">)</span>

    <span class="k">assert</span> <span class="n">result</span><span class="o">.</span><span class="n">success</span>
    <span class="k">assert</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span>
        <span class="n">result</span><span class="o">.</span><span class="n">result_for_solid</span><span class="p">(</span><span class="s1">&#39;unzip_file&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">transformed_value</span><span class="p">())</span>
</pre></div>
</div>
<p>After:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">solid_result</span> <span class="o">=</span> <span class="n">execute_solid</span><span class="p">(</span>
        <span class="n">define_fileload_pipeline</span><span class="p">(),</span>
        <span class="s1">&#39;unzip_file&#39;</span><span class="p">,</span>
        <span class="n">environment</span><span class="o">=</span><span class="n">environment</span>
    <span class="p">)</span>

    <span class="k">assert</span> <span class="n">solid_result</span><span class="o">.</span><span class="n">success</span>
    <span class="k">assert</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">solid_result</span><span class="o">.</span><span class="n">transformed_value</span><span class="p">())</span>
</pre></div>
</div>
<p>Before (with stubbed inputs):</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">pipeline</span> <span class="o">=</span> <span class="n">PipelineDefinition</span><span class="o">.</span><span class="n">create_single_solid_pipeline</span><span class="p">(</span>
        <span class="n">define_fileload_pipeline</span><span class="p">(),</span>
        <span class="s1">&#39;split_headers_and_service_lines&#39;</span><span class="p">,</span>
        <span class="p">{</span>
            <span class="s1">&#39;split_headers_and_service_lines&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;unzipped_file&#39;</span><span class="p">:</span>
                <span class="n">define_stub_solid</span><span class="p">(</span><span class="s1">&#39;unzipped_path_value&#39;</span><span class="p">,</span> <span class="n">unzipped_path</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">)</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">execute_pipeline</span><span class="p">(</span><span class="n">pipeline</span><span class="p">,</span> <span class="n">environment</span><span class="p">)</span>

    <span class="k">assert</span> <span class="n">result</span><span class="o">.</span><span class="n">success</span>
    <span class="n">solid_result</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">result_for_solid</span><span class="p">(</span><span class="s1">&#39;split_headers_and_service_lines&#39;</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">solid_result</span><span class="o">.</span><span class="n">transformed_value</span><span class="p">(</span><span class="s1">&#39;header_file&#39;</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">solid_result</span><span class="o">.</span><span class="n">transformed_value</span><span class="p">(</span><span class="s1">&#39;service_lines_file&#39;</span><span class="p">))</span>
</pre></div>
</div>
<p>After (with stubbed inputs):</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">solid_result</span> <span class="o">=</span> <span class="n">execute_solid</span><span class="p">(</span>
        <span class="n">define_fileload_pipeline</span><span class="p">(),</span>
        <span class="s1">&#39;split_headers_and_service_lines&#39;</span><span class="p">,</span>
        <span class="n">inputs</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;unzipped_file&#39;</span><span class="p">:</span> <span class="n">unzipped_path</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="n">environment</span><span class="o">=</span><span class="n">environment</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="k">assert</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">solid_result</span><span class="o">.</span><span class="n">transformed_value</span><span class="p">(</span><span class="s1">&#39;header_file&#39;</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">solid_result</span><span class="o">.</span><span class="n">transformed_value</span><span class="p">(</span><span class="s1">&#39;service_lines_file&#39;</span><span class="p">))</span>
</pre></div>
</div>
<p>Before (subset execution):</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">pipeline</span> <span class="o">=</span> <span class="n">PipelineDefinition</span><span class="o">.</span><span class="n">create_sub_pipeline</span><span class="p">(</span>
        <span class="n">define_fileload_pipeline</span><span class="p">(),</span>
        <span class="p">[</span><span class="s1">&#39;unzip_file&#39;</span><span class="p">],</span>
        <span class="p">[</span><span class="s1">&#39;split_headers_and_service_lines&#39;</span><span class="p">],</span>
        <span class="p">{},</span>
    <span class="p">)</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">execute_pipeline</span><span class="p">(</span><span class="n">pipeline</span><span class="p">,</span> <span class="n">environment</span><span class="p">)</span>


    <span class="k">assert</span> <span class="n">result</span><span class="o">.</span><span class="n">success</span>
    <span class="n">solid_result</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">result_for_solid</span><span class="p">(</span><span class="s1">&#39;split_headers_and_service_lines&#39;</span><span class="p">)</span>
    <span class="n">snapshot_check_results</span><span class="p">(</span><span class="n">snapshot</span><span class="p">,</span> <span class="n">solid_result</span><span class="p">)</span>
</pre></div>
</div>
<p>After (subset execution):</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="n">result_dict</span> <span class="o">=</span> <span class="n">execute_solids</span><span class="p">(</span>
        <span class="n">define_pipeline</span><span class="p">(),</span>
        <span class="p">[</span><span class="s1">&#39;unzip_file&#39;</span><span class="p">,</span> <span class="s1">&#39;split_headers_and_service_lines&#39;</span><span class="p">],</span>
        <span class="n">environment</span><span class="o">=</span><span class="n">environment</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">snapshot_check_results</span><span class="p">(</span><span class="n">snapshot</span><span class="p">,</span> <span class="n">result_dict</span><span class="p">[</span><span class="s1">&#39;split_headers_and_service_lines&#39;</span><span class="p">])</span>
</pre></div>
</div>
<ol class="simple">
<li><strong>Execution Context Lifecycle Changes</strong></li>
</ol>
<p>Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="ne">AttributeError</span><span class="p">:</span> <span class="s1">&#39;ExecutionContext&#39;</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;value&#39;</span>
</pre></div>
</div>
<p>This is officially the most difficult change, conceptually. We changed the system so that the <code class="docutils literal notranslate"><span class="pre">ExecutionContext</span></code> passed around to your solids (now <code class="docutils literal notranslate"><span class="pre">RuntimeExecutionContext</span></code>) is constructed by the system rather than the user. The <code class="docutils literal notranslate"><span class="pre">ExecutionContext</span></code> object the user creates can be thought of as <code class="docutils literal notranslate"><span class="pre">RuntimeExecutionContextParams</span></code>. We opted against that name because it was excessively verbose.</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="k">with</span> <span class="n">context</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="s1">&#39;data_source_run_id&#39;</span><span class="p">,</span> <span class="n">data_source_run_id</span><span class="p">),</span>\\
        <span class="n">context</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="s1">&#39;data_source&#39;</span><span class="p">,</span> <span class="s1">&#39;new_data&#39;</span><span class="p">),</span>\\
        <span class="n">context</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="s1">&#39;pipeline_run_id&#39;</span><span class="p">,</span> <span class="n">pipeline_run_id</span><span class="p">):</span>

        <span class="k">yield</span> <span class="n">ExecutionContext</span><span class="p">(</span>
            <span class="n">loggers</span><span class="o">=</span><span class="p">[</span><span class="n">define_colored_console_logger</span><span class="p">(</span><span class="s1">&#39;dagster&#39;</span><span class="p">,</span> <span class="n">log_level</span><span class="p">)],</span>
            <span class="n">resources</span><span class="o">=</span><span class="n">resources</span>
        <span class="p">)</span>
</pre></div>
</div>
<p>After:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span>    <span class="k">yield</span> <span class="n">ExecutionContext</span><span class="p">(</span>
        <span class="n">loggers</span><span class="o">=</span><span class="p">[</span><span class="n">define_colored_console_logger</span><span class="p">(</span><span class="s1">&#39;dagster&#39;</span><span class="p">,</span> <span class="n">log_level</span><span class="p">)],</span>
        <span class="n">resources</span><span class="o">=</span><span class="n">resources</span><span class="p">,</span>
        <span class="n">tags</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;data_source_run_id&#39;</span><span class="p">:</span> <span class="n">data_source_run_id</span><span class="p">,</span>
            <span class="s1">&#39;data_source&#39;</span><span class="p">:</span> <span class="s1">&#39;new_data&#39;</span><span class="p">,</span>
            <span class="s1">&#39;pipeline_run_id&#39;</span><span class="p">:</span> <span class="n">pipeline_run_id</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">)</span>

</pre></div>
</div>
<ol class="simple">
<li><strong>Non-null by default</strong></li>
</ol>
<p>Error:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">E</span>   <span class="n">dagster</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">DagsterTypeError</span><span class="p">:</span> <span class="n">Solid</span> <span class="n">solid_name</span> <span class="nb">input</span> <span class="n">input_name</span> <span class="n">received</span> <span class="n">value</span> <span class="kc">None</span> <span class="n">which</span> <span class="n">does</span> <span class="ow">not</span> <span class="k">pass</span> <span class="n">the</span> <span class="n">typecheck</span> <span class="k">for</span> <span class="n">Dagster</span> <span class="nb">type</span> <span class="n">PandasDataFrame</span><span class="o">.</span> <span class="n">Step</span> <span class="n">solid_name</span><span class="o">.</span><span class="n">transform</span>
</pre></div>
</div>
<p>You have encountered a type error. Likely it is because in 0.2.8, types could
accept None by default, and this is no longer true in 0.3.0. You have to opt into accepting nulls.</p>
<p>Before:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="nd">@solid</span><span class="p">(</span><span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">dagster_pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">return_none</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">None</span> <span class="c1"># None no longer allowed, would break at runtime</span>
</pre></div>
</div>
<p>After</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="nd">@solid</span><span class="p">(</span><span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">Nullable</span><span class="p">(</span><span class="n">dagster_pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">))])</span>
<span class="k">def</span> <span class="nf">return_none</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="k">return</span> <span class="bp">None</span> <span class="c1"># Because of Nullable wrapper, this is ok</span>
</pre></div>
</div>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="../intro_tutorial/unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="028_to_030_new_concepts.html" title="previous chapter">New Concepts in 0.3.0</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/guides/028_to_030_upgrade_guide.md.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/guides/028_to_030_upgrade_guide.md.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 57'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>An actual DAG &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Inputs" href="inputs.html" />
    <link rel="prev" title="Hello, DAG" href="hello_dag.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="an-actual-dag">
<h1>An actual DAG<a class="headerlink" href="#an-actual-dag" title="Permalink to this headline">¶</a></h1>
<p>Next we will build a slightly more topologically complex DAG that demonstrates how dagster
determines the execution order of solids in a pipeline:</p>
<img alt="../_images/actual_dag_figure_one.png" src="../_images/actual_dag_figure_one.png" />
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">actual_dag.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
    <span class="n">DependencyDefinition</span><span class="p">,</span>
    <span class="n">InputDefinition</span><span class="p">,</span>
    <span class="n">PipelineDefinition</span><span class="p">,</span>
    <span class="n">lambda_solid</span><span class="p">,</span>
<span class="p">)</span>


<span class="nd">@lambda_solid</span>
<span class="k">def</span> <span class="nf">solid_a</span><span class="p">():</span>
    <span class="k">return</span> <span class="mi">1</span>


<span class="nd">@lambda_solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;arg_a&#39;</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">solid_b</span><span class="p">(</span><span class="n">arg_a</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">arg_a</span> <span class="o">*</span> <span class="mi">2</span>


<span class="nd">@lambda_solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;arg_a&#39;</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">solid_c</span><span class="p">(</span><span class="n">arg_a</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">arg_a</span> <span class="o">*</span> <span class="mi">3</span>


<span class="nd">@lambda_solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;arg_b&#39;</span><span class="p">),</span> <span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;arg_c&#39;</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">solid_d</span><span class="p">(</span><span class="n">arg_b</span><span class="p">,</span> <span class="n">arg_c</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">arg_b</span> <span class="o">*</span> <span class="n">arg_c</span>


<span class="k">def</span> <span class="nf">define_diamond_dag_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;actual_dag_pipeline&#39;</span><span class="p">,</span>
        <span class="c1"># The order of this list does not matter:</span>
        <span class="c1"># dependencies determine execution order</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">solid_d</span><span class="p">,</span> <span class="n">solid_c</span><span class="p">,</span> <span class="n">solid_b</span><span class="p">,</span> <span class="n">solid_a</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;solid_b&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;arg_a&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;solid_a&#39;</span><span class="p">)},</span>
            <span class="s1">&#39;solid_c&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;arg_a&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;solid_a&#39;</span><span class="p">)},</span>
            <span class="s1">&#39;solid_d&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;arg_b&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;solid_b&#39;</span><span class="p">),</span>
                <span class="s1">&#39;arg_c&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;solid_c&#39;</span><span class="p">),</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Again, it is worth noting how we are connecting <em>inputs</em> and <em>outputs</em> rather than just <em>tasks</em>.
Point your attention to the <code class="docutils literal notranslate"><span class="pre">solid_d</span></code> entry in the dependencies dictionary: we declare
dependencies on a per-input basis.</p>
<p>When you execute this example, you’ll see that <code class="docutils literal notranslate"><span class="pre">solid_a</span></code> executes first, then <code class="docutils literal notranslate"><span class="pre">solid_b</span></code> and
<code class="docutils literal notranslate"><span class="pre">solid_c</span></code> – in any order – and <code class="docutils literal notranslate"><span class="pre">solid_d</span></code> executes last, after <code class="docutils literal notranslate"><span class="pre">solid_b</span></code> and <code class="docutils literal notranslate"><span class="pre">solid_c</span></code>
have both executed.</p>
<p>In more sophisticated execution environments, <code class="docutils literal notranslate"><span class="pre">solid_b</span></code> and <code class="docutils literal notranslate"><span class="pre">solid_c</span></code> could execute not just
in any order, but at the same time, since their inputs don’t depend on each other’s outputs –
but both would still have to execute after <code class="docutils literal notranslate"><span class="pre">solid_a</span></code> (because they depend on its output to
satisfy their inputs) and before <code class="docutils literal notranslate"><span class="pre">solid_d</span></code> (because their outputs in turn are depended on by
the input of <code class="docutils literal notranslate"><span class="pre">solid_d</span></code>).</p>
<p>Try it in dagit or from the command line:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f actual_dag.py -n define_diamond_dag_pipeline
</pre></div>
</div>
<p>What’s the output of this DAG?</p>
<p>We’ve seen how to wire solids together into DAGs. Now let’s look more deeply at their
<a class="reference internal" href="inputs.html"><span class="doc">Inputs</span></a>, and start to explore how solids can interact with their external
environment.</p>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="hello_dag.html" title="previous chapter">Hello, DAG</a></li>
      <li>Next: <a href="inputs.html" title="next chapter">Inputs</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/actual_dag.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/actual_dag.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 58'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Configuration &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Configuration Schemas" href="configuration_schemas.html" />
    <link rel="prev" title="Inputs" href="inputs.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="configuration">
<h1>Configuration<a class="headerlink" href="#configuration" title="Permalink to this headline">¶</a></h1>
<p>For maximum flexibility, testability, and reusability, we want to avoid hardcoding solids’
(or pipelines’) dependencies on the external world.</p>
<p>We should be able to run the same code in different environments for test, in development, and in
production, and to parametrize our solids’ interactions with the different facilities afforded by
each of those environments.</p>
<p>Then, we can declaratively specify features of our environment without having to rewrite our code.</p>
<p>Conceptually, where <strong>inputs</strong> are inputs to the computation done by a single solid, and might be
linked by a dependency definition to <strong>outputs</strong> of a previous computation in a DAG,
<strong>configuration</strong> should be used to specify <em>how</em> a computation executes.</p>
<p>We’ll illustrate this by configuring our hello world example to speak a couple of different
languages.</p>
<p>This time, we’ll use a more fully-featured API to define our solid –
<a class="reference internal" href="../apidocs/decorators.html#dagster.solid" title="dagster.solid"><code class="xref py py-func docutils literal notranslate"><span class="pre">&#64;solid</span></code></a> instead of <a class="reference internal" href="../apidocs/decorators.html#dagster.lambda_solid" title="dagster.lambda_solid"><code class="xref py py-func docutils literal notranslate"><span class="pre">&#64;lambda_solid</span></code></a>.</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">config.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="c1"># encoding: utf-8</span>
<span class="c1"># py27 compat</span>

<span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="n">Field</span><span class="p">,</span> <span class="n">PipelineDefinition</span><span class="p">,</span> <span class="n">execute_pipeline</span><span class="p">,</span> <span class="n">solid</span><span class="p">,</span> <span class="n">types</span>


<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">,</span> <span class="n">is_optional</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">default_value</span><span class="o">=</span><span class="s1">&#39;en-us&#39;</span><span class="p">)</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">configurable_hello</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;haw&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;Aloha honua!&#39;</span>
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;cn&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;你好, 世界!&#39;</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="s1">&#39;Hello, world!&#39;</span>


<span class="k">def</span> <span class="nf">define_configurable_hello_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;configurable_hello_pipeline&#39;</span><span class="p">,</span> <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">configurable_hello</span><span class="p">]</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">test_intro_tutorial_part_four</span><span class="p">():</span>
    <span class="n">execute_pipeline</span><span class="p">(</span>
        <span class="n">define_configurable_hello_pipeline</span><span class="p">(),</span>
        <span class="p">{</span><span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;configurable_hello&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;config&#39;</span><span class="p">:</span> <span class="s1">&#39;cn&#39;</span><span class="p">}}},</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>We will be exploring the <a class="reference internal" href="../apidocs/decorators.html#dagster.solid" title="dagster.solid"><code class="xref py py-func docutils literal notranslate"><span class="pre">&#64;solid</span></code></a> API in much more detail as this tutorial
proceeds. For now, the salient differences are:</p>
<ol class="arabic simple">
<li>The <a class="reference internal" href="../apidocs/decorators.html#dagster.solid" title="dagster.solid"><code class="xref py py-func docutils literal notranslate"><span class="pre">&#64;solid</span></code></a> API takes an additional parameter, <cite>config_field</cite>, which
defines the structure and type of configuration values that can be set on each execution of the
solid. This parameter should be a <a class="reference internal" href="../apidocs/definitions.html#dagster.Field" title="dagster.Field"><code class="xref py py-func docutils literal notranslate"><span class="pre">Field</span></code></a>, which tells the dagster
machinery how to translate config values into runtime values available to the solid.</li>
<li>The function annotated by the <a class="reference internal" href="../apidocs/decorators.html#dagster.solid" title="dagster.solid"><code class="xref py py-func docutils literal notranslate"><span class="pre">&#64;solid</span></code></a> API receives an additional first
parameter, <code class="docutils literal notranslate"><span class="pre">context</span></code>, of type <code class="xref py py-class docutils literal notranslate"><span class="pre">TransformExecutionContext</span></code>.
The configuration passed into each solid is available to the annotated function as <code class="docutils literal notranslate"><span class="pre">context.solid_config</span></code>.</li>
</ol>
<p>Configuration values are passed in a dict as the second argument to
<a class="reference internal" href="../apidocs/execution.html#dagster.execute_pipeline" title="dagster.execute_pipeline"><code class="xref py py-func docutils literal notranslate"><span class="pre">execute_pipeline</span></code></a>. This dict specifies <em>all</em> of the
configuration to execute an entire pipeline. It may have many sections, but we’re only
using one of them here: per-solid configuration specified under the key <code class="docutils literal notranslate"><span class="pre">solids</span></code>.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="p">{</span><span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;configurable_hello&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;config&#39;</span><span class="p">:</span> <span class="s1">&#39;cn&#39;</span><span class="p">}}},</span>
</pre></div>
</div>
<p>The <code class="docutils literal notranslate"><span class="pre">solids</span></code> dict is keyed by solid name, and each of its values in turn defines a <code class="docutils literal notranslate"><span class="pre">config</span></code>
key corresponding to the user-defined configuration schema for each particular solid (which we set
before using the <code class="docutils literal notranslate"><span class="pre">config_field</span></code> parameter). If these values don’t match the user-defined schema,
we’ll get a helpful error message.</p>
<p>In this case, we’ve defined a single scalar string value as config.</p>
<p>Let’s see how to run this pipeline, with config, from the command line. In order to do this you
must provide config in the form of a yaml file:</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">config_env.yml</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">solids</span><span class="p">:</span>
  <span class="n">configurable_hello</span><span class="p">:</span>
    <span class="n">config</span><span class="p">:</span> <span class="s2">&quot;haw&quot;</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Now you can run this pipeline with this config file like so:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f config.py <span class="se">\\</span>
-n define_configurable_hello_pipeline -e config_env.yml
</pre></div>
</div>
<p>To run this example from dagit, use the following command:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagit -f config.py -n define_configurable_hello_pipeline
</pre></div>
</div>
<p>Just as with configurable inputs, you can edit the configuration on the fly in dagit’s built-in
config editor. Try switching languages and rerunning the pipeline!</p>
<img alt="../_images/config_figure_one.png" src="../_images/config_figure_one.png" />
<p>Next, we’ll learn about configuration schemas and how the type system can help with the management
of config: <a class="reference internal" href="configuration_schemas.html"><span class="doc">Configuration Schemas</span></a>.</p>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="inputs.html" title="previous chapter">Inputs</a></li>
      <li>Next: <a href="configuration_schemas.html" title="next chapter">Configuration Schemas</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/config.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/config.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 59'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Configuration Schemas &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Execution Context" href="execution_context.html" />
    <link rel="prev" title="Configuration" href="config.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="configuration-schemas">
<h1>Configuration Schemas<a class="headerlink" href="#configuration-schemas" title="Permalink to this headline">¶</a></h1>
<p>Dagster includes a system for strongly-typed, self-describing configurations schemas. These
descriptions are very helpful when learning how to operate a pipeline, make a rich configuration
editing experience possible, and help to catch configuration errors before pipeline execution.</p>
<p>Let’s see how the configuration schema can prevent errors and improve pipeline documentation.
We’ll replace the config field in our solid definition with a structured, strongly typed schema.</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">configuration_schemas.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="k">import</span> <span class="n">defaultdict</span>

<span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
    <span class="n">Any</span><span class="p">,</span>
    <span class="n">DependencyDefinition</span><span class="p">,</span>
    <span class="n">Dict</span><span class="p">,</span>
    <span class="n">Field</span><span class="p">,</span>
    <span class="n">InputDefinition</span><span class="p">,</span>
    <span class="n">Int</span><span class="p">,</span>
    <span class="n">PipelineDefinition</span><span class="p">,</span>
    <span class="n">RepositoryDefinition</span><span class="p">,</span>
    <span class="n">String</span><span class="p">,</span>
    <span class="n">lambda_solid</span><span class="p">,</span>
    <span class="n">solid</span><span class="p">,</span>
<span class="p">)</span>


<span class="nd">@solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">)],</span> <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span><span class="n">Any</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">multiply_the_word</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">word</span> <span class="o">*</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">[</span><span class="s1">&#39;factor&#39;</span><span class="p">]</span>


<span class="nd">@lambda_solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">count_letters</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
        <span class="n">counts</span><span class="p">[</span><span class="n">letter</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="nb">dict</span><span class="p">(</span><span class="n">counts</span><span class="p">)</span>


<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">)],</span>
    <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span><span class="n">Dict</span><span class="p">({</span><span class="s1">&#39;factor&#39;</span><span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">Int</span><span class="p">)})),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">typed_multiply_the_word</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">word</span> <span class="o">*</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">[</span><span class="s1">&#39;factor&#39;</span><span class="p">]</span>


<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">)],</span>
    <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span><span class="n">Dict</span><span class="p">({</span><span class="s1">&#39;factor&#39;</span><span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">String</span><span class="p">)})),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">typed_multiply_the_word_error</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">word</span> <span class="o">*</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">[</span><span class="s1">&#39;factor&#39;</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">define_demo_configuration_schema_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;demo_configuration_schema&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">multiply_the_word</span><span class="p">,</span> <span class="n">count_letters</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;count_letters&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;word&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;multiply_the_word&#39;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">define_typed_demo_configuration_schema_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;typed_demo_configuration_schema&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">typed_multiply_the_word</span><span class="p">,</span> <span class="n">count_letters</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;count_letters&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;word&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;typed_multiply_the_word&#39;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">define_typed_demo_configuration_schema_error_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;typed_demo_configuration_schema_error&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">typed_multiply_the_word_error</span><span class="p">,</span> <span class="n">count_letters</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;count_letters&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;word&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;typed_multiply_the_word_error&#39;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">define_demo_configuration_schema_repo</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">RepositoryDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;demo_configuration_schema_repo&#39;</span><span class="p">,</span>
        <span class="n">pipeline_dict</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;demo_configuration_schema&#39;</span><span class="p">:</span> <span class="n">define_demo_configuration_schema_pipeline</span><span class="p">,</span>
            <span class="s1">&#39;typed_demo_configuration_schema&#39;</span><span class="p">:</span> <span class="n">define_typed_demo_configuration_schema_pipeline</span><span class="p">,</span>
            <span class="s1">&#39;typed_demo_configuration_schema_error&#39;</span><span class="p">:</span> <span class="n">define_typed_demo_configuration_schema_error_pipeline</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>The previous env.yml file works as before:</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">configuration_schemas.yml</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">context</span><span class="p">:</span>
  <span class="n">default</span><span class="p">:</span>
    <span class="n">config</span><span class="p">:</span>
      <span class="n">log_level</span><span class="p">:</span> <span class="n">DEBUG</span>

<span class="n">solids</span><span class="p">:</span>
  <span class="n">multiply_the_word</span><span class="p">:</span>
    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">word</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="n">quux</span>
    <span class="n">config</span><span class="p">:</span>
      <span class="n">factor</span><span class="p">:</span> <span class="mi">2</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Now let’s imagine we made a mistake and passed a <code class="docutils literal notranslate"><span class="pre">string</span></code> in our configuration:</p>
<div class="literal-block-wrapper docutils container" id="id3">
<div class="code-block-caption"><span class="caption-text">configuration_schemas_runtime_error.yml</span><a class="headerlink" href="#id3" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">context</span><span class="p">:</span>
  <span class="n">default</span><span class="p">:</span>
    <span class="n">config</span><span class="p">:</span>
      <span class="n">log_level</span><span class="p">:</span> <span class="n">DEBUG</span>

<span class="n">solids</span><span class="p">:</span>
  <span class="n">multiply_the_word</span><span class="p">:</span>
    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">word</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="s2">&quot;kj&quot;</span>
    <span class="n">config</span><span class="p">:</span>
<span class="hll">      <span class="n">factor</span><span class="p">:</span> <span class="s2">&quot;not_a_num&quot;</span>
</span></pre></div>
</td></tr></table></div>
</div>
<p>And then ran it:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f configuration_schemas.py <span class="se">\\</span>
-n define_demo_configuration_schema_repo <span class="se">\\</span>
demo_configuration_schema <span class="se">\\</span>
-e configuration_schemas_runtime_error.yml
<span class="go">...</span>
<span class="go">File &quot;configuration_schemas.py&quot;, line 21, in multiply_the_word</span>
<span class="go">    return word * info.config[&#39;factor&#39;]</span>
<span class="go">TypeError: can&#39;t multiply sequence by non-int of type &#39;str&#39;</span>
</pre></div>
</div>
<p>This pipeline is not typechecked and therefore error is caught at runtime. It would be preferable
to catch this before execution.</p>
<p>In order to do that, let us use the typed config solid.</p>
<div class="literal-block-wrapper docutils container" id="id4">
<div class="code-block-caption"><span class="caption-text">configuration_schemas_runtime_error.yml</span><a class="headerlink" href="#id4" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">context</span><span class="p">:</span>
  <span class="n">default</span><span class="p">:</span>
    <span class="n">config</span><span class="p">:</span>
      <span class="n">log_level</span><span class="p">:</span> <span class="n">DEBUG</span>

<span class="n">solids</span><span class="p">:</span>
  <span class="n">typed_multiply_the_word</span><span class="p">:</span>
    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">word</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="n">kdjfkd</span>
    <span class="n">config</span><span class="p">:</span>
<span class="hll">      <span class="n">factor</span><span class="p">:</span> <span class="s2">&quot;not_a_number&quot;</span>
</span></pre></div>
</td></tr></table></div>
</div>
<p>And then run the pipeline</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f configuration_schemas.py <span class="se">\\</span>
-n define_demo_configuration_schema_repo <span class="se">\\</span>
typed_demo_configuration_schema <span class="se">\\</span>
-e configuration_schemas_type_mismatch_error.yml
</pre></div>
</div>
<p>And you’ll get a nice error <em>prior</em> to execution:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">dagster.core.execution.PipelineConfigEvaluationError:</span>
<span class="go">Pipeline &quot;typed_demo_configuration_schema&quot; config errors:</span>
<span class="go">Error 1: Type failure at path</span>
<span class="go">&quot;root:solids:typed_multiply_the_word:config:factor&quot; on type</span>
<span class="go">&quot;Int&quot;. Got &quot;&#39;not_a_number&#39;&quot;. Value not_a_number is not</span>
<span class="go">valid for type Int.</span>
</pre></div>
</div>
<p>Now, instead of a runtime failure which might arise deep inside a time-consuming or expensive
pipeline execution, and which might be tedious to trace back to its root cause, we get a clear,
actionable error message before the pipeline is ever executed.</p>
<p>Let’s see what happens if we pass config with the wrong structure:</p>
<div class="literal-block-wrapper docutils container" id="id5">
<div class="code-block-caption"><span class="caption-text">configuration_schemas_wrong_field.yml</span><a class="headerlink" href="#id5" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">context</span><span class="p">:</span>
  <span class="n">default</span><span class="p">:</span>
    <span class="n">config</span><span class="p">:</span>
      <span class="n">log_level</span><span class="p">:</span> <span class="n">DEBUG</span>

<span class="n">solids</span><span class="p">:</span>
  <span class="n">multiply_the_word_with_typed_config</span><span class="p">:</span>
    <span class="n">config</span><span class="p">:</span>
<span class="hll">      <span class="n">wrong_factor</span><span class="p">:</span> <span class="mi">1</span>
</span>    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">word</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="s2">&quot;bkjdf&quot;</span>
</pre></div>
</td></tr></table></div>
</div>
<p>And then run the pipeline:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f configuration_schemas.py <span class="se">\\</span>
-n define_demo_configuration_schema_pipeline -e configuration_schemas_wrong_field.yml
<span class="go">...</span>
<span class="go">dagster.core.execution.PipelineConfigEvaluationError: Pipeline &quot;demo_configuration_schema&quot; config errors:</span>
<span class="go">    Error 1: Undefined field &quot;multiply_the_word_with_typed_config&quot; at path root:solids</span>
<span class="go">    Error 2: Missing required field &quot;multiply_the_word&quot; at path root:solids</span>
</pre></div>
</div>
<p>Next, we’ll see how to use the  <a class="reference internal" href="execution_context.html"><span class="doc">Execution Context</span></a> to further configure
how pipeline execution interacts with its environment.</p>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="config.html" title="previous chapter">Configuration</a></li>
      <li>Next: <a href="execution_context.html" title="next chapter">Execution Context</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/configuration_schemas.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/configuration_schemas.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 60'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Execution Context &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Resources" href="resources.html" />
    <link rel="prev" title="Configuration Schemas" href="configuration_schemas.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="execution-context">
<h1>Execution Context<a class="headerlink" href="#execution-context" title="Permalink to this headline">¶</a></h1>
<p>One of the most important objects in the system is the execution context. The execution
context, the logger, and the resources are threaded throughout the entire computation (
via the <code class="docutils literal notranslate"><span class="pre">context</span></code> object passed to user code) and contains handles to logging facilities
and external resources. Interactions with logging systems, databases, and external
clusters (e.g. a Spark cluster) should be managed through these properties of the
info object.</p>
<p>This provides a powerful layer of indirection that allows a solid to abstract
away its surrounding environment. Using an execution context allows the system and
pipeline infrastructure to provide different implementations for different
environments, giving the engineer the opportunity to design pipelines that
can be executed on your local machine or your CI/CD pipeline as readily as
your production cluster environment.</p>
<div class="section" id="logging">
<h2>Logging<a class="headerlink" href="#logging" title="Permalink to this headline">¶</a></h2>
<p>One of the most basic pipeline-level facilities is logging.</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">execution_context.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="n">PipelineDefinition</span><span class="p">,</span> <span class="n">execute_pipeline</span><span class="p">,</span> <span class="n">solid</span>


<span class="nd">@solid</span>
<span class="k">def</span> <span class="nf">debug_message</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">context</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s1">&#39;A debug message.&#39;</span><span class="p">)</span>
    <span class="k">return</span> <span class="s1">&#39;foo&#39;</span>


<span class="nd">@solid</span>
<span class="k">def</span> <span class="nf">error_message</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="n">context</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s1">&#39;An error occurred.&#39;</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">define_execution_context_pipeline_step_one</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span><span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">debug_message</span><span class="p">,</span> <span class="n">error_message</span><span class="p">])</span>
</pre></div>
</div>
</div>
<p>Run this example pipeline in dagit:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -m dagster.tutorials.intro_tutorial.tutorial_repository -n define_repository execution_context_pipeline
</pre></div>
</div>
<p>And you’ll notice log messages like this:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">2019-01-15 04:59:37 - dagster - ERROR - orig_message=&quot;An error occurred.&quot; log_message_id=&quot;b0cbb1be-e476-4a4e-aaac-a29ddb15309a&quot; run_id=&quot;d8f41da0-3825-4ac0-b8e0-4f38ba45b8e0&quot; pipeline=&quot;execution_context_pipeline&quot; solid=&quot;error_message&quot; solid_definition=&quot;error_message&quot;</span>
</pre></div>
</div>
<p>These log messages are annonated with a bunch of key value pairs that indicate where in the
computation each log message was emitted. This happened because we logged through the execution
context.</p>
<p>Notice that even though the user only logged the message “An error occurred”, by routing logging
through the context we are able to provide richer error information – including the name of the
solid and a timestamp – in a semi-structured format.</p>
<p>You’ll notice that <cite>‘A debug message.’</cite> does not appear in the execution logs. This
is because the default log level is <code class="docutils literal notranslate"><span class="pre">INFO</span></code>, so debug-level messages will not appear.</p>
<p>Let’s change that by specifying some config.</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">execution_context.yml</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">context</span><span class="p">:</span>
  <span class="nt">default</span><span class="p">:</span>
    <span class="nt">config</span><span class="p">:</span>
      <span class="nt">log_level</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">DEBUG</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Save it as execution_context.yml and then run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute  <span class="se">\\</span>
-m dagster.tutorials.intro_tutorial.tutorial_repository <span class="se">\\</span>
-n define_repository execution_context_pipeline <span class="se">\\</span>
-e execution_context.yml
</pre></div>
</div>
<p>You’ll see now that debug messages print out to the console.</p>
<p>Although logging is a universally useful case for the execution context, this example only touches
on the capabilities of the context. Any pipeline-level facilities that pipeline authors might want
to make configurable for different environments – for instance, access to file systems, databases,
or compute substrates – can be configured using the context.</p>
<p>We’ll see how to use some of these other capabilities in the next section:
<a class="reference internal" href="resources.html"><span class="doc">Resources</span></a>.</p>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="configuration_schemas.html" title="previous chapter">Configuration Schemas</a></li>
      <li>Next: <a href="resources.html" title="next chapter">Resources</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/execution_context.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/execution_context.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 61'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Expectations &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Multiple Outputs" href="multiple_outputs.html" />
    <link rel="prev" title="User-Defined Types" href="types.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="expectations">
<h1>Expectations<a class="headerlink" href="#expectations" title="Permalink to this headline">¶</a></h1>
<p>Dagster has a first-class concept to capture data quality tests. We call these
data quality tests expectations.</p>
<p>Data pipelines have the property that they typically do not control
what data they ingest. Unlike a traditional application where you can
prevent users from entering malformed data, data pipelines do not have
that option. When unexpected data enters a pipeline and causes a software
error, typically the only recourse is to update your code.</p>
<p>Lying within the code of data pipelines are a whole host of implicit
assumptions about the nature of the data. One way to frame the goal of
expectations is to say that they make those implict assumption explicit.
And by making these a first class concept they can be described with metadata,
inspected, and configured to run in different ways.</p>
<p>You’ll note the new concept of expecatations.</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">expectations.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
    <span class="n">ExpectationDefinition</span><span class="p">,</span>
    <span class="n">ExpectationResult</span><span class="p">,</span>
    <span class="n">InputDefinition</span><span class="p">,</span>
    <span class="n">Int</span><span class="p">,</span>
    <span class="n">OutputDefinition</span><span class="p">,</span>
    <span class="n">PipelineDefinition</span><span class="p">,</span>
    <span class="n">lambda_solid</span><span class="p">,</span>
<span class="p">)</span>


<span class="nd">@lambda_solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span>
        <span class="n">InputDefinition</span><span class="p">(</span>
            <span class="s1">&#39;num_one&#39;</span><span class="p">,</span>
            <span class="n">Int</span><span class="p">,</span>
<span class="hll">            <span class="n">expectations</span><span class="o">=</span><span class="p">[</span>
</span><span class="hll">                <span class="n">ExpectationDefinition</span><span class="p">(</span>
</span><span class="hll">                    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;check_positive&#39;</span><span class="p">,</span>
</span><span class="hll">                    <span class="n">expectation_fn</span><span class="o">=</span><span class="k">lambda</span> <span class="n">_info</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">ExpectationResult</span><span class="p">(</span>
</span><span class="hll">                        <span class="n">success</span><span class="o">=</span><span class="n">value</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class="hll">                    <span class="p">),</span>
</span><span class="hll">                <span class="p">)</span>
</span><span class="hll">            <span class="p">],</span>
</span>        <span class="p">),</span>
        <span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num_two&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">),</span>
    <span class="p">],</span>
    <span class="n">output</span><span class="o">=</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">Int</span><span class="p">),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">add_ints</span><span class="p">(</span><span class="n">num_one</span><span class="p">,</span> <span class="n">num_two</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num_one</span> <span class="o">+</span> <span class="n">num_two</span>


<span class="k">def</span> <span class="nf">define_expectations_tutorial_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;expectations_tutorial_pipeline&#39;</span><span class="p">,</span> <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">add_ints</span><span class="p">]</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>At its core, an expectation is a function applied to either an input or an output.
Generally anywhere there is a type, you can apply an expectation. This function
can be as sophisticated as the user wants, anywhere from a simple null check to
checking thresholds of distrbutions or querying lookup tables.</p>
<p>If you run this pipeline, you’ll notice some logging that indicates that the expectation
was processed</p>
<p>We’ll use this config file.</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">expectations_pass.yml</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">solids</span><span class="p">:</span>
  <span class="n">add_ints</span><span class="p">:</span>
    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">num_one</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="mi">2</span>
      <span class="n">num_two</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="mi">3</span>

</pre></div>
</td></tr></table></div>
</div>
<p>And then run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f expectations.py <span class="se">\\</span>
-n define_expectations_tutorial_pipeline -e <span class="se">\\</span>
expectations_pass.yml
</pre></div>
</div>
<p>In that execution you’ll notice a passing expectation:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">2019-01-15 13:04:17 - dagster - INFO - orig_message=&quot;Execution of add_ints.output.num_one.expectation.check_positive succeeded in 0.06198883056640625&quot; log_message_id=&quot;e903e121-e529-42ff-9561-b17dea553fba&quot; run_id=&quot;71affcec-1c10-4a8b-9416-10115a01783f&quot; pipeline=&quot;expectations_tutorial_pipeline&quot; solid=&quot;add_ints&quot; solid_definition=&quot;add_ints&quot; event_type=&quot;EXECUTION_PLAN_STEP_SUCCESS&quot; millis=0.06198883056640625 step_key=&quot;add_ints.output.num_one.expectation.check_positive&quot;</span>
</pre></div>
</div>
<p>Now let’s make this fail. Currently the default behavior is to throw an error and halt execution
when an expectation fails. So:</p>
<div class="literal-block-wrapper docutils container" id="id3">
<div class="code-block-caption"><span class="caption-text">expectations_fail.yml</span><a class="headerlink" href="#id3" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">solids</span><span class="p">:</span>
  <span class="n">add_ints</span><span class="p">:</span>
    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">num_one</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="o">-</span><span class="mi">2</span>
      <span class="n">num_two</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="mi">3</span>

</pre></div>
</td></tr></table></div>
</div>
<p>And then:</p>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span>$ dagster pipeline execute -f expectations.py <span class="se">\\</span>
-n define_expectations_tutorial_pipeline <span class="se">\\</span>
-e expectations_fail.yml

dagster.core.errors.DagsterExpectationFailedError:
DagsterExpectationFailedError<span class="o">(</span><span class="nv">solid</span><span class="o">=</span>add_ints,
<span class="nv">output</span><span class="o">=</span>num_one, <span class="nv">expectation</span><span class="o">=</span>check_positive
<span class="nv">value</span><span class="o">=</span>-2<span class="o">)</span>
</pre></div>
</div>
<p>Because the system is explictly aware of these expectations they are viewable in tools like dagit.
It can also configure the execution of these expectations. The capabilities of this aspect of the
system are currently quite immature, but we expect to develop these more in the future. The only
feature right now is the ability to skip expectations entirely. This is useful in a case where
expectations are expensive and you have a time-critical job you must. In that case you can
configure the pipeline to skip expectations entirely.</p>
<div class="literal-block-wrapper docutils container" id="id4">
<div class="code-block-caption"><span class="caption-text">expectations_skip_fail.yml</span><a class="headerlink" href="#id4" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">solids</span><span class="p">:</span>
  <span class="n">add_ints</span><span class="p">:</span>
    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">num_one</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="o">-</span><span class="mi">2</span>
      <span class="n">num_two</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="mi">3</span>

<span class="n">expectations</span><span class="p">:</span>
  <span class="n">evaluate</span><span class="p">:</span> <span class="kc">False</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span>$ dagster pipeline execute -f expectations.py <span class="se">\\</span>
-n define_expectations_tutorial_pipeline <span class="se">\\</span>
-e expectations_skip_failed.yml
</pre></div>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="types.html" title="previous chapter">User-Defined Types</a></li>
      <li>Next: <a href="multiple_outputs.html" title="next chapter">Multiple Outputs</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/expectations.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/expectations.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 62'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Hello, DAG &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="An actual DAG" href="actual_dag.html" />
    <link rel="prev" title="Hello, World" href="hello_world.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="hello-dag">
<h1>Hello, DAG<a class="headerlink" href="#hello-dag" title="Permalink to this headline">¶</a></h1>
<p>One of the core capabitilies of dagster is the ability to express data pipelines as arbitrary
directed acyclic graphs (DAGs) of solids.</p>
<p>We’ll define a very simple two-solid pipeline whose first solid returns a hardcoded string,
and whose second solid concatenates two copies of its input. The output of the pipeline should be
two concatenated copies of the hardcoded string.</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">hello_dag.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
    <span class="n">DependencyDefinition</span><span class="p">,</span>
    <span class="n">InputDefinition</span><span class="p">,</span>
    <span class="n">PipelineDefinition</span><span class="p">,</span>
    <span class="n">lambda_solid</span><span class="p">,</span>
<span class="p">)</span>


<span class="nd">@lambda_solid</span>
<span class="k">def</span> <span class="nf">solid_one</span><span class="p">():</span>
    <span class="k">return</span> <span class="s1">&#39;foo&#39;</span>


<span class="nd">@lambda_solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;arg_one&#39;</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">solid_two</span><span class="p">(</span><span class="n">arg_one</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">arg_one</span> <span class="o">*</span> <span class="mi">2</span>


<span class="k">def</span> <span class="nf">define_hello_dag_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;hello_dag_pipeline&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">solid_one</span><span class="p">,</span> <span class="n">solid_two</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;solid_two&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;arg_one&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;solid_one&#39;</span><span class="p">)}</span>
        <span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>This pipeline introduces a few new concepts.</p>
<ol class="arabic">
<li><p class="first">Solids can have <strong>inputs</strong> defined by instances of
<a class="reference internal" href="../apidocs/definitions.html#dagster.InputDefinition" title="dagster.InputDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">InputDefinition</span></code></a>. Inputs allow us to connect solids to
each other, and give dagster information about solids’ dependencies on each other (and, as
we’ll see later, optionally let dagster check the types of the inputs at runtime).</p>
</li>
<li><p class="first">Solids’ <strong>dependencies</strong> on each other are expressed by instances of
<a class="reference internal" href="../apidocs/definitions.html#dagster.DependencyDefinition" title="dagster.DependencyDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">DependencyDefinition</span></code></a>.
You’ll notice the new argument to <a class="reference internal" href="../apidocs/definitions.html#dagster.PipelineDefinition" title="dagster.PipelineDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">PipelineDefinition</span></code></a>
called <code class="docutils literal notranslate"><span class="pre">dependencies</span></code>, which is a dict that defines the connections between solids in a
pipeline’s DAG.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
    <span class="s1">&#39;solid_two&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;arg_one&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;solid_one&#39;</span><span class="p">)}</span>
<span class="p">},</span>
</pre></div>
</div>
<p>The first layer of keys in this dict are the <em>names</em> of solids in the pipeline. The second layer
of keys are the <em>names</em> of the inputs to each solid. Each input in the DAG must be provided a
<a class="reference internal" href="../apidocs/definitions.html#dagster.DependencyDefinition" title="dagster.DependencyDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">DependencyDefinition</span></code></a>. (Don’t worry – if you forget
to specify an input, a helpful error message will tell you what you missed.)</p>
<p>In this case the dictionary encodes the fact that the input <code class="docutils literal notranslate"><span class="pre">arg_one</span></code> of solid <code class="docutils literal notranslate"><span class="pre">solid_two</span></code>
should flow from the output of <code class="docutils literal notranslate"><span class="pre">solid_one</span></code>.</p>
</li>
</ol>
<p>Let’s visualize the DAG we’ve just defined in dagit.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagit -f hello_dag.py -n define_hello_dag_pipeline
</pre></div>
</div>
<p>Navigate to <a class="reference external" href="http://127.0.0.1:3000/hello_dag_pipeline/explore">http://127.0.0.1:3000/hello_dag_pipeline/explore</a> or choose the hello_dag_pipeline
from the dropdown:</p>
<img alt="../_images/hello_dag_figure_one.png" src="../_images/hello_dag_figure_one.png" />
<p>One of the distinguishing features of dagster that separates it from many workflow engines is that
dependencies connect <em>inputs</em> and <em>outputs</em> rather than just <em>tasks</em>. An author of a dagster
pipeline defines the flow of execution by defining the flow of <em>data</em> within that
execution. This is core to the programming model of dagster, where each step in the pipeline
– the solid – is a <em>functional</em> unit of computation.</p>
<p>Now run the pipeline we’ve just defined, either from dagit or from the command line:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f hello_dag.py -n define_hello_dag_pipeline
</pre></div>
</div>
<p>In the next section, <a class="reference internal" href="actual_dag.html"><span class="doc">An actual DAG</span></a>, we’ll build our first DAG with interesting
topology and see how dagster determines the execution order of a pipeline.</p>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="hello_world.html" title="previous chapter">Hello, World</a></li>
      <li>Next: <a href="actual_dag.html" title="next chapter">An actual DAG</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/hello_dag.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/hello_dag.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 63'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Hello, World &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Hello, DAG" href="hello_dag.html" />
    <link rel="prev" title="Contributing" href="../contributing.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="hello-world">
<h1>Hello, World<a class="headerlink" href="#hello-world" title="Permalink to this headline">¶</a></h1>
<p>See <a class="reference internal" href="../installation.html"><span class="doc">Installation</span></a> for instructions installing dagster (the core library) and dagit (the
web UI tool used to visualize your data pipelines) on your platform of choice.</p>
<p>Let’s write our first pipeline and save it as <code class="docutils literal notranslate"><span class="pre">hello_world.py</span></code>.</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">hello_world.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="n">PipelineDefinition</span><span class="p">,</span> <span class="n">execute_pipeline</span><span class="p">,</span> <span class="n">lambda_solid</span>


<span class="nd">@lambda_solid</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s1">&#39;hello&#39;</span>


<span class="k">def</span> <span class="nf">define_hello_world_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;hello_world_pipeline&#39;</span><span class="p">,</span> <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">hello_world</span><span class="p">]</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>This example introduces three concepts:</p>
<ol class="arabic simple">
<li>A <strong>solid</strong> is a functional unit of computation in a data pipeline. In this example, we use the
decorator <a class="reference internal" href="../apidocs/decorators.html#dagster.lambda_solid" title="dagster.lambda_solid"><code class="xref py py-func docutils literal notranslate"><span class="pre">&#64;lambda_solid</span></code></a> to mark the function <code class="docutils literal notranslate"><span class="pre">hello_world</span></code>
as a solid: a functional unit which takes no inputs and returns the output <code class="docutils literal notranslate"><span class="pre">\'hello\'</span></code> every
time it’s run.</li>
<li>A <strong>pipeline</strong> is a set of solids arranged into a DAG of computation that produces data assets.
In this example, the call to <a class="reference internal" href="../apidocs/definitions.html#dagster.PipelineDefinition" title="dagster.PipelineDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">PipelineDefinition</span></code></a> defines
a pipeline with a single solid.</li>
<li>We <strong>execute</strong> the pipeline by running <a class="reference internal" href="../apidocs/execution.html#dagster.execute_pipeline" title="dagster.execute_pipeline"><code class="xref py py-func docutils literal notranslate"><span class="pre">execute_pipeline</span></code></a>.
Dagster will call into each solid in the pipeline, functionally transforming its inputs, if any,
and threading its outputs to solids further on in the DAG.</li>
</ol>
<div class="section" id="pipeline-execution">
<h2>Pipeline Execution<a class="headerlink" href="#pipeline-execution" title="Permalink to this headline">¶</a></h2>
<p>Assuming you’ve saved this pipeline as <code class="docutils literal notranslate"><span class="pre">hello_world.py</span></code>, we can execute it via any of three
different mechanisms:</p>
<ol class="arabic simple">
<li>The CLI utility <cite>dagster</cite></li>
<li>The GUI tool <cite>dagit</cite></li>
<li>Using dagster as a library within your own script.</li>
</ol>
<div class="section" id="cli">
<h3>CLI<a class="headerlink" href="#cli" title="Permalink to this headline">¶</a></h3>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f hello_world.py -n define_hello_world_pipeline
<span class="go">2019-01-08 11:23:57 - dagster - INFO - orig_message=&quot;Beginning execution of pipeline hello_world_pipeline&quot; log_message_id=&quot;5c829421-06c7-49eb-9195-7e828e37eab8&quot; run_id=&quot;dfc8165a-f37e-43f5-a801-b602e4409f74&quot; pipeline=&quot;hello_world_pipeline&quot; event_type=&quot;PIPELINE_START&quot;</span>
<span class="go">2019-01-08 11:23:57 - dagster - INFO - orig_message=&quot;Beginning execution of hello_world.transform&quot; log_message_id=&quot;5878513a-b510-4837-88cb-f77205931abb&quot; run_id=&quot;dfc8165a-f37e-43f5-a801-b602e4409f74&quot; pipeline=&quot;hello_world_pipeline&quot; solid=&quot;hello_world&quot; solid_definition=&quot;hello_world&quot; event_type=&quot;EXECUTION_PLAN_STEP_START&quot; step_key=&quot;hello_world.transform&quot;</span>
<span class="go">2019-01-08 11:23:57 - dagster - INFO - orig_message=&quot;Solid hello_world emitted output \\&quot;result\\&quot; value &#39;hello&#39;&quot; log_message_id=&quot;b27fb70a-744a-46cc-81ba-677247b1b07b&quot; run_id=&quot;dfc8165a-f37e-43f5-a801-b602e4409f74&quot; pipeline=&quot;hello_world_pipeline&quot; solid=&quot;hello_world&quot; solid_definition=&quot;hello_world&quot;</span>
<span class="go">2019-01-08 11:23:57 - dagster - INFO - orig_message=&quot;Execution of hello_world.transform succeeded in 0.9558200836181641&quot; log_message_id=&quot;25faadf5-b5a8-4251-b85c-dea6d00d99f0&quot; run_id=&quot;dfc8165a-f37e-43f5-a801-b602e4409f74&quot; pipeline=&quot;hello_world_pipeline&quot; solid=&quot;hello_world&quot; solid_definition=&quot;hello_world&quot; event_type=&quot;EXECUTION_PLAN_STEP_SUCCESS&quot; millis=0.9558200836181641 step_key=&quot;hello_world.transform&quot;</span>
<span class="go">2019-01-08 11:23:57 - dagster - INFO - orig_message=&quot;Step hello_world.transform emitted &#39;hello&#39; for output result&quot; log_message_id=&quot;604dc47c-fe29-4d71-a531-97ae58fda0f4&quot; run_id=&quot;dfc8165a-f37e-43f5-a801-b602e4409f74&quot; pipeline=&quot;hello_world_pipeline&quot;</span>
<span class="go">2019-01-08 11:23:57 - dagster - INFO - orig_message=&quot;Completing successful execution of pipeline hello_world_pipeline&quot; log_message_id=&quot;1563854b-758f-4ae2-8399-cb75946b0055&quot; run_id=&quot;dfc8165a-f37e-43f5-a801-b602e4409f74&quot; pipeline=&quot;hello_world_pipeline&quot; event_type=&quot;PIPELINE_SUCCESS&quot;</span>
</pre></div>
</div>
<p>There’s a lot of information in these log lines (we’ll get to how you can use, and customize,
them later), but you can see that the third message is:
<code class="docutils literal notranslate"><span class="pre">Solid</span> <span class="pre">hello_world</span> <span class="pre">emitted</span> <span class="pre">output</span> <span class="pre">\\&quot;result\\&quot;</span> <span class="pre">value</span> <span class="pre">\'hello\'</span></code>. Success!</p>
</div>
<div class="section" id="dagit">
<h3>Dagit<a class="headerlink" href="#dagit" title="Permalink to this headline">¶</a></h3>
<p>To visualize your pipeline (which only has one node) in dagit, you can run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagit -f hello_world.py -n define_hello_world_pipeline
<span class="go">Serving on http://127.0.0.1:3000</span>
</pre></div>
</div>
<p>You should be able to navigate to <a class="reference external" href="http://127.0.0.1:3000/hello_world_pipeline/explore">http://127.0.0.1:3000/hello_world_pipeline/explore</a> in your web
browser and view your pipeline.</p>
<img alt="../_images/hello_world_figure_one.png" src="../_images/hello_world_figure_one.png" />
<p>There are lots of ways to execute dagster pipelines. If you navigate to the “Execute”
tab (<a class="reference external" href="http://127.0.0.1:3000/hello_world_pipeline/execute">http://127.0.0.1:3000/hello_world_pipeline/execute</a>), you can execute your pipeline directly
from dagit. Logs will stream into the bottom right pane of the interface, where you can filter them
by log level.</p>
<img alt="../_images/hello_world_figure_two.png" src="../_images/hello_world_figure_two.png" />
</div>
<div class="section" id="library">
<h3>Library<a class="headerlink" href="#library" title="Permalink to this headline">¶</a></h3>
<p>If you’d rather execute your pipelines as a script, you can do that without using the dagster CLI
at all. Just add a few lines to <cite>hello_world.py</cite> (highlighted in yellow):</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">hello_world.py</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="n">PipelineDefinition</span><span class="p">,</span> <span class="n">execute_pipeline</span><span class="p">,</span> <span class="n">lambda_solid</span>


<span class="nd">@lambda_solid</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s1">&#39;hello&#39;</span>


<span class="k">def</span> <span class="nf">define_hello_world_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;hello_world_pipeline&#39;</span><span class="p">,</span> <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">hello_world</span><span class="p">]</span>
    <span class="p">)</span>


<span class="hll"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="hll">    <span class="n">result</span> <span class="o">=</span> <span class="n">execute_pipeline</span><span class="p">(</span><span class="n">define_hello_world_pipeline</span><span class="p">())</span>
</span><span class="hll">    <span class="k">assert</span> <span class="n">result</span><span class="o">.</span><span class="n">success</span>
</span></pre></div>
</td></tr></table></div>
</div>
<p>Then you can just run:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> python hello_world.py
</pre></div>
</div>
<p>Next, let’s build our first multi-solid DAG in <a class="reference internal" href="hello_dag.html"><span class="doc">Hello, DAG</span></a>!</p>
</div>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1 current"><a class="current reference internal" href="#">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="../contributing.html" title="previous chapter">Contributing</a></li>
      <li>Next: <a href="hello_dag.html" title="next chapter">Hello, DAG</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/hello_world.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/hello_world.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 64'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Inputs &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Configuration" href="config.html" />
    <link rel="prev" title="An actual DAG" href="actual_dag.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="inputs">
<h1>Inputs<a class="headerlink" href="#inputs" title="Permalink to this headline">¶</a></h1>
<p>So far we have only demonstrated pipelines whose solids yield hardcoded values and then flow them
through the pipeline. In order to be useful a pipeline must also interact with its external
environment.</p>
<p>Let’s return to our hello world example. But this time, we’ll make the string
the solid returns be parameterized based on inputs.</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">inputs.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
    <span class="n">InputDefinition</span><span class="p">,</span>
    <span class="n">OutputDefinition</span><span class="p">,</span>
    <span class="n">PipelineDefinition</span><span class="p">,</span>
    <span class="n">execute_pipeline</span><span class="p">,</span>
    <span class="n">lambda_solid</span><span class="p">,</span>
    <span class="n">types</span><span class="p">,</span>
<span class="p">)</span>


<span class="nd">@lambda_solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">add_hello_to_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="s1">&#39;Hello, &#39;</span> <span class="o">+</span> <span class="n">word</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span>


<span class="k">def</span> <span class="nf">define_hello_inputs_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;hello_inputs&#39;</span><span class="p">,</span> <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">add_hello_to_word</span><span class="p">])</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Note that the input <code class="docutils literal notranslate"><span class="pre">word</span></code> to solid <code class="docutils literal notranslate"><span class="pre">add_hello_to_word</span></code> has no dependency specified. This
means that the operator of the pipeline must specify the input at pipeline execution
time.</p>
<p>Recall that there are three primary ways to execute a pipeline: using the python API, from
the command line, and from dagit. We’ll go through each of these and see how to specify the input
in each case.</p>
<div class="section" id="python-api">
<h2>Python API<a class="headerlink" href="#python-api" title="Permalink to this headline">¶</a></h2>
<p>In the Python API, pipeline configuration is specified in the second argument to
<a class="reference internal" href="../apidocs/execution.html#dagster.execute_pipeline" title="dagster.execute_pipeline"><code class="xref py py-func docutils literal notranslate"><span class="pre">execute_pipeline</span></code></a>, which must be a dict. This dict contains
<em>all</em> of the configuration to execute an entire pipeline. It may have many sections, but we’ll only
use one of them here: per-solid configuration specified under the key <code class="docutils literal notranslate"><span class="pre">solids</span></code>:</p>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">&#39;add_hello_to_word&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;inputs&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;word&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="s1">&#39;Mars&#39;</span><span class="p">}}}</span>
    <span class="p">}</span>
<span class="p">},</span>
</pre></div>
</td></tr></table></div>
<p>The <code class="docutils literal notranslate"><span class="pre">solids</span></code> dict is keyed by solid name, and each solid is configured by a dict that may have
several sections of its own. In this case we are only interested in the <code class="docutils literal notranslate"><span class="pre">inputs</span></code> section, so
that we can specify that value of the input <code class="docutils literal notranslate"><span class="pre">word</span></code>.</p>
<p>The function <code class="docutils literal notranslate"><span class="pre">execute_with_another_world</span></code> demonstrates how one would invoke this pipeline
using the python API:</p>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">execute_with_another_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">execute_pipeline</span><span class="p">(</span>
        <span class="n">define_hello_inputs_pipeline</span><span class="p">(),</span>
        <span class="p">{</span>
            <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;add_hello_to_word&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;inputs&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;word&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="s1">&#39;Mars&#39;</span><span class="p">}}}</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<div class="section" id="cli">
<h2>CLI<a class="headerlink" href="#cli" title="Permalink to this headline">¶</a></h2>
<p>Next let’s use the CLI. In order to do that we’ll need to provide the environment
information via a config file. We’ll use the same values as before, but in the form
of YAML rather than python dictionaries:</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">inputs_env.yml</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">solids</span><span class="p">:</span>
  <span class="nt">add_hello_to_word</span><span class="p">:</span>
    <span class="nt">inputs</span><span class="p">:</span>
      <span class="nt">word</span><span class="p">:</span>
        <span class="nt">value</span><span class="p">:</span> <span class="s">&quot;Mars&quot;</span>
</pre></div>
</td></tr></table></div>
</div>
<p>And now specify that config file via the <code class="docutils literal notranslate"><span class="pre">-e</span></code> flag.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f inputs.py <span class="se">\\</span>
-n define_hello_inputs_pipeline -e inputs_env.yml
</pre></div>
</div>
</div>
<div class="section" id="dagit">
<h2>Dagit<a class="headerlink" href="#dagit" title="Permalink to this headline">¶</a></h2>
<p>As always, you can load the pipeline and execute it within dagit.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagit -f inputs.py -n define_hello_inputs_pipeline
<span class="go">Serving on http://127.0.0.1:3000</span>
</pre></div>
</div>
<p>From the execute console, you can enter your config directly like so:</p>
<img alt="../_images/inputs_figure_one.png" src="../_images/inputs_figure_one.png" />
<p>You’ll notice that the config editor is auto-completing. Because it knows the structure
of the config, the editor can provide rich error information. We can improve the experience of
using the editor by appropriately typing the inputs, making everything less error-prone.</p>
<div class="section" id="typing">
<h3>Typing<a class="headerlink" href="#typing" title="Permalink to this headline">¶</a></h3>
<p>Right now the inputs and outputs of this solid are totally untyped. (Any input or output
without a type is automatically assigned the <code class="docutils literal notranslate"><span class="pre">Any</span></code> type.) This means that mistakes
are often not surfaced until the pipeline is executed.</p>
<p>For example, imagine if our environment for our pipeline was:</p>
<div class="literal-block-wrapper docutils container" id="id3">
<div class="code-block-caption"><span class="caption-text">inputs_env_bad.yml</span><a class="headerlink" href="#id3" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">solids</span><span class="p">:</span>
  <span class="nt">add_hello_to_word</span><span class="p">:</span>
    <span class="nt">inputs</span><span class="p">:</span>
      <span class="nt">word</span><span class="p">:</span>
        <span class="nt">value</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">2343</span>
</pre></div>
</td></tr></table></div>
</div>
<p>If we execute this pipeline with this config, it’ll fail at runtime.</p>
<p>Enter this config in dagit and execute and you’ll see the transform fail:</p>
<img alt="../_images/inputs_figure_two_untyped_execution.png" src="../_images/inputs_figure_two_untyped_execution.png" />
<p>Click on the red dot on the execution step that failed and a detailed stacktrace will pop up.</p>
<img alt="../_images/inputs_figure_three_error_modal.png" src="../_images/inputs_figure_three_error_modal.png" />
<p>It would be better if we could catch this error earlier, when we specify the config. So let’s
make the inputs typed.</p>
<p>A user can apply types to inputs and outputs. In this case we just want to type them as the
built-in <code class="docutils literal notranslate"><span class="pre">String</span></code>.</p>
<div class="literal-block-wrapper docutils container" id="id4">
<div class="code-block-caption"><span class="caption-text">inputs.py</span><a class="headerlink" href="#id4" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="nd">@lambda_solid</span><span class="p">(</span>
<span class="hll">    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">)],</span>
</span><span class="hll">    <span class="n">output</span><span class="o">=</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">String</span><span class="p">),</span>
</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">add_hello_to_word_typed</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="s1">&#39;Hello, &#39;</span> <span class="o">+</span> <span class="n">word</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span>
</pre></div>
</div>
</div>
<p>By using typed input instead we can catch this error prior to execution.</p>
<img alt="../_images/inputs_figure_four_error_prechecked.png" src="../_images/inputs_figure_four_error_prechecked.png" />
<p>Next, we’ll look at a closely allied concept – <a class="reference internal" href="config.html"><span class="doc">Configuration</span></a> values.</p>
</div>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="actual_dag.html" title="previous chapter">An actual DAG</a></li>
      <li>Next: <a href="config.html" title="next chapter">Configuration</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/inputs.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/inputs.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 65'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Multiple Outputs &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Reusable Solids" href="reusable_solids.html" />
    <link rel="prev" title="Expectations" href="expectations.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="multiple-outputs">
<h1>Multiple Outputs<a class="headerlink" href="#multiple-outputs" title="Permalink to this headline">¶</a></h1>
<p>So far all of our examples have been solids that have a single output. But
solids can have an arbitrary number of outputs. Downstream solids can
depend on any number of these outputs. Additionally, these outputs do
not <em>necessarily</em> have to be fired, therefore unlocking the ability for
downstream solids to be invoked conditionally based on something that
happened during the computation.</p>
<div class="section" id="multipleresults-class">
<h2><code class="docutils literal notranslate"><span class="pre">MultipleResults</span></code> Class<a class="headerlink" href="#multipleresults-class" title="Permalink to this headline">¶</a></h2>
<p>Here we present an example of a solid that has multiple outputs within a pipeline:</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">multiple_outputs.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></div></td><td class="code"><div class="highlight"><pre><span></span>
<span class="nd">@solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num&#39;</span><span class="p">,</span> <span class="n">dagster_type</span><span class="o">=</span><span class="n">Int</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">log_num</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
    <span class="n">context</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;num </span><span class="si">{num}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">num</span>


<span class="nd">@solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num&#39;</span><span class="p">,</span> <span class="n">dagster_type</span><span class="o">=</span><span class="n">Int</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">log_num_squared</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
    <span class="n">context</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;num_squared </span><span class="si">{num_squared}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num_squared</span><span class="o">=</span><span class="n">num</span> <span class="o">*</span> <span class="n">num</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">num</span> <span class="o">*</span> <span class="n">num</span>


<span class="k">def</span> <span class="nf">define_multiple_outputs_step_one_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span>
        <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">Int</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;out_one&#39;</span><span class="p">),</span>
        <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">Int</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;out_two&#39;</span><span class="p">),</span>
    <span class="p">]</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">return_dict_results</span><span class="p">(</span><span class="n">_context</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">MultipleResults</span><span class="o">.</span><span class="n">from_dict</span><span class="p">({</span><span class="s1">&#39;out_one&#39;</span><span class="p">:</span> <span class="mi">23</span><span class="p">,</span> <span class="s1">&#39;out_two&#39;</span><span class="p">:</span> <span class="mi">45</span><span class="p">})</span>

    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;multiple_outputs_step_one_pipeline&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">return_dict_results</span><span class="p">,</span> <span class="n">log_num</span><span class="p">,</span> <span class="n">log_num_squared</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;log_num&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;num&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span>
                    <span class="n">solid</span><span class="o">=</span><span class="s1">&#39;return_dict_results&#39;</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="s1">&#39;out_one&#39;</span>
                <span class="p">)</span>
            <span class="p">},</span>
            <span class="s1">&#39;log_num_squared&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;num&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span>
                    <span class="n">solid</span><span class="o">=</span><span class="s1">&#39;return_dict_results&#39;</span><span class="p">,</span> <span class="n">output</span><span class="o">=</span><span class="s1">&#39;out_two&#39;</span>
                <span class="p">)</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">)</span>


</pre></div>
</td></tr></table></div>
</div>
<p>This can be visualized in dagit:</p>
<img alt="../_images/multiple_results_figure_one.png" src="../_images/multiple_results_figure_one.png" />
<p>Notice how <code class="docutils literal notranslate"><span class="pre">return_dict_results</span></code> has two outputs. For the first time
we have provided the name argument to an <a class="reference internal" href="../apidocs/definitions.html#dagster.OutputDefinition" title="dagster.OutputDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">OutputDefinition</span></code></a>.
(The name of an output defaults to <code class="docutils literal notranslate"><span class="pre">\'result\'</span></code>, as it does for a
<a class="reference internal" href="../apidocs/definitions.html#dagster.DependencyDefinition" title="dagster.DependencyDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">DependencyDefinition</span></code></a>) Output names must be unique
and each result returned by a solid’s transform function must have a name that corresponds to
one of these outputs.</p>
<p>So from <code class="docutils literal notranslate"><span class="pre">return_dict_results</span></code> we used <a class="reference internal" href="../apidocs/decorators.html#dagster.MultipleResults" title="dagster.MultipleResults"><code class="xref py py-class docutils literal notranslate"><span class="pre">MultipleResults</span></code></a>
to return all outputs from this transform.</p>
<p>Just as this tutorial gives us the first example of a named
<a class="reference internal" href="../apidocs/definitions.html#dagster.OutputDefinition" title="dagster.OutputDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">OutputDefinition</span></code></a>, this is also the first time that we’ve
seen a named <a class="reference internal" href="../apidocs/definitions.html#dagster.DependencyDefinition" title="dagster.DependencyDefinition"><code class="xref py py-class docutils literal notranslate"><span class="pre">DependencyDefinition</span></code></a>. Recall that dependencies
point to a particular <strong>output</strong> of a solid, rather than to the solid itself.</p>
<p>With this we can run the pipeline:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f multiple_outputs.py <span class="se">\\</span>
-n define_multiple_outputs_step_one_pipeline

<span class="go">... log spew</span>
<span class="go">2019-01-15 15:44:36 - dagster - INFO - orig_message=&quot;Solid return_dict_results emitted output \\&quot;out_one\\&quot; value 23&quot; log_message_id=&quot;f7d90092-523e-41c3-ac43-f9124ea896ad&quot; run_id=&quot;50733509-1dfb-4e1b-9f12-fc6be42f2376&quot; pipeline=&quot;multiple_outputs_step_one_pipeline&quot; solid=&quot;return_dict_results&quot; solid_definition=&quot;return_dict_results&quot;</span>
<span class="go">2019-01-15 15:44:36 - dagster - INFO - orig_message=&quot;Solid return_dict_results emitted output \\&quot;out_two\\&quot; value 45&quot; log_message_id=&quot;343ac9fb-4afd-4b96-85a6-0e15a1b22a6e&quot; run_id=&quot;50733509-1dfb-4e1b-9f12-fc6be42f2376&quot; pipeline=&quot;multiple_outputs_step_one_pipeline&quot; solid=&quot;return_dict_results&quot; solid_definition=&quot;return_dict_results&quot;</span>
<span class="go">... more log spew</span>
</pre></div>
</div>
</div>
<div class="section" id="iterator-of-result">
<h2>Iterator of <code class="docutils literal notranslate"><span class="pre">Result</span></code><a class="headerlink" href="#iterator-of-result" title="Permalink to this headline">¶</a></h2>
<p>The <a class="reference internal" href="../apidocs/decorators.html#dagster.MultipleResults" title="dagster.MultipleResults"><code class="xref py py-class docutils literal notranslate"><span class="pre">MultipleResults</span></code></a> class is not the only way
to return multiple results from a solid transform function. You can also yield
multiple instances of the <code class="docutils literal notranslate"><span class="pre">Result</span></code> object. (Note: this is actually the core
specification of the transform function: all other forms are implemented in terms of
the iterator form.)</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">multiple_outputs.py</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nd">@solid</span><span class="p">(</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span>
        <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">Int</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;out_one&#39;</span><span class="p">),</span>
        <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">Int</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;out_two&#39;</span><span class="p">),</span>
    <span class="p">]</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">yield_outputs</span><span class="p">(</span><span class="n">_context</span><span class="p">):</span>
    <span class="k">yield</span> <span class="n">Result</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span> <span class="s1">&#39;out_one&#39;</span><span class="p">)</span>
    <span class="k">yield</span> <span class="n">Result</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span> <span class="s1">&#39;out_two&#39;</span><span class="p">)</span>

</pre></div>
</td></tr></table></div>
</div>
<p>… and you’ll see the same log spew around outputs in this version:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f multiple_outputs.py <span class="se">\\</span>
-n define_multiple_outputs_step_two_pipeline

<span class="go">2018-11-08 10:54:15 - dagster - INFO - orig_message=&quot;Solid yield_outputs emitted output \\&quot;out_one\\&quot; value 23&quot; log_message_id=&quot;5e1cc181-b74d-47f8-8d32-bc262d555b73&quot; run_id=&quot;4bee891c-e04f-4221-be77-17576abb9da2&quot; pipeline=&quot;part_eleven_step_two&quot; solid=&quot;yield_outputs&quot; solid_definition=&quot;yield_outputs&quot;</span>
<span class="go">2018-11-08 10:54:15 - dagster - INFO - orig_message=&quot;Solid yield_outputs emitted output \\&quot;out_two\\&quot; value 45&quot; log_message_id=&quot;8da32946-596d-4783-b7c5-4edbb3a1dbc2&quot; run_id=&quot;4bee891c-e04f-4221-be77-17576abb9da2&quot; pipeline=&quot;part_eleven_step_two&quot; solid=&quot;yield_outputs&quot; solid_definition=&quot;yield_outputs&quot;</span>
</pre></div>
</div>
</div>
<div class="section" id="conditional-outputs">
<h2>Conditional Outputs<a class="headerlink" href="#conditional-outputs" title="Permalink to this headline">¶</a></h2>
<p>Multiple outputs are the mechanism by which we implement branching or conditional execution.</p>
<p>Let’s modify the first solid above to conditionally emit one output or the other based on config
and then execute that pipeline.</p>
<div class="literal-block-wrapper docutils container" id="id3">
<div class="code-block-caption"><span class="caption-text">multiple_outputs.py</span><a class="headerlink" href="#id3" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nd">@solid</span><span class="p">(</span>
    <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span>
        <span class="n">String</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s1">&#39;Should be either out_one or out_two&#39;</span>
    <span class="p">),</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span>
        <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">Int</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;out_one&#39;</span><span class="p">),</span>
        <span class="n">OutputDefinition</span><span class="p">(</span><span class="n">dagster_type</span><span class="o">=</span><span class="n">Int</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;out_two&#39;</span><span class="p">),</span>
    <span class="p">],</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">conditional</span><span class="p">(</span><span class="n">context</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span> <span class="o">==</span> <span class="s1">&#39;out_one&#39;</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">Result</span><span class="p">(</span><span class="mi">23</span><span class="p">,</span> <span class="s1">&#39;out_one&#39;</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span> <span class="o">==</span> <span class="s1">&#39;out_two&#39;</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">Result</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span> <span class="s1">&#39;out_two&#39;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s1">&#39;invalid config&#39;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;multiple_outputs_step_two_pipeline&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">yield_outputs</span><span class="p">,</span> <span class="n">log_num</span><span class="p">,</span> <span class="n">log_num_squared</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;log_num&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;num&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;yield_outputs&#39;</span><span class="p">,</span> <span class="s1">&#39;out_one&#39;</span><span class="p">)</span>
            <span class="p">},</span>
            <span class="s1">&#39;log_num_squared&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;num&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;yield_outputs&#39;</span><span class="p">,</span> <span class="s1">&#39;out_two&#39;</span><span class="p">)</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">)</span>


</pre></div>
</td></tr></table></div>
</div>
<p>You must create a config file</p>
<div class="literal-block-wrapper docutils container" id="id4">
<div class="code-block-caption"><span class="caption-text">conditional_outputs.yml</span><a class="headerlink" href="#id4" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">solids</span><span class="p">:</span>
  <span class="n">conditional</span><span class="p">:</span>
    <span class="n">config</span><span class="p">:</span> <span class="n">out_two</span>
</pre></div>
</td></tr></table></div>
</div>
<p>And then run it.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute -f multiple_outputs.py <span class="se">\\</span>
-n define_multiple_outputs_step_three_pipeline <span class="se">\\</span>
-e conditional_outputs.yml
<span class="go">... log spew</span>
<span class="go">2018-09-16 18:58:32 - dagster - INFO - orig_message=&quot;Solid conditional emitted output \\&quot;out_two\\&quot; value 45&quot; log_message_id=&quot;f6fd78c5-c25e-40ea-95ef-6b80d12155de&quot; pipeline=&quot;part_eleven_step_three&quot; solid=&quot;conditional&quot;</span>
<span class="go">2018-09-16 18:58:32 - dagster - INFO - orig_message=&quot;Solid conditional did not fire outputs {&#39;out_one&#39;}&quot; log_message_id=&quot;d548ea66-cb10-42b8-b150-aed8162cc25c&quot; pipeline=&quot;part_eleven_step_three&quot; solid=&quot;conditional&quot;</span>
<span class="go">... log spew</span>
</pre></div>
</div>
<p>Note that we are configuring this solid to <em>only</em> emit <code class="docutils literal notranslate"><span class="pre">out_two</span></code> which will end up
only triggering <code class="docutils literal notranslate"><span class="pre">log_num_squared</span></code>. The solid <code class="docutils literal notranslate"><span class="pre">log_num</span></code> will never be executed.</p>
<p>Next, let’s look at writing <a class="reference internal" href="reusable_solids.html"><span class="doc">Reusable Solids</span></a> so we can avoid duplicating
common data pipeline work.</p>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="expectations.html" title="previous chapter">Expectations</a></li>
      <li>Next: <a href="reusable_solids.html" title="next chapter">Reusable Solids</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/multiple_outputs.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/multiple_outputs.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 66'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Pipeline CLI Execution &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="User-Defined Types" href="types.html" />
    <link rel="prev" title="Repositories" href="repos.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="pipeline-cli-execution">
<h1>Pipeline CLI Execution<a class="headerlink" href="#pipeline-cli-execution" title="Permalink to this headline">¶</a></h1>
<p>Up until now we’ve been focusing on using the dagit tool for executing pipelines. However, we
also have a CLI utility for use in scripting contexts. It has its own features which are useful in
a production context.</p>
<p>Just as in the last part of the tutorial, we’ll define a pipeline and a repository, and create
a yaml file to tell the CLI tool about the repository.</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">pipeline_cli_execution.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">collections</span> <span class="k">import</span> <span class="n">defaultdict</span>

<span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
    <span class="n">DependencyDefinition</span><span class="p">,</span>
    <span class="n">Dict</span><span class="p">,</span>
    <span class="n">Field</span><span class="p">,</span>
    <span class="n">InputDefinition</span><span class="p">,</span>
    <span class="n">Int</span><span class="p">,</span>
    <span class="n">PipelineDefinition</span><span class="p">,</span>
    <span class="n">RepositoryDefinition</span><span class="p">,</span>
    <span class="n">String</span><span class="p">,</span>
    <span class="n">lambda_solid</span><span class="p">,</span>
    <span class="n">solid</span><span class="p">,</span>
<span class="p">)</span>


<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">)],</span>
    <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span><span class="n">Dict</span><span class="p">({</span><span class="s1">&#39;factor&#39;</span><span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">Int</span><span class="p">)})),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">multiply_the_word</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">word</span> <span class="o">*</span> <span class="n">context</span><span class="o">.</span><span class="n">solid_config</span><span class="p">[</span><span class="s1">&#39;factor&#39;</span><span class="p">]</span>


<span class="nd">@lambda_solid</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;word&#39;</span><span class="p">)])</span>
<span class="k">def</span> <span class="nf">count_letters</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
        <span class="n">counts</span><span class="p">[</span><span class="n">letter</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="nb">dict</span><span class="p">(</span><span class="n">counts</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">define_demo_execution_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;demo_pipeline&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">multiply_the_word</span><span class="p">,</span> <span class="n">count_letters</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="s1">&#39;count_letters&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;word&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;multiply_the_word&#39;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">)</span>


<span class="k">def</span> <span class="nf">define_demo_execution_repo</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">RepositoryDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;demo_execution_repo&#39;</span><span class="p">,</span>
        <span class="n">pipeline_dict</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;demo_pipeline&#39;</span><span class="p">:</span> <span class="n">define_demo_execution_pipeline</span><span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>And now the repository file:</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">repository.yml</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">repository</span><span class="p">:</span>
  <span class="nt">file</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">pipeline_cli_execution.py</span>
  <span class="nt">fn</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">define_demo_execution_repo</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Finally, we’ll need to define the pipeline config in a yaml file in order to
execute our pipeline from the command line.</p>
<div class="literal-block-wrapper docutils container" id="id3">
<div class="code-block-caption"><span class="caption-text">env.yml</span><a class="headerlink" href="#id3" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">context</span><span class="p">:</span>
  <span class="nt">default</span><span class="p">:</span>
    <span class="nt">config</span><span class="p">:</span>
      <span class="nt">log_level</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">DEBUG</span>

<span class="nt">solids</span><span class="p">:</span>
  <span class="nt">multiply_the_word</span><span class="p">:</span>
    <span class="nt">inputs</span><span class="p">:</span>
      <span class="nt">word</span><span class="p">:</span>
        <span class="nt">value</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">bar</span>
    <span class="nt">config</span><span class="p">:</span>
      <span class="nt">factor</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">2</span>
</pre></div>
</td></tr></table></div>
</div>
<p>With these elements in place we can now drive execution from the CLI specifying only the pipeline
name. The tool loads the repository using the <code class="docutils literal notranslate"><span class="pre">repository.yml</span></code> file and looks up the pipeline by
name.</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute demo_pipeline -e env.yml
</pre></div>
</div>
<div class="section" id="config-splitting">
<h2>Config Splitting<a class="headerlink" href="#config-splitting" title="Permalink to this headline">¶</a></h2>
<p>Suppose that we want to keep some settings (like our context-level logging config) constant across
a bunch of our pipeline executions, and vary only pipeline-specific settings. It’d be tedious to
copy the broadly-applicable settings into each of our config yamls, and error-prone to try to keep
those copies in sync. So the command line tools allow us to specify more than one yaml file to use
for config.</p>
<p>Let’s split up our env.yml into two parts:</p>
<div class="literal-block-wrapper docutils container" id="id4">
<div class="code-block-caption"><span class="caption-text">constant_env.yml</span><a class="headerlink" href="#id4" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><div class="highlight"><pre><span></span><span class="nt">context</span><span class="p">:</span>
  <span class="nt">default</span><span class="p">:</span>
    <span class="nt">config</span><span class="p">:</span>
      <span class="nt">log_level</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">DEBUG</span>
</pre></div>
</div>
</div>
<div class="literal-block-wrapper docutils container" id="id5">
<div class="code-block-caption"><span class="caption-text">specific_env.yml</span><a class="headerlink" href="#id5" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><div class="highlight"><pre><span></span><span class="nt">solids</span><span class="p">:</span>
  <span class="nt">multiply_the_word</span><span class="p">:</span>
    <span class="nt">inputs</span><span class="p">:</span>
      <span class="nt">word</span><span class="p">:</span>
        <span class="nt">value</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">bar</span>
    <span class="nt">config</span><span class="p">:</span>
      <span class="nt">factor</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">2</span>
</pre></div>
</div>
</div>
<p>Now we can run our pipeline as follows:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagster pipeline execute part_seven -e constant_env.yml -e specific_env.yml
</pre></div>
</div>
<p>Order matters when specifying yaml files to use – values specified in later files will override
values in earlier files, which can be useful. You can also use globs in the CLI arguments to consume
multiple yaml files.</p>
<p>Next, we’ll look at how <a class="reference internal" href="types.html"><span class="doc">User-Defined Types</span></a> can enrich documentation and type-safety
in pipelines.</p>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="repos.html" title="previous chapter">Repositories</a></li>
      <li>Next: <a href="types.html" title="next chapter">User-Defined Types</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/pipeline_cli_execution.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/pipeline_cli_execution.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 67'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Repositories &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Pipeline CLI Execution" href="pipeline_cli_execution.html" />
    <link rel="prev" title="Resources" href="resources.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="repositories">
<h1>Repositories<a class="headerlink" href="#repositories" title="Permalink to this headline">¶</a></h1>
<p>Dagster is a not just a programming model for pipelines, it is also a platform for
tool-building. You’ve already met the dagster and dagit CLI tools, which let you programmatically
run and visualize pipelines.</p>
<p>In previous examples we have specified a file (<code class="docutils literal notranslate"><span class="pre">-f</span></code>) or a module (<code class="docutils literal notranslate"><span class="pre">-m</span></code>) and named a pipeline definition function
(<code class="docutils literal notranslate"><span class="pre">-n</span></code>) in order to tell the CLI tools how to load a pipeline, e.g.:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagit -f hello_world.py -n define_hello_world_pipeline
<span class="gp">$</span> dagster pipeline execute -f hello_world.py <span class="se">\\</span>
    -n define_hello_world_pipeline
</pre></div>
</div>
<p>But most of the time, especially when working on long-running projects with other people, we will
want to be able to target many pipelines at once with our tools.</p>
<p>A <strong>repository</strong> is a collection of pipelines at which dagster tools may be pointed.</p>
<p>Repostories are declared using a new API,
<a class="reference internal" href="../apidocs/definitions.html#dagster.RepositoryDefinition" title="dagster.RepositoryDefinition"><code class="xref py py-func docutils literal notranslate"><span class="pre">RepositoryDefinition</span></code></a>:</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">repos.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="n">lambda_solid</span><span class="p">,</span> <span class="n">PipelineDefinition</span><span class="p">,</span> <span class="n">RepositoryDefinition</span>


<span class="nd">@lambda_solid</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">pass</span>


<span class="k">def</span> <span class="nf">define_repo_demo_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;repo_demo_pipeline&#39;</span><span class="p">,</span> <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">hello_world</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">define_repo</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">RepositoryDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;demo_repository&#39;</span><span class="p">,</span>
        <span class="c1"># Note that we pass the function itself, rather than call the function.</span>
        <span class="c1"># This allows us to construct pipelines on demand.</span>
        <span class="n">pipeline_dict</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;repo_demo_pipeline&#39;</span><span class="p">:</span> <span class="n">define_repo_demo_pipeline</span><span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Note that the name of the pipeline in the <cite>RepositoryDefinition</cite> must match the name we declared
for it in its <cite>PipelineDefinition</cite>. Don’t worry, if these names don’t match, you’ll see a helpful
error message.</p>
<p>If you save this file as <code class="docutils literal notranslate"><span class="pre">repos.py</span></code>, you can then run the command line tools on it. Try running:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagit -f repos.py -n define_repo
</pre></div>
</div>
<p>Now you can see the list of all pipelines in the repo via the dropdown at the top.</p>
<img alt="../_images/repos_figure_one.png" src="../_images/repos_figure_one.png" />
<p>Typing the name of the file and function defining the repository gets tiresome and repetitive, so
let’s create a declarative config file with this information to make using the command line tools
easier. Save this file as <code class="docutils literal notranslate"><span class="pre">repository.yml</span></code>. This is the default name for a repository config file,
although you can tell the CLI tools to use any file you like.</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">repository.yml</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">repository</span><span class="p">:</span>
  <span class="nt">file</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">repos.py</span>
  <span class="nt">fn</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">define_repo</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Now you should be able to list the pipelines in this repo without all the typing:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">$</span> dagit
</pre></div>
</div>
<p>You can also specify a module instead of a file in the repository.yml file.</p>
<div class="literal-block-wrapper docutils container" id="id3">
<div class="code-block-caption"><span class="caption-text">repository.yml</span><a class="headerlink" href="#id3" title="Permalink to this code">¶</a></div>
<div class="highlight-YAML notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="nt">repository</span><span class="p">:</span>
    <span class="nt">module</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">dagster.tutorials.intro_tutorial.repos</span>
    <span class="nt">fn</span><span class="p">:</span> <span class="l l-Scalar l-Scalar-Plain">define_repo</span> 
</pre></div>
</td></tr></table></div>
</div>
<p>In the next part of the tutorial, we’ll get to know <a class="reference internal" href="pipeline_cli_execution.html"><span class="doc">Pipeline Execution</span></a>
a little better, and learn how to execute pipelines in a repository from the command line by name,
with swappable config.</p>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="resources.html" title="previous chapter">Resources</a></li>
      <li>Next: <a href="pipeline_cli_execution.html" title="next chapter">Pipeline CLI Execution</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/repos.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/repos.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 68'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Resources &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Repositories" href="repos.html" />
    <link rel="prev" title="Execution Context" href="execution_context.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="resources">
<h1>Resources<a class="headerlink" href="#resources" title="Permalink to this headline">¶</a></h1>
<p>We’ve already learned about logging through the info object. We can also use the info object
to manage pipelines’ access to resources like the file system, databases, or cloud services.
In general, interactions with features of the external environment like these should be modeled
as resources.</p>
<p>Let’s imagine that we are using a key value store offered by a cloud service that has a python API.
We are going to record the results of computations in that key value store.</p>
<p>We are going to model this key value store as a resource.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># from bigco import PublicCloudConn, set_value_in_cloud_store</span>
</pre></div>
</div>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="k">class</span> <span class="nc">PublicCloudStore</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
        <span class="c1"># create credential and store it</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">conn</span> <span class="o">=</span> <span class="n">PublicCloudConn</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">record_value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">log</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span>
            <span class="s1">&#39;Setting key=</span><span class="si">{key}</span><span class="s1"> value=</span><span class="si">{value}</span><span class="s1"> in cloud&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                <span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">value</span>
            <span class="p">)</span>
        <span class="p">)</span>
        <span class="n">set_value_in_cloud_store</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">conn</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">define_cloud_store_resource</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">ResourceDefinition</span><span class="p">(</span>
        <span class="n">resource_fn</span><span class="o">=</span><span class="k">lambda</span> <span class="n">init_context</span><span class="p">:</span> <span class="n">PublicCloudStore</span><span class="p">(</span>
            <span class="n">init_context</span><span class="o">.</span><span class="n">resource_config</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">],</span>
            <span class="n">init_context</span><span class="o">.</span><span class="n">resource_config</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">],</span>
        <span class="p">),</span>
        <span class="n">config_field</span><span class="o">=</span><span class="n">Field</span><span class="p">(</span>
            <span class="n">Dict</span><span class="p">({</span><span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">String</span><span class="p">),</span> <span class="s1">&#39;password&#39;</span><span class="p">:</span> <span class="n">Field</span><span class="p">(</span><span class="n">String</span><span class="p">)})</span>
        <span class="p">),</span>
        <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;This represents some cloud-hosted key value store.</span>
<span class="s1">        Username and password must be provided via configuration for this to</span>
<span class="s1">        work&#39;&#39;&#39;</span><span class="p">,</span>
</pre></div>
</div>
<p>The core of a resource are the definition of its configuration (the <code class="docutils literal notranslate"><span class="pre">config_field</span></code>)
and then the function that can actually construct the resource. Notice that all of the
configuration specified for a given resource is passed to its constructor under the <code class="docutils literal notranslate"><span class="pre">config</span></code>
key of the <code class="docutils literal notranslate"><span class="pre">info</span></code> parameter.</p>
<p>Let’s now attach this resource to a pipeline and use it in a solid.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="nd">@solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num_one&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">),</span> <span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num_two&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">)],</span>
    <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">Int</span><span class="p">)],</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">add_ints</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">num_one</span><span class="p">,</span> <span class="n">num_two</span><span class="p">):</span>
    <span class="n">sum_ints</span> <span class="o">=</span> <span class="n">num_one</span> <span class="o">+</span> <span class="n">num_two</span>
    <span class="n">context</span><span class="o">.</span><span class="n">resources</span><span class="o">.</span><span class="n">store</span><span class="o">.</span><span class="n">record_value</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">log</span><span class="p">,</span> <span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="n">sum_ints</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">sum_ints</span>


<span class="k">def</span> <span class="nf">define_resource_test_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;resource_test_pipeline&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">add_ints</span><span class="p">],</span>
            <span class="p">),</span>
            <span class="s1">&#39;cloud&#39;</span><span class="p">:</span> <span class="n">PipelineContextDefinition</span><span class="p">(</span>
                <span class="n">resources</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;store&#39;</span><span class="p">:</span> <span class="n">define_cloud_store_resource</span><span class="p">()}</span>
            <span class="p">),</span>
        <span class="p">},</span>
</pre></div>
</div>
<p>Resources are attached to pipeline context definitions. A pipeline context
definition is way that a pipeline can declare the different “modes” it can
operate in. For example a common context definition would be “unittest”
or “production”. In a particular context definition you can provide a different
set of resources. That means you can swap out implementations of these resources
by altering configuration, while not changing your code.</p>
<p>In this case we have a single context definition “cloud” and that has a single
resource.</p>
<p>In order to invoke this pipeline, we pass it the following configuration:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">_name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">execute_pipeline</span><span class="p">(</span>
    <span class="n">define_resource_test_pipeline</span><span class="p">(),</span>
    <span class="n">environment</span><span class="o">=</span><span class="p">{</span>
        <span class="s1">&#39;context&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;cloud&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;resources&#39;</span><span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;store&#39;</span><span class="p">:</span> <span class="p">{</span>
                        <span class="s1">&#39;config&#39;</span><span class="p">:</span> <span class="p">{</span>
                            <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="s1">&#39;some_user&#39;</span><span class="p">,</span>
                            <span class="s1">&#39;password&#39;</span><span class="p">:</span> <span class="s1">&#39;some_password&#39;</span><span class="p">,</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;add_ints&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;inputs&#39;</span><span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;num_one&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
                    <span class="s1">&#39;num_two&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
</pre></div>
</div>
<p>Note how we are telling the configuration to create a cloud context by
using the <code class="docutils literal notranslate"><span class="pre">cloud</span></code> key under <code class="docutils literal notranslate"><span class="pre">context</span></code> and then parameterizing the store resource
with the appropriate config. As a config, any user-provided configuration for
an artifact (in this case the <code class="docutils literal notranslate"><span class="pre">store</span></code> resoource) is placed under the <code class="docutils literal notranslate"><span class="pre">config</span></code> key.</p>
<p>So this works, but let us imagine we wanted to have a test mode where we interacted
with an in memory version of that key value store and not develop against the live
public cloud version.</p>
<p>First we need a version of the store that implements the same interface that can be used
in testing contexts but does not touch the public cloud:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">InMemoryStore</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">values</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">record_value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">log</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span>
            <span class="s1">&#39;Setting key=</span><span class="si">{key}</span><span class="s1"> value=</span><span class="si">{value}</span><span class="s1"> in memory&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                <span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">value</span>
            <span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">values</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</pre></div>
</div>
<p>Next we package this up as a resource.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">define_in_memory_store_resource</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">ResourceDefinition</span><span class="p">(</span>
        <span class="n">resource_fn</span><span class="o">=</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="n">InMemoryStore</span><span class="p">(),</span>
        <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">    An in-memory key value store that requires no configuration. Useful for unittesting.</span>
<span class="s1">    &#39;&#39;&#39;</span><span class="p">,</span>
    <span class="p">)</span>
</pre></div>
</div>
<p>And lastly add a new context definition to represent this new operating “mode”:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="k">def</span> <span class="nf">define_resource_test_pipeline</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;resource_test_pipeline&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">add_ints</span><span class="p">],</span>
<span class="hll">        <span class="n">context_definitions</span><span class="o">=</span><span class="p">{</span>
</span><span class="hll">            <span class="s1">&#39;local&#39;</span><span class="p">:</span> <span class="n">PipelineContextDefinition</span><span class="p">(</span>
</span><span class="hll">                <span class="n">resources</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;store&#39;</span><span class="p">:</span> <span class="n">define_in_memory_store_resource</span><span class="p">()}</span>
</span>            <span class="p">),</span>
            <span class="s1">&#39;cloud&#39;</span><span class="p">:</span> <span class="n">PipelineContextDefinition</span><span class="p">(</span>
                <span class="n">resources</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;store&#39;</span><span class="p">:</span> <span class="n">define_cloud_store_resource</span><span class="p">()}</span>
            <span class="p">),</span>
        <span class="p">},</span>
</pre></div>
</div>
<p>Now we can simply change configuration and the “in-memory” version of the
resource will be used instead of the cloud version:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="n">result</span> <span class="o">=</span> <span class="n">execute_pipeline</span><span class="p">(</span>
    <span class="n">define_resource_test_pipeline</span><span class="p">(),</span>
<span class="hll">    <span class="n">environment</span><span class="o">=</span><span class="p">{</span>
</span>        <span class="s1">&#39;context&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;local&#39;</span><span class="p">:</span> <span class="p">{}},</span>
        <span class="s1">&#39;solids&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;add_ints&#39;</span><span class="p">:</span> <span class="p">{</span>
                <span class="s1">&#39;inputs&#39;</span><span class="p">:</span> <span class="p">{</span>
                    <span class="s1">&#39;num_one&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
                    <span class="s1">&#39;num_two&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;value&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">},</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
</pre></div>
</div>
<p>In the next section, we’ll see how to declaratively specify <a class="reference internal" href="repos.html"><span class="doc">Repositories</span></a> to
manage collections of multiple dagster pipelines.</p>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="execution_context.html" title="previous chapter">Execution Context</a></li>
      <li>Next: <a href="repos.html" title="next chapter">Repositories</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/resources.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/resources.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 69'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Reusable Solids &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Unit-testing Pipelines" href="unittesting.html" />
    <link rel="prev" title="Multiple Outputs" href="multiple_outputs.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="reusable-solids">
<h1>Reusable Solids<a class="headerlink" href="#reusable-solids" title="Permalink to this headline">¶</a></h1>
<p>So far we have been using solids tailor-made for each pipeline they were resident in, and have
only used a single instance of that solid. However, solids are, at their core, a specialized type
of function. And like functions, they should be reusable and not tied to a particular call site.</p>
<p>Imagine we have some solids that perform generic mathematical computations and we want them to
be reusable. E.g. we want to have a generic <code class="docutils literal notranslate"><span class="pre">adder</span></code> solid and use it a couple times within
a pipeline. Using APIs presented so far, that would be impossible: there would be a name collision
if one included two copies of the solid.</p>
<p>Instead we introduce a new class <code class="docutils literal notranslate"><span class="pre">SolidInstance</span></code> that allows the user to create multiple, named instances
of a single solid:</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">reusable_solids.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
    <span class="n">DependencyDefinition</span><span class="p">,</span>
    <span class="n">InputDefinition</span><span class="p">,</span>
    <span class="n">OutputDefinition</span><span class="p">,</span>
    <span class="n">PipelineDefinition</span><span class="p">,</span>
    <span class="n">SolidInstance</span><span class="p">,</span>
    <span class="n">lambda_solid</span><span class="p">,</span>
    <span class="n">Int</span><span class="p">,</span>
<span class="p">)</span>


<span class="nd">@lambda_solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num1&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">),</span> <span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num2&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">)],</span>
    <span class="n">output</span><span class="o">=</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">Int</span><span class="p">),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">adder</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span>


<span class="nd">@lambda_solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num1&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">),</span> <span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num2&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">)],</span>
    <span class="n">output</span><span class="o">=</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">Int</span><span class="p">),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">multer</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num1</span> <span class="o">*</span> <span class="n">num2</span>


<span class="k">def</span> <span class="nf">define_reusable_solids_pipeline</span><span class="p">():</span>
    <span class="c1"># (a + b) * (c + d)</span>

    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;reusable_solids_pipeline&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">adder</span><span class="p">,</span> <span class="n">multer</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="n">SolidInstance</span><span class="p">(</span><span class="s1">&#39;adder&#39;</span><span class="p">,</span> <span class="s1">&#39;a_plus_b&#39;</span><span class="p">):</span> <span class="p">{},</span>
            <span class="n">SolidInstance</span><span class="p">(</span><span class="s1">&#39;adder&#39;</span><span class="p">,</span> <span class="s1">&#39;c_plus_d&#39;</span><span class="p">):</span> <span class="p">{},</span>
            <span class="n">SolidInstance</span><span class="p">(</span><span class="s1">&#39;multer&#39;</span><span class="p">,</span> <span class="s1">&#39;final&#39;</span><span class="p">):</span> <span class="p">{</span>
                <span class="s1">&#39;num1&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;a_plus_b&#39;</span><span class="p">),</span>
                <span class="s1">&#39;num2&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;c_plus_d&#39;</span><span class="p">),</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">)</span>
</pre></div>
</td></tr></table></div>
</div>
<p>You’ll notice that now have two copies of the adder solid.</p>
<p>You can think of the solids parameter as declaring what solids are “in-scope” for the
purposes of this pipeline, and the dependencies parameter is how they instantiated
and connected together. Within the dependency graph and in config, the alias of the
particular instance is used, rather than the name of the definition.</p>
<p>If you inspect this in dagit, you’ll see those two instances:</p>
<img alt="../_images/reusable_solids_figure_one.png" src="../_images/reusable_solids_figure_one.png" />
<p>You also use the aliases in the environment config. In order to execute this pipeline, use
the following config file:</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">reusable_solids.yml</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="n">solids</span><span class="p">:</span>
  <span class="n">a_plus_b</span><span class="p">:</span>
    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">num1</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="mi">2</span>
      <span class="n">num2</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="mi">6</span>
  <span class="n">c_plus_d</span><span class="p">:</span>
    <span class="n">inputs</span><span class="p">:</span>
      <span class="n">num1</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="mi">4</span>
      <span class="n">num2</span><span class="p">:</span>
        <span class="n">value</span><span class="p">:</span> <span class="mi">8</span>
</pre></div>
</td></tr></table></div>
</div>
<p>Load this in dagit and you’ll see that the node are the graph are labeled with
their instance name.</p>
<div class="highlight-sh notranslate"><div class="highlight"><pre><span></span>$ dagit -f part_thirteen.py -n define_part_thirteen_step_two
</pre></div>
</div>
<p>Now these arithmetic operations are not particularly interesting, but one
can imagine reusable solids doing more useful things like uploading files
to cloud storage, unzipping files, etc.</p>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="multiple_outputs.html" title="previous chapter">Multiple Outputs</a></li>
      <li>Next: <a href="unittesting.html" title="next chapter">Unit-testing Pipelines</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/reusable_solids.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/reusable_solids.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 70'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>User-Defined Types &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Expectations" href="expectations.html" />
    <link rel="prev" title="Pipeline CLI Execution" href="pipeline_cli_execution.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="user-defined-types">
<h1>User-Defined Types<a class="headerlink" href="#user-defined-types" title="Permalink to this headline">¶</a></h1>
<p>Throughout the tutorial you have seen the use of builtins such as <a class="reference internal" href="../apidocs/types.html#dagster.Int" title="dagster.Int"><code class="xref py py-class docutils literal notranslate"><span class="pre">Int</span></code></a>
and <a class="reference internal" href="../apidocs/types.html#dagster.String" title="dagster.String"><code class="xref py py-class docutils literal notranslate"><span class="pre">String</span></code></a> for types. However you will want to be able to define your
own dagster types to fully utilize the system. We’ll go over that here.</p>
<p>As a pedogogical example, we will go over the code used to the define the <code class="docutils literal notranslate"><span class="pre">PandasDataFrame</span></code> type
in the dagster-pandas library, building it step by step along the way.</p>
<div class="section" id="basic-typing">
<h2>Basic Typing<a class="headerlink" href="#basic-typing" title="Permalink to this headline">¶</a></h2>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
        <span class="p">)</span>


<span class="n">DataFrame</span> <span class="o">=</span> <span class="n">as_dagster_type</span><span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;PandasDataFrame&#39;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;Two-dimensional size-mutable, potentially heterogeneous</span>
<span class="s1">    input_schema=dataframe_input_schema,</span>
</pre></div>
</div>
<p>What this code doing is annotating/registering an existing type as a dagster type. Now one can
include this type and use it as an input or output of a solid. The system will do a typecheck
to ensure that the object is of type <code class="docutils literal notranslate"><span class="pre">pd.DataFrame</span></code>.</p>
<p>Now one can use it to define a solid:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span> <span class="nd">@lambda_solid</span><span class="p">(</span>
<span class="hll">     <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num&#39;</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)],</span>
</span><span class="hll">     <span class="n">output</span><span class="o">=</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">DataFrame</span><span class="p">),</span>
</span> <span class="p">)</span>
 <span class="k">def</span> <span class="nf">sum_solid</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
     <span class="n">sum_df</span> <span class="o">=</span> <span class="n">num</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
     <span class="n">sum_df</span><span class="p">[</span><span class="s1">&#39;sum&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum_df</span><span class="p">[</span><span class="s1">&#39;num1&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">sum_df</span><span class="p">[</span><span class="s1">&#39;num2&#39;</span><span class="p">]</span>
     <span class="k">return</span> <span class="n">sum_df</span>
</pre></div>
</div>
<p>The type metadata now appears in dagit and the system will ensure the input and output to this
solid are indeed data frames.</p>
</div>
<div class="section" id="input-schema">
<h2>Input Schema<a class="headerlink" href="#input-schema" title="Permalink to this headline">¶</a></h2>
<p>This solid as defined is only expressed in terms of an in-memory object; it says nothing about
how this data should be sourced from or materialized to disk. This is where the notion of
input and output schemas come into play. Once the user provides those she is able to use
the configuration language in order to parameterize the computation.</p>
<p>Let us now add the input schema:</p>
<div class="highlight-py notranslate"><div class="highlight"><pre><span></span><span class="nd">@input_schema</span><span class="p">(</span>
    <span class="n">Selector</span><span class="p">(</span>
        <span class="p">{</span>
            <span class="s1">&#39;csv&#39;</span><span class="p">:</span> <span class="n">define_csv_dict_field</span><span class="p">(),</span>
            <span class="s1">&#39;parquet&#39;</span><span class="p">:</span> <span class="n">define_path_dict_field</span><span class="p">(),</span>
            <span class="s1">&#39;table&#39;</span><span class="p">:</span> <span class="n">define_path_dict_field</span><span class="p">(),</span>
        <span class="p">}</span>
    <span class="p">)</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">dataframe_input_schema</span><span class="p">(</span><span class="n">config_value</span><span class="p">):</span>
    <span class="n">file_type</span><span class="p">,</span> <span class="n">file_options</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">config_value</span><span class="o">.</span><span class="n">items</span><span class="p">())[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">check</span><span class="o">.</span><span class="n">str_param</span><span class="p">(</span><span class="n">file_type</span><span class="p">,</span> <span class="s1">&#39;file_type&#39;</span><span class="p">)</span>
    <span class="n">check</span><span class="o">.</span><span class="n">dict_param</span><span class="p">(</span><span class="n">file_options</span><span class="p">,</span> <span class="s1">&#39;file_options&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;csv&#39;</span><span class="p">:</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span>
        <span class="k">del</span> <span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">**</span><span class="n">file_options</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;parquet&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_parquet</span><span class="p">(</span><span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">])</span>
    <span class="k">elif</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;table&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_table</span><span class="p">(</span><span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">DagsterInvariantViolationError</span><span class="p">(</span>
            <span class="s1">&#39;Unsupported file_type {file_type}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
                <span class="n">file_type</span><span class="o">=</span><span class="n">file_type</span>
            <span class="p">)</span>
        <span class="p">)</span>
</pre></div>
</div>
<p>Any input schema is define by a decorated function with a single argument. The argument is the
format the input schema takes. In this case it is a <cite>Selector</cite>. Selectors are used when you want
to be able present several different options to the user but force them to select one. In this case,
for example, it would not make much sense to allow them to say that a single input should be sourced
from a csv and a parquet file: They must choose. (In other type systems this might be called an “input
union.”)</p>
<p>Note our selector provides three keys: <cite>csv</cite>, <cite>parquet</cite>, and <cite>table</cite>. Each of these in turn has
their own subfield selections. You’ll note that these are <cite>Dict</cite> requiring the user to provide all
required fields, rather than only one.</p>
<p>The remaining step here is that the user must provide code that takes those validated configurated
files and produces an object of the expected type. In this case that would be the pandas DataFrame
type. The user can assume the value abides by the provided schema and that any and all default
values have been applied.</p>
<p>Selectors are very commonly used for these type of schemas, so we’ve also provided an alternative
API that removes some boilerplate around manipulating the config_value dictionary. Instead, the
user-provided function takes the unpacked key and value of config_value directly, since in the
case of a selector, the config_value dictionary has only 1 (key, value) pair.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="nd">@input_selector_schema</span><span class="p">(</span>
    <span class="n">NamedSelector</span><span class="p">(</span>
        <span class="s1">&#39;DataFrameInputSchema&#39;</span><span class="p">,</span>
        <span class="p">{</span>
            <span class="s1">&#39;csv&#39;</span><span class="p">:</span> <span class="n">define_csv_dict_field</span><span class="p">(),</span>
            <span class="s1">&#39;parquet&#39;</span><span class="p">:</span> <span class="n">define_path_dict_field</span><span class="p">(),</span>
            <span class="s1">&#39;table&#39;</span><span class="p">:</span> <span class="n">define_path_dict_field</span><span class="p">(),</span>
        <span class="p">},</span>
    <span class="p">)</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">dataframe_input_schema</span><span class="p">(</span><span class="n">file_type</span><span class="p">,</span> <span class="n">file_options</span><span class="p">):</span>
    <span class="n">check</span><span class="o">.</span><span class="n">str_param</span><span class="p">(</span><span class="n">file_type</span><span class="p">,</span> <span class="s1">&#39;file_type&#39;</span><span class="p">)</span>
    <span class="n">check</span><span class="o">.</span><span class="n">dict_param</span><span class="p">(</span><span class="n">file_options</span><span class="p">,</span> <span class="s1">&#39;file_options&#39;</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;csv&#39;</span><span class="p">:</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span>
        <span class="k">del</span> <span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="o">**</span><span class="n">file_options</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;parquet&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_parquet</span><span class="p">(</span><span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">])</span>
    <span class="k">elif</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;table&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_table</span><span class="p">(</span><span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">DagsterInvariantViolationError</span><span class="p">(</span>
</pre></div>
</div>
<p>You’ll note that we no longer need to manipulate the <code class="docutils literal notranslate"><span class="pre">config_value</span></code> dictionary. It grabs
that key and value for you and calls the provided function.</p>
<p>Finally insert this into the original declaration:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>

<span class="n">DataFrame</span> <span class="o">=</span> <span class="n">as_dagster_type</span><span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;PandasDataFrame&#39;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;Two-dimensional size-mutable, potentially heterogeneous</span>
<span class="hll"><span class="s1">    tabular data structure with labeled axes (rows and columns).</span>
</span><span class="s1">    input_schema=dataframe_input_schema,</span>
</pre></div>
</div>
<p>Now if you run a pipeline with this solid from dagit you will be able to provide sources for
these inputs via config:</p>
<img alt="../_images/types_figure_one.png" src="../_images/types_figure_one.png" />
</div>
<div class="section" id="output-schema">
<h2>Output Schema<a class="headerlink" href="#output-schema" title="Permalink to this headline">¶</a></h2>
<p>We will add output schema now. They are similar to input schema, except that they are responsible
for taking the in-memory object flowed through your computation and materializing it to some
persistent store. Outputs are purely <em>optional</em> for any computation, whereas inputs <em>must</em> be provided
for a computation to proceed. You will likely want outputs as for a pipeline to be useful it
should produce some materialization that outlives the computation.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="hll"><span class="nd">@output_selector_schema</span><span class="p">(</span>
</span>    <span class="n">NamedSelector</span><span class="p">(</span>
        <span class="s1">&#39;DataFrameOutputSchema&#39;</span><span class="p">,</span>
        <span class="p">{</span>
            <span class="s1">&#39;csv&#39;</span><span class="p">:</span> <span class="n">define_csv_dict_field</span><span class="p">(),</span>
            <span class="s1">&#39;parquet&#39;</span><span class="p">:</span> <span class="n">define_path_dict_field</span><span class="p">(),</span>
            <span class="s1">&#39;table&#39;</span><span class="p">:</span> <span class="n">define_path_dict_field</span><span class="p">(),</span>
        <span class="p">},</span>
    <span class="p">)</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">dataframe_output_schema</span><span class="p">(</span><span class="n">file_type</span><span class="p">,</span> <span class="n">file_options</span><span class="p">,</span> <span class="n">pandas_df</span><span class="p">):</span>
    <span class="n">check</span><span class="o">.</span><span class="n">str_param</span><span class="p">(</span><span class="n">file_type</span><span class="p">,</span> <span class="s1">&#39;file_type&#39;</span><span class="p">)</span>
    <span class="n">check</span><span class="o">.</span><span class="n">dict_param</span><span class="p">(</span><span class="n">file_options</span><span class="p">,</span> <span class="s1">&#39;file_options&#39;</span><span class="p">)</span>
    <span class="n">check</span><span class="o">.</span><span class="n">inst_param</span><span class="p">(</span><span class="n">pandas_df</span><span class="p">,</span> <span class="s1">&#39;pandas_df&#39;</span><span class="p">,</span> <span class="n">DataFrame</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;csv&#39;</span><span class="p">:</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span>
        <span class="k">del</span> <span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">pandas_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="o">**</span><span class="n">file_options</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;parquet&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pandas_df</span><span class="o">.</span><span class="n">to_parquet</span><span class="p">(</span><span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">])</span>
    <span class="k">elif</span> <span class="n">file_type</span> <span class="o">==</span> <span class="s1">&#39;table&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pandas_df</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">file_options</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">],</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\\t</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
</pre></div>
</div>
<p>This has a similar aesthetic to an input schema but performs a different function. Notice that
it takes a third argument, <cite>pandas_df</cite> (it can be named anything), that is the value that was
outputted from the solid in question. It then takes the configuration data as “instructions” as to
how to materialize the value.</p>
<p>One connects the output schema to the type as follows:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>

<span class="n">DataFrame</span> <span class="o">=</span> <span class="n">as_dagster_type</span><span class="p">(</span>
    <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;PandasDataFrame&#39;</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;Two-dimensional size-mutable, potentially heterogeneous</span>
<span class="s1">    tabular data structure with labeled axes (rows and columns).</span>
<span class="hll"><span class="s1">    See http://pandas.pydata.org/&#39;&#39;&#39;</span><span class="p">,</span>
</span>    <span class="n">input_schema</span><span class="o">=</span><span class="n">dataframe_input_schema</span><span class="p">,</span>
</pre></div>
</div>
<p>Now we can provide a list of materializations to a given execution.</p>
<img alt="../_images/types_figure_two.png" src="../_images/types_figure_two.png" />
<p>You’ll note you can provide an arbitrary number of materializations. You can materialize any
given output any number of times in any number of formats.</p>
<img alt="../_images/types_figure_three.png" src="../_images/types_figure_three.png" />
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1"><a class="reference internal" href="unittesting.html">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="pipeline_cli_execution.html" title="previous chapter">Pipeline CLI Execution</a></li>
      <li>Next: <a href="expectations.html" title="next chapter">Expectations</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/types.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/types.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''

snapshots['test_build_all_docs 71'] = '''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Unit-testing Pipelines &#8212; Dagster  documentation</title>
    <link rel="stylesheet" href="../_static/alabaster.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <script type="text/javascript" id="documentation_options" data-url_root="../" src="../_static/documentation_options.js"></script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="index" title="Index" href="../genindex.html" />
    <link rel="search" title="Search" href="../search.html" />
    <link rel="next" title="Definitions" href="../apidocs/definitions.html" />
    <link rel="prev" title="Reusable Solids" href="reusable_solids.html" />
   
  <link rel="stylesheet" href="../_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="unit-testing-pipelines">
<h1>Unit-testing Pipelines<a class="headerlink" href="#unit-testing-pipelines" title="Permalink to this headline">¶</a></h1>
<p>Unit testing data pipelines is, broadly speaking, quite difficult. As a result, it is typically
never done.</p>
<p>One of the mechanisms included in dagster to enable testing has already been discussed: the
<a class="reference internal" href="execution_context.html"><span class="doc">Execution Context</span></a>. Recall that the context allows us to configure the
pipeline-level execution environment while keeping all of the code in our pipelines unchanged.</p>
<p>The other important testing mechanism is the ability to execute arbitrary subsets of a DAG. (This
capability is useful for other use cases but we will focus on unit testing for now).</p>
<p>Let’s start where we left off.</p>
<p>We have the following pipeline:</p>
<div class="literal-block-wrapper docutils container" id="id1">
<div class="code-block-caption"><span class="caption-text">unittesting.py</span><a class="headerlink" href="#id1" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">dagster</span> <span class="k">import</span> <span class="p">(</span>
    <span class="n">DependencyDefinition</span><span class="p">,</span>
    <span class="n">InputDefinition</span><span class="p">,</span>
    <span class="n">OutputDefinition</span><span class="p">,</span>
    <span class="n">PipelineDefinition</span><span class="p">,</span>
    <span class="n">SolidInstance</span><span class="p">,</span>
    <span class="n">execute_solid</span><span class="p">,</span>
    <span class="n">execute_solids</span><span class="p">,</span>
    <span class="n">lambda_solid</span><span class="p">,</span>
    <span class="n">Int</span><span class="p">,</span>
<span class="p">)</span>


<span class="nd">@lambda_solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num1&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">),</span> <span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num2&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">)],</span>
    <span class="n">output</span><span class="o">=</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">Int</span><span class="p">),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">adder</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span>


<span class="nd">@lambda_solid</span><span class="p">(</span>
    <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num1&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">),</span> <span class="n">InputDefinition</span><span class="p">(</span><span class="s1">&#39;num2&#39;</span><span class="p">,</span> <span class="n">Int</span><span class="p">)],</span>
    <span class="n">output</span><span class="o">=</span><span class="n">OutputDefinition</span><span class="p">(</span><span class="n">Int</span><span class="p">),</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">multer</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num1</span> <span class="o">*</span> <span class="n">num2</span>


<span class="k">def</span> <span class="nf">define_part_fourteen_step_one_pipeline</span><span class="p">():</span>
    <span class="c1"># (a + b) * (c + d)</span>

    <span class="k">return</span> <span class="n">PipelineDefinition</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="s1">&#39;part_fourteen_step_one_pipeline&#39;</span><span class="p">,</span>
        <span class="n">solids</span><span class="o">=</span><span class="p">[</span><span class="n">adder</span><span class="p">,</span> <span class="n">multer</span><span class="p">],</span>
        <span class="n">dependencies</span><span class="o">=</span><span class="p">{</span>
            <span class="n">SolidInstance</span><span class="p">(</span><span class="n">adder</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">&#39;a_plus_b&#39;</span><span class="p">):</span> <span class="p">{},</span>
            <span class="n">SolidInstance</span><span class="p">(</span><span class="n">adder</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">&#39;c_plus_d&#39;</span><span class="p">):</span> <span class="p">{},</span>
            <span class="n">SolidInstance</span><span class="p">(</span><span class="n">multer</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">&#39;final&#39;</span><span class="p">):</span> <span class="p">{</span>
                <span class="s1">&#39;num1&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;a_plus_b&#39;</span><span class="p">),</span>
                <span class="s1">&#39;num2&#39;</span><span class="p">:</span> <span class="n">DependencyDefinition</span><span class="p">(</span><span class="s1">&#39;c_plus_d&#39;</span><span class="p">),</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">)</span>

</pre></div>
</td></tr></table></div>
</div>
<p>Let’s say we wanted to test <em>one</em> of these solids in isolation.</p>
<p>We want to do is isolate that solid and execute with inputs we
provide, instead of from solids upstream in the dependency graph.</p>
<p>So let’s do that. Follow along in the comments:</p>
<div class="literal-block-wrapper docutils container" id="id2">
<div class="code-block-caption"><span class="caption-text">unittesting.py</span><a class="headerlink" href="#id2" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7</pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">execute_test_only_final</span><span class="p">():</span>
    <span class="n">solid_result</span> <span class="o">=</span> <span class="n">execute_solid</span><span class="p">(</span>
        <span class="n">define_part_fourteen_step_one_pipeline</span><span class="p">(),</span>
        <span class="s1">&#39;final&#39;</span><span class="p">,</span>
        <span class="n">inputs</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;num1&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;num2&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span>
    <span class="p">)</span>
    <span class="k">assert</span> <span class="n">solid_result</span><span class="o">.</span><span class="n">success</span>
</pre></div>
</td></tr></table></div>
</div>
<p>We can also execute entire arbitrary subdags rather than a single solid using
the <code class="docutils literal notranslate"><span class="pre">execute_solids</span></code> function</p>
<div class="literal-block-wrapper docutils container" id="id3">
<div class="code-block-caption"><span class="caption-text">unittesting.py</span><a class="headerlink" href="#id3" title="Permalink to this code">¶</a></div>
<div class="highlight-default notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span></span>

<span class="k">def</span> <span class="nf">execute_test_a_plus_b_final_subdag</span><span class="p">():</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">execute_solids</span><span class="p">(</span>
        <span class="n">define_part_fourteen_step_one_pipeline</span><span class="p">(),</span>
        <span class="p">[</span><span class="s1">&#39;a_plus_b&#39;</span><span class="p">,</span> <span class="s1">&#39;final&#39;</span><span class="p">],</span>
        <span class="n">inputs</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;a_plus_b&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;num1&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;num2&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">},</span> <span class="s1">&#39;final&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;num2&#39;</span><span class="p">:</span> <span class="mi">6</span><span class="p">}},</span>
    <span class="p">)</span>

</pre></div>
</td></tr></table></div>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h3><a href="../index.html">Table Of Contents</a></h3>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../principles.html">Principles</a></li>
<li class="toctree-l1"><a class="reference internal" href="../installation.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../contributing.html">Contributing</a></li>
</ul>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="hello_world.html">Hello, World</a></li>
<li class="toctree-l1"><a class="reference internal" href="hello_dag.html">Hello, DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="actual_dag.html">An actual DAG</a></li>
<li class="toctree-l1"><a class="reference internal" href="inputs.html">Inputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="config.html">Configuration</a></li>
<li class="toctree-l1"><a class="reference internal" href="configuration_schemas.html">Configuration Schemas</a></li>
<li class="toctree-l1"><a class="reference internal" href="execution_context.html">Execution Context</a></li>
<li class="toctree-l1"><a class="reference internal" href="resources.html">Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="repos.html">Repositories</a></li>
<li class="toctree-l1"><a class="reference internal" href="pipeline_cli_execution.html">Pipeline CLI Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="types.html">User-Defined Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="expectations.html">Expectations</a></li>
<li class="toctree-l1"><a class="reference internal" href="multiple_outputs.html">Multiple Outputs</a></li>
<li class="toctree-l1"><a class="reference internal" href="reusable_solids.html">Reusable Solids</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Unit-testing Pipelines</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/definitions.html">Definitions</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/decorators.html">Decorators</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/execution.html">Execution</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/errors.html">Errors</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/types.html">Types</a></li>
<li class="toctree-l1"><a class="reference internal" href="../apidocs/utilities.html">Utilities</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_new_concepts.html">New Concepts in 0.3.0</a></li>
<li class="toctree-l1"><a class="reference internal" href="../guides/028_to_030_upgrade_guide.html">Upgrading to 0.3.0</a></li>
</ul>
<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="../index.html">Documentation overview</a><ul>
      <li>Previous: <a href="reusable_solids.html" title="previous chapter">Reusable Solids</a></li>
      <li>Next: <a href="../apidocs/definitions.html" title="next chapter">Definitions</a></li>
  </ul></li>
</ul>
</div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="../_sources/intro_tutorial/unittesting.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$(\'#searchbox\').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2018, Elementl, Inc.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 1.7.5</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="../_sources/intro_tutorial/unittesting.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </body>
</html>'''
